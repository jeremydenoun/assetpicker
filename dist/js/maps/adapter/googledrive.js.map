{"version":3,"sources":["adapter/node_modules/browser-pack/_prelude.js","adapter/node_modules/process/browser.js","adapter/googledrive.js","adapter/node_modules/vue/dist/vue.common.js","adapter/src/js/adapter/googledrive/index.js"],"names":["f","exports","module","define","amd","g","window","global","self","this","AssetPickerAdapterGoogledrive","e","t","n","r","s","o","u","a","require","i","Error","code","l","call","length","1","defaultSetTimout","defaultClearTimeout","runTimeout","fun","cachedSetTimeout","setTimeout","runClearTimeout","marker","cachedClearTimeout","clearTimeout","cleanUpNextTick","draining","currentQueue","queue","concat","queueIndex","drainQueue","timeout","len","run","Item","array","noop","process","nextTick","args","Array","arguments","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","binding","name","cwd","chdir","dir","umask","2","set","obj","key","val","hasOwn","_isVue","_data","ob","__ob__","convert","dep","notify","vms","vm","_proxy","_digest","del","_unproxy","hasOwnProperty","isLiteral","exp","literalValueRE","test","isReserved","str","c","charCodeAt","_toString","value","toString","toNumber","parsed","Number","isNaN","toBoolean","stripQuotes","b","slice","camelize","replace","camelizeRE","toUpper","_","toUpperCase","hyphenate","hyphenateRE","toLowerCase","classify","classifyRE","bind","fn","ctx","toArray","list","start","ret","extend","to","from","keys","Object","isObject","isPlainObject","OBJECT_STRING","def","enumerable","defineProperty","writable","configurable","_debounce","func","wait","context","timestamp","result","later","last","Date","now","indexOf","arr","cancellable","cb","cancelled","cancel","looseEqual","JSON","stringify","isNative","Ctor","Cache","limit","size","head","tail","undefined","_keymap","create","peek","index","next","eof","eatSpace","spaceChr","isStringStart","chr","doubleChr","singleChr","isExpStart","expStartChr","isExpEnd","expChrPair","parseString","stringQuote","escapeChr","parseSpecialExp","inExp","startChr","parseExpression","pipeChr","state","startState","filterArgState","filterState","filterNameState","parseFilterList","filters","parseFilter","filter","trim","parseFilterArguments","arg","processFilterArg","reservedArgRE","dynamic","stripped","parseDirective","hit","cache$1","get","expression","put","escapeRegex","regexEscapeRE","compileRegex","open","config","delimiters","close","unsafeOpen","unsafeDelimiters","unsafeClose","tagRE","RegExp","htmlRE","cache","parseText","text","match","html","first","oneTime","tokens","lastIndex","exec","tag","tokensToExp","map","token","formatToken","join","single","$eval","inlineFilters","filterRE","appendWithTransition","el","target","applyTransition","appendChild","beforeWithTransition","before","removeWithTransition","remove","direction","op","transition","__v_trans","hooks","transitionEndEvent","_isCompiled","$parent","action","query","selector","document","querySelector","NODE_ENV","warn","inDoc","node","doc","ownerDocument","documentElement","parent","parentNode","nodeType","contains","getAttr","_attr","getAttribute","removeAttribute","getBindAttr","hasBindAttr","hasAttribute","insertBefore","after","nextSibling","removeChild","prepend","firstChild","replaceChild","event","useCapture","addEventListener","removeEventListener","getClass","classname","className","baseVal","setClass","cls","isIE9","namespaceURI","setAttribute","addClass","classList","add","cur","removeClass","tar","extractContent","asFragment","child","rawContent","isTemplate","isFragment","content","hasChildNodes","trimNode","createDocumentFragment","createElement","isTrimmable","lastChild","data","tagName","createAnchor","persist","anchor","debug","createComment","createTextNode","__v_anchor","findRef","hasAttributes","attrs","attributes","refRE","mapNodeRange","end","removeNodeRange","frag","onRemoved","removed","done","nodes","getOuterHTML","outerHTML","container","cloneNode","innerHTML","checkComponentAttr","options","hasAttrs","commonTagRE","reservedTagRE","getIsBinding","resolveAsset","id","is","expectedTag","_componentNameMap","isUnknownElement","mergeData","toVal","fromVal","mergeAssets","parentVal","childVal","res","guardArrayAssets","guardComponents","components","ids","Vue","guardProps","props","isArray","type","assets","asset","mergeOptions","mergeField","strat","strats","defaultStrat","propsData","mixins","mixin","mixinOptions","warnMissing","camelizedId","charAt","Dep","uid$1","subs","withoutConversion","shouldConvert","Observer","augment","hasProto","protoAugment","copyAugment","arrayMethods","arrayKeys","observeArray","walk","src","__proto__","observe","isExtensible","addVm","defineReactive","property","getOwnPropertyDescriptor","getter","setter","childOb","depend","newVal","initMixin","_init","$el","$root","$children","$refs","$els","_watchers","_directives","_uid","uid","_events","_eventsCount","_isFragment","_fragment","_fragmentStart","_fragmentEnd","_isDestroyed","_isReady","_isAttached","_isBeingDestroyed","_vForRemoving","_unlinkFn","_context","_scope","_frag","children","$options","constructor","_updateRef","_callHook","_initState","_initEvents","$mount","getPathCharType","ch","formatSubPath","path","trimmed","parse","maybeUnescapeQuote","nextChar","mode","IN_SINGLE_QUOTE","IN_DOUBLE_QUOTE","newChar","actions","APPEND","typeMap","BEFORE_PATH","subPathDepth","PUSH","INC_SUB_PATH_DEPTH","PUSH_SUB_PATH","IN_SUB_PATH","pathStateMachine","ERROR","AFTER_PATH","raw","parsePath","pathCache","getPath","parseExpression$1","setPath","original","warnNonExistent","$set","save","isString","saved","newlineRE","rewrite","allowedKeywordsRE","restoreRE","restore","compileGetter","improperKeywordsRE","body","saveRE","wsRE","identRE","makeGetterFn","Function","compileSetter","scope","needSet","expressionCache","isSimplePath","pathTestRE","literalValueRE$1","resetBatcherState","userQueue","has","circular","waiting","flushBatcherQueue","_again","runBatcherQueue","devtools","watcher","_maxUpdateCount","pushWatcher","q","user","Watcher","expOrFn","isFn","uid$2","active","dirty","lazy","deps","newDeps","depIds","_Set","newDepIds","prevError","twoWay","queued","shallow","traverse","seen","seenObjects","clear","isA","isO","depId","isRealTemplate","stringToFragment","templateString","cacheKey","templateCache","tagMatch","tagRE$1","entityMatch","entityRE","commentMatch","commentRE","wrap","efault","depth","prefix","suffix","nodeToFragment","textContent","clonedNode","querySelectorAll","cloned","hasBrokenTemplate","tempClone","hasTextareaCloneBug","parseTemplate","template","shouldClone","idSelectorCache","getElementById","Fragment","linker","host","parentFrag","childFrags","inserted","unlink","childNodes","singleBefore","singleRemove","multiBefore","multiRemove","__v_frag","withTransition","method","callHook","attach","shouldCallRemove","beforeRemove","detach","destroy","FragmentFactory","cid","cacheId","linkerCache","compile","findPrevFrag","previousSibling","forId","range","Math","floor","getTrackByKey","trackByKey","findVmFromFrag","__vue__","getValue","multi","init","selected","_value","indexOf$1","keyFilter","handler","codes","charCode","parseInt","keyCodes","keyCode","stopFilter","stopPropagation","preventFilter","preventDefault","selfFilter","currentTarget","normalize","prop","propCache","camel","upper","testEl","prefixed","prefixes","style","kebab","camelPrefixes","normalize$1","_key","k","split","callActivateHooks","called","total","compileProps","propOptions","attr","names","empty","identRE$1","propBindingModes","ONE_WAY","TWO_WAY","ONE_TIME","optimizedLiteral","settablePathRE","parentPath","lowerCaseName","required","makePropsLinkFn","_props","inlineProps","initProp","$get","_bindDir","propDef","Boolean","processPropValue","rawValue","isSimple","getPropDefaultValue","coerceProp","coerced","assertProp","updateProp","valid","expectedTypes","assertedType","assertType","expectedType","formatType","formatValue","validator","coerce","String","pushJob","job","queue$1","flush","offsetHeight","Transition","enterClass","leaveClass","pendingCssEvent","pendingCssCb","pendingJsCb","justEntered","entered","left","typeCache","TYPE_TRANSITION","TYPE_ANIMATION","forEach","m","isHidden","rect","getBoundingClientRect","width","height","offsetWidth","getClientRects","partial","nodeLinkFn","_asComponent","compileNode","childLinkFn","terminal","isScript","compileNodeList","dirs","linkAndCapture","makeUnlinkFn","originalDirCount","sortDirectives","_bind","j","groupedMap","priorities","priority","descriptor","DEFAULT_PRIORITY","sort","group","contextDirs","destroying","teardownDirs","_teardown","$remove","compileAndLinkProps","propsLinkFn","propDirs","compileRoot","contextOptions","contextLinkFn","replacerLinkFn","containerAttrs","_containerAttrs","replacerAttrs","_replacerAttrs","compileDirectives","onRE","plural","componentName","selfDirs","compileTextNode","compileElement","skip","linkFn","checkTerminalDirectives","checkElementDirectives","checkComponent","_skip","removeText","wholeText","processTextToken","makeTextNodeLinkFn","setTokenType","directives","fragClone","nodeList","linkFns","makeChildLinkFn","childrenLinkFn","makeTerminalNodeLinkFn","component","ref","internalDirectives","modifiers","literal","componentLinkFn","prev","previousElementSibling","matched","dirName","rawName","termDef","modifierRE","dirAttrRE","DEFAULT_TERMINAL_PRIORITY","parseModifiers","pushDir","interpTokens","hasOneTimeToken","hasOneTime","interp","dirDef","some","transitionRE","bindRE","makeNodeLinkFn","transclude","extractAttrs","_content","transcludeTemplate","replacer","mergeAttrs","specialCharRE","resolveSlots","contents","_slotContents","extractFragment","stateMixin","makeComputedGetter","owner","evaluate","newData","_setData","_initProps","_initMeta","_initMethods","_initData","_initComputed","_propsUnlinkFn","dataFn","oldData","removeVm","update","computed","userDef","methods","metas","_meta","eventsMixin","registerComponentEvents","eventRE","_fromParent","$on","registerCallbacks","hash","handlers","register","onAttached","callAttach","onDetached","callDetach","events","watch","_initDOMHooks","hook","$emit","noop$1","Directive","_locked","_bound","_listeners","_host","_vue_directives","lifecycleMixin","_ref","refs","_compile","_initElement","rootLinker","contentLinkFn","ctor","_linkerCachable","rootUnlinkFn","contentUnlinkFn","_destroy","deferCleanup","_cleanup","destroyReady","pendingRemoval","cleanupIfPossible","$destroy","teardown","$off","miscMixin","_applyFilters","oldValue","write","offset","read","_resolveComponent","factory","resolved","requested","pendingCallbacks","cbs","reason","dataAPI","clean","asStatement","$arguments","$delete","$watch","deep","sync","immediate","filterRE$1","$interpolate","$log","console","log","domAPI","insert","op1","op2","targetIsDetached","shouldCallHook","append","beforeWithCb","removeWithCb","$nextTick","$appendTo","$prependTo","$before","$after","inDocument","realCb","eventsAPI","modifyListenerCount","count","hookRE","$once","splice","isSource","shouldPropagate","hasParentCbs","$broadcast","source","$dispatch","lifecycleAPI","ready","$compile","limitBy","filterBy","search","delimiter","convertArray","item","$value","$key","orderBy","baseCompare","sortKeyIndex","sortKey","sortKeys","order","comparator","firstArg","installGlobalAPI","createClass","elementDirectives","transitions","partials","util","compiler","parsers","directive","extendOptions","Super","isFirstExtend","_Ctor","Sub","_assetTypes","use","plugin","installed","unshift","install","definition","inBrowser","__VUE_DEVTOOLS_GLOBAL_HOOK__","UA","navigator","userAgent","isIE","isAndroid","isIOS","transitionProp","animationProp","animationEndEvent","isWebkitTrans","ontransitionend","onwebkittransitionend","isWebkitAnim","onanimationend","onwebkitanimationend","nextTickHandler","pending","copies","callbacks","timerFunc","Promise","p","resolve","then","MutationObserver","counter","observer","textNode","characterData","Set","entry","shift","newer","older","returnEntry","91","123","40","freeze","defineProperties","silent","async","warnExpressionErrors","_delimitersChanged","_propBindingModes","formatComponentName","hasConsole","msg","error","HTMLUnknownElement","HTMLElement","optionMergeStrategies","instanceData","defaultData","created","attached","detached","beforeCompile","compiled","beforeDestroy","destroyed","activate","addSub","sub","removeSub","addDep","arrayProto","getOwnPropertyNames","items","debounce","IN_PATH","BEFORE_IDENT","IN_IDENT","ws","ident","[",".","0","number","'","\"","]","else","allowedKeywords","improperKeywords","beforeGet","preProcess","postProcess","afterGet","forContext","$forContext","alias","_withLock","$index","tmp","current","text$1","legend","tr","col","td","th","option","optgroup","thead","tbody","colgroup","caption","tfoot","defs","symbol","image","circle","ellipse","line","polygon","polyline","placeholder","swap","_watcher","ON","MODEL","BIND","TRANSITION","EL","COMPONENT","PARTIAL","IF","FOR","SLOT","uid$3","vFor","params","inMatch","itMatch","iterator","isOption","diff","updateRef","updateModel","primitive","convertedFromObject","fromObject","trackBy","oldFrags","frags","getCachedFrag","reused","fresh","removalIndex","totalRemoved","deleteCachedFrag","w","targetPrev","prevEl","currentPrev","insertionIndex","staggerCb","staggerAnchor","move","parentScope","cacheFrag","model","__v_model","forceUpdate","staggerAmount","getStagger","warnDuplicate","trans","stagger","_preProcess","_postProcess","unbind","vIf","invalid","nextElementSibling","elseEl","elseFrag","elseFactory","show","toggle","display","text$2","isRange","composing","listener","focused","rawListener","hasjQuery","jQuery","afterBind","radio","checked","select","_this","multiple","initValue","selectedIndex","checkbox","getBooleanValue","_trueValue","_falseValue","checkFilters","hasRead","hasWrite","_unbind","esc","tab","enter","space","delete","up","right","down","on$1","acceptStatement","iframeBind","contentWindow","capture","stop","prevent","reset","importantRE","cssText","handleObject","reduce","handleSingle","isImportant","setProperty","xlinkNS","xlinkRE","disallowedInterpAttrRE","attrWithPropsRE","enumeratedAttrRE","modelProps","true-value","false-value","bind$1","attrValue","modelProp","setAttributeNS","cloak","for","if","vClass","cleanup","prevKeys","keepAlive","inlineTemplate","pendingComponentCb","Component","pendingRemovals","pendingRemovalCb","setComponent","invalidatePending","resolveComponent","mountComponent","unbuild","childVM","ComponentName","activateHooks","cached","getCached","newComponent","build","waitingFor","extraOptions","_isRouterView","defer","_inactive","transitionMode","bindingModes","childKey","parentKey","parentWatcher","childWatcher","transDurationProp","animDurationProp","raf","requestAnimationFrame","waitForTransitionStart","p$1","cancelPending","callHookWithCb","enterCancelled","enterNextTick","enterDone","getCssTransitionType","setupCssCb","leave","leaveCancelled","leaveDone","leaveNextTick","hasPending","hidden","css","inlineStyles","computedStyles","getComputedStyle","transDuration","animDuration","onEnd","transition$1","oldId","class","_setupParams","_checkStatement","_update","oldVal","mappedKey","_setupParamWatcher","unwatch","paramWatchers","_paramUnwatchFns","$event","listeners","unwatchFns","slot","fallback","elseBlock","digitsRE","json","indent","capitalize","uppercase","lowercase","currency","_currency","decimals","parseFloat","isFinite","stringified","abs","toFixed","_int","_float","sign","pluralize","delay","_process","3","auth2","numInstances","translations","description","en","de","fr","spreadsheet","presentation","form","drawing","folder","script","http","base","throttle","hosted_domain","auth","email","stored","loadAuth2","$promise","loadScript","gapi","load","client_id","signIn","isSignedIn","currentUser","div","button","attachClickHandler","setupToken","setup","api_key","headers","Authorization","expires_at","getAuthResponse","access_token","getBasicProfile","getEmail","loadItems","load-items","tree","fields","response","sortItems","files","typeLabel","googleType","mimeType","pop","substr","createItem","mediaType","icon","iconLink","iconBig","label","links","download","webContentLink","webViewLink","extension","fileExtension","thumbnail","thumbnailLink","vue"],"mappings":"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","file":"../../adapter/googledrive.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.AssetPickerAdapterGoogledrive = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n\n},{}],2:[function(require,module,exports){\n(function (process){\n/*!\n * Vue.js v1.0.28\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\nfunction set(obj, key, val) {\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return;\n  }\n  if (obj._isVue) {\n    set(obj._data, key, val);\n    return;\n  }\n  var ob = obj.__ob__;\n  if (!ob) {\n    obj[key] = val;\n    return;\n  }\n  ob.convert(key, val);\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._proxy(key);\n      vm._digest();\n    }\n  }\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n *\n * @param {Object} obj\n * @param {String} key\n */\n\nfunction del(obj, key) {\n  if (!hasOwn(obj, key)) {\n    return;\n  }\n  delete obj[key];\n  var ob = obj.__ob__;\n  if (!ob) {\n    if (obj._isVue) {\n      delete obj._data[key];\n      obj._digest();\n    }\n    return;\n  }\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._unproxy(key);\n      vm._digest();\n    }\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check whether the object has the property.\n *\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Check if an expression is a literal value.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\n\n/**\n * Check if a string starts with $ or _\n *\n * @param {String} str\n * @return {Boolean}\n */\n\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Guard text output, make sure undefined outputs\n * empty string\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction _toString(value) {\n  return value == null ? '' : value.toString();\n}\n\n/**\n * Check and convert possible numeric strings to numbers\n * before setting back to data\n *\n * @param {*} value\n * @return {*|Number}\n */\n\nfunction toNumber(value) {\n  if (typeof value !== 'string') {\n    return value;\n  } else {\n    var parsed = Number(value);\n    return isNaN(parsed) ? value : parsed;\n  }\n}\n\n/**\n * Convert string boolean literals into real booleans.\n *\n * @param {*} value\n * @return {*|Boolean}\n */\n\nfunction toBoolean(value) {\n  return value === 'true' ? true : value === 'false' ? false : value;\n}\n\n/**\n * Strip quotes from a string\n *\n * @param {String} str\n * @return {String | false}\n */\n\nfunction stripQuotes(str) {\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n}\n\n/**\n * Camelize a hyphen-delimited string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar camelizeRE = /-(\\w)/g;\n\nfunction camelize(str) {\n  return str.replace(camelizeRE, toUpper);\n}\n\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : '';\n}\n\n/**\n * Hyphenate a camelCase string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar hyphenateRE = /([^-])([A-Z])/g;\n\nfunction hyphenate(str) {\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n}\n\n/**\n * Converts hyphen/underscore/slash delimitered names into\n * camelized classNames.\n *\n * e.g. my-component => MyComponent\n *      some_else    => SomeElse\n *      some/comp    => SomeComp\n *\n * @param {String} str\n * @return {String}\n */\n\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\nfunction classify(str) {\n  return str.replace(classifyRE, toUpper);\n}\n\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\n\nfunction bind(fn, ctx) {\n  return function (a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  };\n}\n\n/**\n * Convert an Array-like object to a real Array.\n *\n * @param {Array-like} list\n * @param {Number} [start] - start index\n * @return {Array}\n */\n\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nfunction extend(to, from) {\n  var keys = Object.keys(from);\n  var i = keys.length;\n  while (i--) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\n\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar isArray = Array.isArray;\n\n/**\n * Define a property.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Debounce a function so it only gets called after the\n * input stops arriving after the given wait period.\n *\n * @param {Function} func\n * @param {Number} wait\n * @return {Function} - the debounced function\n */\n\nfunction _debounce(func, wait) {\n  var timeout, args, context, timestamp, result;\n  var later = function later() {\n    var last = Date.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    return result;\n  };\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nfunction indexOf(arr, obj) {\n  var i = arr.length;\n  while (i--) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n}\n\n/**\n * Make a cancellable version of an async callback.\n *\n * @param {Function} fn\n * @return {Function}\n */\n\nfunction cancellable(fn) {\n  var cb = function cb() {\n    if (!cb.cancelled) {\n      return fn.apply(this, arguments);\n    }\n  };\n  cb.cancel = function () {\n    cb.cancelled = true;\n  };\n  return cb;\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n *\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n */\n\nfunction looseEqual(a, b) {\n  /* eslint-disable eqeqeq */\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n  /* eslint-enable eqeqeq */\n}\n\nvar hasProto = ('__proto__' in {});\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n// UA sniffing for working around browser-specific quirks\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && UA.indexOf('trident') > 0;\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\nvar transitionProp = undefined;\nvar transitionEndEvent = undefined;\nvar animationProp = undefined;\nvar animationEndEvent = undefined;\n\n// Transition property/event sniffing\nif (inBrowser && !isIE9) {\n  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n}\n\n/* istanbul ignore next */\nfunction isNative(Ctor) {\n  return (/native code/.test(Ctor.toString())\n  );\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} cb\n * @param {Object} ctx\n */\n\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc = undefined;\n\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var noop = function noop() {};\n    timerFunc = function () {\n      p.then(nextTickHandler);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) setTimeout(noop);\n    };\n  } else if (typeof MutationObserver !== 'undefined') {\n    // use MutationObserver where native Promise is not available,\n    // e.g. IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = setTimeout;\n  }\n\n  return function (cb, ctx) {\n    var func = ctx ? function () {\n      cb.call(ctx);\n    } : cb;\n    callbacks.push(func);\n    if (pending) return;\n    pending = true;\n    timerFunc(nextTickHandler, 0);\n  };\n})();\n\nvar _Set = undefined;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    this.set = Object.create(null);\n  };\n  _Set.prototype.has = function (key) {\n    return this.set[key] !== undefined;\n  };\n  _Set.prototype.add = function (key) {\n    this.set[key] = 1;\n  };\n  _Set.prototype.clear = function () {\n    this.set = Object.create(null);\n  };\n}\n\nfunction Cache(limit) {\n  this.size = 0;\n  this.limit = limit;\n  this.head = this.tail = undefined;\n  this._keymap = Object.create(null);\n}\n\nvar p = Cache.prototype;\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed;\n\n  var entry = this.get(key, true);\n  if (!entry) {\n    if (this.size === this.limit) {\n      removed = this.shift();\n    }\n    entry = {\n      key: key\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    this.size++;\n  }\n  entry.value = value;\n\n  return removed;\n};\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head;\n  if (entry) {\n    this.head = this.head.newer;\n    this.head.older = undefined;\n    entry.newer = entry.older = undefined;\n    this._keymap[entry.key] = undefined;\n    this.size--;\n  }\n  return entry;\n};\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key];\n  if (entry === undefined) return;\n  if (entry === this.tail) {\n    return returnEntry ? entry : entry.value;\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer;\n    }\n    entry.newer.older = entry.older; // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer; // C. --> E\n  }\n  entry.newer = undefined; // D --x\n  entry.older = this.tail; // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry; // E. <-- D\n  }\n  this.tail = entry;\n  return returnEntry ? entry : entry.value;\n};\n\nvar cache$1 = new Cache(1000);\nvar reservedArgRE = /^in$|^-?\\d+/;\n\n/**\n * Parser state\n */\n\nvar str;\nvar dir;\nvar len;\nvar index;\nvar chr;\nvar state;\nvar startState = 0;\nvar filterState = 1;\nvar filterNameState = 2;\nvar filterArgState = 3;\n\nvar doubleChr = 0x22;\nvar singleChr = 0x27;\nvar pipeChr = 0x7C;\nvar escapeChr = 0x5C;\nvar spaceChr = 0x20;\n\nvar expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };\nvar expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };\n\nfunction peek() {\n  return str.charCodeAt(index + 1);\n}\n\nfunction next() {\n  return str.charCodeAt(++index);\n}\n\nfunction eof() {\n  return index >= len;\n}\n\nfunction eatSpace() {\n  while (peek() === spaceChr) {\n    next();\n  }\n}\n\nfunction isStringStart(chr) {\n  return chr === doubleChr || chr === singleChr;\n}\n\nfunction isExpStart(chr) {\n  return expStartChr[chr];\n}\n\nfunction isExpEnd(start, chr) {\n  return expChrPair[start] === chr;\n}\n\nfunction parseString() {\n  var stringQuote = next();\n  var chr;\n  while (!eof()) {\n    chr = next();\n    // escape char\n    if (chr === escapeChr) {\n      next();\n    } else if (chr === stringQuote) {\n      break;\n    }\n  }\n}\n\nfunction parseSpecialExp(chr) {\n  var inExp = 0;\n  var startChr = chr;\n\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n      continue;\n    }\n\n    if (startChr === chr) {\n      inExp++;\n    }\n    if (isExpEnd(startChr, chr)) {\n      inExp--;\n    }\n\n    next();\n\n    if (inExp === 0) {\n      break;\n    }\n  }\n}\n\n/**\n * syntax:\n * expression | filterName  [arg  arg [| filterName arg arg]]\n */\n\nfunction parseExpression() {\n  var start = index;\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n    } else if (isExpStart(chr)) {\n      parseSpecialExp(chr);\n    } else if (chr === pipeChr) {\n      next();\n      chr = peek();\n      if (chr === pipeChr) {\n        next();\n      } else {\n        if (state === startState || state === filterArgState) {\n          state = filterState;\n        }\n        break;\n      }\n    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {\n      eatSpace();\n      break;\n    } else {\n      if (state === filterState) {\n        state = filterNameState;\n      }\n      next();\n    }\n  }\n\n  return str.slice(start + 1, index) || null;\n}\n\nfunction parseFilterList() {\n  var filters = [];\n  while (!eof()) {\n    filters.push(parseFilter());\n  }\n  return filters;\n}\n\nfunction parseFilter() {\n  var filter = {};\n  var args;\n\n  state = filterState;\n  filter.name = parseExpression().trim();\n\n  state = filterArgState;\n  args = parseFilterArguments();\n\n  if (args.length) {\n    filter.args = args;\n  }\n  return filter;\n}\n\nfunction parseFilterArguments() {\n  var args = [];\n  while (!eof() && state !== filterState) {\n    var arg = parseExpression();\n    if (!arg) {\n      break;\n    }\n    args.push(processFilterArg(arg));\n  }\n\n  return args;\n}\n\n/**\n * Check if an argument is dynamic and strip quotes.\n *\n * @param {String} arg\n * @return {Object}\n */\n\nfunction processFilterArg(arg) {\n  if (reservedArgRE.test(arg)) {\n    return {\n      value: toNumber(arg),\n      dynamic: false\n    };\n  } else {\n    var stripped = stripQuotes(arg);\n    var dynamic = stripped === arg;\n    return {\n      value: dynamic ? arg : stripped,\n      dynamic: dynamic\n    };\n  }\n}\n\n/**\n * Parse a directive value and extract the expression\n * and its filters into a descriptor.\n *\n * Example:\n *\n * \"a + 1 | uppercase\" will yield:\n * {\n *   expression: 'a + 1',\n *   filters: [\n *     { name: 'uppercase', args: null }\n *   ]\n * }\n *\n * @param {String} s\n * @return {Object}\n */\n\nfunction parseDirective(s) {\n  var hit = cache$1.get(s);\n  if (hit) {\n    return hit;\n  }\n\n  // reset parser state\n  str = s;\n  dir = {};\n  len = str.length;\n  index = -1;\n  chr = '';\n  state = startState;\n\n  var filters;\n\n  if (str.indexOf('|') < 0) {\n    dir.expression = str.trim();\n  } else {\n    dir.expression = parseExpression().trim();\n    filters = parseFilterList();\n    if (filters.length) {\n      dir.filters = filters;\n    }\n  }\n\n  cache$1.put(s, dir);\n  return dir;\n}\n\nvar directive = Object.freeze({\n  parseDirective: parseDirective\n});\n\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\nvar cache = undefined;\nvar tagRE = undefined;\nvar htmlRE = undefined;\n/**\n * Escape a string so it can be used in a RegExp\n * constructor.\n *\n * @param {String} str\n */\n\nfunction escapeRegex(str) {\n  return str.replace(regexEscapeRE, '\\\\$&');\n}\n\nfunction compileRegex() {\n  var open = escapeRegex(config.delimiters[0]);\n  var close = escapeRegex(config.delimiters[1]);\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\n  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\n  // reset cache\n  cache = new Cache(1000);\n}\n\n/**\n * Parse a template text string into an array of tokens.\n *\n * @param {String} text\n * @return {Array<Object> | null}\n *               - {String} type\n *               - {String} value\n *               - {Boolean} [html]\n *               - {Boolean} [oneTime]\n */\n\nfunction parseText(text) {\n  if (!cache) {\n    compileRegex();\n  }\n  var hit = cache.get(text);\n  if (hit) {\n    return hit;\n  }\n  if (!tagRE.test(text)) {\n    return null;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, html, value, first, oneTime;\n  /* eslint-disable no-cond-assign */\n  while (match = tagRE.exec(text)) {\n    /* eslint-enable no-cond-assign */\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push({\n        value: text.slice(lastIndex, index)\n      });\n    }\n    // tag token\n    html = htmlRE.test(match[0]);\n    value = html ? match[1] : match[2];\n    first = value.charCodeAt(0);\n    oneTime = first === 42; // *\n    value = oneTime ? value.slice(1) : value;\n    tokens.push({\n      tag: true,\n      value: value.trim(),\n      html: html,\n      oneTime: oneTime\n    });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push({\n      value: text.slice(lastIndex)\n    });\n  }\n  cache.put(text, tokens);\n  return tokens;\n}\n\n/**\n * Format a list of tokens into an expression.\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\n * into one single expression as '\"a \" + b + \" c\"'.\n *\n * @param {Array} tokens\n * @param {Vue} [vm]\n * @return {String}\n */\n\nfunction tokensToExp(tokens, vm) {\n  if (tokens.length > 1) {\n    return tokens.map(function (token) {\n      return formatToken(token, vm);\n    }).join('+');\n  } else {\n    return formatToken(tokens[0], vm, true);\n  }\n}\n\n/**\n * Format a single token.\n *\n * @param {Object} token\n * @param {Vue} [vm]\n * @param {Boolean} [single]\n * @return {String}\n */\n\nfunction formatToken(token, vm, single) {\n  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\n}\n\n/**\n * For an attribute with multiple interpolation tags,\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n * the whole thing into a single watchable expression, we\n * have to inline those filters. This function does exactly\n * that. This is a bit hacky but it avoids heavy changes\n * to directive parser and watcher mechanism.\n *\n * @param {String} exp\n * @param {Boolean} single\n * @return {String}\n */\n\nvar filterRE = /[^|]\\|[^|]/;\nfunction inlineFilters(exp, single) {\n  if (!filterRE.test(exp)) {\n    return single ? exp : '(' + exp + ')';\n  } else {\n    var dir = parseDirective(exp);\n    if (!dir.filters) {\n      return '(' + exp + ')';\n    } else {\n      return 'this._applyFilters(' + dir.expression + // value\n      ',null,' + // oldValue (null for read)\n      JSON.stringify(dir.filters) + // filter descriptors\n      ',false)'; // write?\n    }\n  }\n}\n\nvar text = Object.freeze({\n  compileRegex: compileRegex,\n  parseText: parseText,\n  tokensToExp: tokensToExp\n});\n\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n\n  /**\n   * Whether to print debug messages.\n   * Also enables stack trace for warnings.\n   *\n   * @type {Boolean}\n   */\n\n  debug: false,\n\n  /**\n   * Whether to suppress warnings.\n   *\n   * @type {Boolean}\n   */\n\n  silent: false,\n\n  /**\n   * Whether to use async rendering.\n   */\n\n  async: true,\n\n  /**\n   * Whether to warn against errors caught when evaluating\n   * expressions.\n   */\n\n  warnExpressionErrors: true,\n\n  /**\n   * Whether to allow devtools inspection.\n   * Disabled by default in production builds.\n   */\n\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Internal flag to indicate the delimiters have been\n   * changed.\n   *\n   * @type {Boolean}\n   */\n\n  _delimitersChanged: true,\n\n  /**\n   * List of asset types that a component can own.\n   *\n   * @type {Array}\n   */\n\n  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n  /**\n   * prop binding modes\n   */\n\n  _propBindingModes: {\n    ONE_WAY: 0,\n    TWO_WAY: 1,\n    ONE_TIME: 2\n  },\n\n  /**\n   * Max circular updates allowed in a batcher flush cycle.\n   */\n\n  _maxUpdateCount: 100\n\n}, {\n  delimiters: { /**\n                 * Interpolation delimiters. Changing these would trigger\n                 * the text parser to re-compile the regular expressions.\n                 *\n                 * @type {Array<String>}\n                 */\n\n    get: function get() {\n      return delimiters;\n    },\n    set: function set(val) {\n      delimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  },\n  unsafeDelimiters: {\n    get: function get() {\n      return unsafeDelimiters;\n    },\n    set: function set(val) {\n      unsafeDelimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  }\n});\n\nvar warn = undefined;\nvar formatComponentName = undefined;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var hasConsole = typeof console !== 'undefined';\n\n    warn = function (msg, vm) {\n      if (hasConsole && !config.silent) {\n        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\n      }\n    };\n\n    formatComponentName = function (vm) {\n      var name = vm._isVue ? vm.$options.name : vm.name;\n      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\n    };\n  })();\n}\n\n/**\n * Append with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction appendWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    target.appendChild(el);\n  }, vm, cb);\n}\n\n/**\n * InsertBefore with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction beforeWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    before(el, target);\n  }, vm, cb);\n}\n\n/**\n * Remove with transition.\n *\n * @param {Element} el\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction removeWithTransition(el, vm, cb) {\n  applyTransition(el, -1, function () {\n    remove(el);\n  }, vm, cb);\n}\n\n/**\n * Apply transitions with an operation callback.\n *\n * @param {Element} el\n * @param {Number} direction\n *                  1: enter\n *                 -1: leave\n * @param {Function} op - the actual DOM operation\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction applyTransition(el, direction, op, vm, cb) {\n  var transition = el.__v_trans;\n  if (!transition ||\n  // skip if there are no js hooks and CSS transition is\n  // not supported\n  !transition.hooks && !transitionEndEvent ||\n  // skip transitions for initial compile\n  !vm._isCompiled ||\n  // if the vm is being manipulated by a parent directive\n  // during the parent's compilation phase, skip the\n  // animation.\n  vm.$parent && !vm.$parent._isCompiled) {\n    op();\n    if (cb) cb();\n    return;\n  }\n  var action = direction > 0 ? 'enter' : 'leave';\n  transition[action](op, cb);\n}\n\nvar transition = Object.freeze({\n  appendWithTransition: appendWithTransition,\n  beforeWithTransition: beforeWithTransition,\n  removeWithTransition: removeWithTransition,\n  applyTransition: applyTransition\n});\n\n/**\n * Query an element selector if it's not an element already.\n *\n * @param {String|Element} el\n * @return {Element}\n */\n\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\n    }\n  }\n  return el;\n}\n\n/**\n * Check if a node is in the document.\n * Note: document.documentElement.contains should work here\n * but always returns false for comment nodes in phantomjs,\n * making unit tests difficult. This is fixed by doing the\n * contains() check on the node's parentNode instead of\n * the node itself.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction inDoc(node) {\n  if (!node) return false;\n  var doc = node.ownerDocument.documentElement;\n  var parent = node.parentNode;\n  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n}\n\n/**\n * Get and remove an attribute from a node.\n *\n * @param {Node} node\n * @param {String} _attr\n */\n\nfunction getAttr(node, _attr) {\n  var val = node.getAttribute(_attr);\n  if (val !== null) {\n    node.removeAttribute(_attr);\n  }\n  return val;\n}\n\n/**\n * Get an attribute with colon or v-bind: prefix.\n *\n * @param {Node} node\n * @param {String} name\n * @return {String|null}\n */\n\nfunction getBindAttr(node, name) {\n  var val = getAttr(node, ':' + name);\n  if (val === null) {\n    val = getAttr(node, 'v-bind:' + name);\n  }\n  return val;\n}\n\n/**\n * Check the presence of a bind attribute.\n *\n * @param {Node} node\n * @param {String} name\n * @return {Boolean}\n */\n\nfunction hasBindAttr(node, name) {\n  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\n}\n\n/**\n * Insert el before target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction before(el, target) {\n  target.parentNode.insertBefore(el, target);\n}\n\n/**\n * Insert el after target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction after(el, target) {\n  if (target.nextSibling) {\n    before(el, target.nextSibling);\n  } else {\n    target.parentNode.appendChild(el);\n  }\n}\n\n/**\n * Remove el from DOM\n *\n * @param {Element} el\n */\n\nfunction remove(el) {\n  el.parentNode.removeChild(el);\n}\n\n/**\n * Prepend el to target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction prepend(el, target) {\n  if (target.firstChild) {\n    before(el, target.firstChild);\n  } else {\n    target.appendChild(el);\n  }\n}\n\n/**\n * Replace target with el\n *\n * @param {Element} target\n * @param {Element} el\n */\n\nfunction replace(target, el) {\n  var parent = target.parentNode;\n  if (parent) {\n    parent.replaceChild(el, target);\n  }\n}\n\n/**\n * Add event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n * @param {Boolean} [useCapture]\n */\n\nfunction on(el, event, cb, useCapture) {\n  el.addEventListener(event, cb, useCapture);\n}\n\n/**\n * Remove event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nfunction off(el, event, cb) {\n  el.removeEventListener(event, cb);\n}\n\n/**\n * For IE9 compat: when both class and :class are present\n * getAttribute('class') returns wrong value...\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getClass(el) {\n  var classname = el.className;\n  if (typeof classname === 'object') {\n    classname = classname.baseVal || '';\n  }\n  return classname;\n}\n\n/**\n * In IE9, setAttribute('class') will result in empty class\n * if the element also has the :class attribute; However in\n * PhantomJS, setting `className` does not work on SVG elements...\n * So we have to do a conditional check here.\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction setClass(el, cls) {\n  /* istanbul ignore if */\n  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\n    el.className = cls;\n  } else {\n    el.setAttribute('class', cls);\n  }\n}\n\n/**\n * Add class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction addClass(el, cls) {\n  if (el.classList) {\n    el.classList.add(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      setClass(el, (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction removeClass(el, cls) {\n  if (el.classList) {\n    el.classList.remove(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    setClass(el, cur.trim());\n  }\n  if (!el.className) {\n    el.removeAttribute('class');\n  }\n}\n\n/**\n * Extract raw content inside an element into a temporary\n * container div\n *\n * @param {Element} el\n * @param {Boolean} asFragment\n * @return {Element|DocumentFragment}\n */\n\nfunction extractContent(el, asFragment) {\n  var child;\n  var rawContent;\n  /* istanbul ignore if */\n  if (isTemplate(el) && isFragment(el.content)) {\n    el = el.content;\n  }\n  if (el.hasChildNodes()) {\n    trimNode(el);\n    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n    /* eslint-disable no-cond-assign */\n    while (child = el.firstChild) {\n      /* eslint-enable no-cond-assign */\n      rawContent.appendChild(child);\n    }\n  }\n  return rawContent;\n}\n\n/**\n * Trim possible empty head/tail text and comment\n * nodes inside a parent.\n *\n * @param {Node} node\n */\n\nfunction trimNode(node) {\n  var child;\n  /* eslint-disable no-sequences */\n  while ((child = node.firstChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  while ((child = node.lastChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  /* eslint-enable no-sequences */\n}\n\nfunction isTrimmable(node) {\n  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\n}\n\n/**\n * Check if an element is a template tag.\n * Note if the template appears inside an SVG its tagName\n * will be in lowercase.\n *\n * @param {Element} el\n */\n\nfunction isTemplate(el) {\n  return el.tagName && el.tagName.toLowerCase() === 'template';\n}\n\n/**\n * Create an \"anchor\" for performing dom insertion/removals.\n * This is used in a number of scenarios:\n * - fragment instance\n * - v-html\n * - v-if\n * - v-for\n * - component\n *\n * @param {String} content\n * @param {Boolean} persist - IE trashes empty textNodes on\n *                            cloneNode(true), so in certain\n *                            cases the anchor needs to be\n *                            non-empty to be persisted in\n *                            templates.\n * @return {Comment|Text}\n */\n\nfunction createAnchor(content, persist) {\n  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n  anchor.__v_anchor = true;\n  return anchor;\n}\n\n/**\n * Find a component ref attribute that starts with $.\n *\n * @param {Element} node\n * @return {String|undefined}\n */\n\nvar refRE = /^v-ref:/;\n\nfunction findRef(node) {\n  if (node.hasAttributes()) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var name = attrs[i].name;\n      if (refRE.test(name)) {\n        return camelize(name.replace(refRE, ''));\n      }\n    }\n  }\n}\n\n/**\n * Map a function to a range of nodes .\n *\n * @param {Node} node\n * @param {Node} end\n * @param {Function} op\n */\n\nfunction mapNodeRange(node, end, op) {\n  var next;\n  while (node !== end) {\n    next = node.nextSibling;\n    op(node);\n    node = next;\n  }\n  op(end);\n}\n\n/**\n * Remove a range of nodes with transition, store\n * the nodes in a fragment with correct ordering,\n * and call callback when done.\n *\n * @param {Node} start\n * @param {Node} end\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Function} cb\n */\n\nfunction removeNodeRange(start, end, vm, frag, cb) {\n  var done = false;\n  var removed = 0;\n  var nodes = [];\n  mapNodeRange(start, end, function (node) {\n    if (node === end) done = true;\n    nodes.push(node);\n    removeWithTransition(node, vm, onRemoved);\n  });\n  function onRemoved() {\n    removed++;\n    if (done && removed >= nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        frag.appendChild(nodes[i]);\n      }\n      cb && cb();\n    }\n  }\n}\n\n/**\n * Check if a node is a DocumentFragment.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isFragment(node) {\n  return node && node.nodeType === 11;\n}\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\nvar reservedTagRE = /^(slot|partial|component)$/i;\n\nvar isUnknownElement = undefined;\nif (process.env.NODE_ENV !== 'production') {\n  isUnknownElement = function (el, tag) {\n    if (tag.indexOf('-') > -1) {\n      // http://stackoverflow.com/a/28210364/1070244\n      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n    } else {\n      return (/HTMLUnknownElement/.test(el.toString()) &&\n        // Chrome returns unknown for several HTML5 elements.\n        // https://code.google.com/p/chromium/issues/detail?id=540526\n        // Firefox returns unknown for some \"Interactive elements.\"\n        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\n      );\n    }\n  };\n}\n\n/**\n * Check if an element is a component, if yes return its\n * component id.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction checkComponentAttr(el, options) {\n  var tag = el.tagName.toLowerCase();\n  var hasAttrs = el.hasAttributes();\n  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\n    if (resolveAsset(options, 'components', tag)) {\n      return { id: tag };\n    } else {\n      var is = hasAttrs && getIsBinding(el, options);\n      if (is) {\n        return is;\n      } else if (process.env.NODE_ENV !== 'production') {\n        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\n        if (expectedTag) {\n          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\n        } else if (isUnknownElement(el, tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\n        }\n      }\n    }\n  } else if (hasAttrs) {\n    return getIsBinding(el, options);\n  }\n}\n\n/**\n * Get \"is\" binding from an element.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction getIsBinding(el, options) {\n  // dynamic syntax\n  var exp = el.getAttribute('is');\n  if (exp != null) {\n    if (resolveAsset(options, 'components', exp)) {\n      el.removeAttribute('is');\n      return { id: exp };\n    }\n  } else {\n    exp = getBindAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp, dynamic: true };\n    }\n  }\n}\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n *\n * All strategy functions follow the same signature:\n *\n * @param {*} parentVal\n * @param {*} childVal\n * @param {Vue} [vm]\n */\n\nvar strats = config.optionMergeStrategies = Object.create(null);\n\n/**\n * Helper that recursively merges two data objects together.\n */\n\nfunction mergeData(to, from) {\n  var key, toVal, fromVal;\n  for (key in from) {\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isObject(toVal) && isObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\n\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * El\n */\n\nstrats.el = function (parentVal, childVal, vm) {\n  if (!vm && childVal && typeof childVal !== 'function') {\n    process.env.NODE_ENV !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n    return;\n  }\n  var ret = childVal || parentVal;\n  // invoke the element factory if this is instance merge\n  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\n\nstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n};\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\n\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Events & Watchers.\n *\n * Events & watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\n\nstrats.watch = strats.events = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\n\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\n\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Make sure component options get converted to actual\n * constructors.\n *\n * @param {Object} options\n */\n\nfunction guardComponents(options) {\n  if (options.components) {\n    var components = options.components = guardArrayAssets(options.components);\n    var ids = Object.keys(components);\n    var def;\n    if (process.env.NODE_ENV !== 'production') {\n      var map = options._componentNameMap = {};\n    }\n    for (var i = 0, l = ids.length; i < l; i++) {\n      var key = ids[i];\n      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\n        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n        continue;\n      }\n      // record a all lowercase <-> kebab-case mapping for\n      // possible custom element case error warning\n      if (process.env.NODE_ENV !== 'production') {\n        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\n      }\n      def = components[key];\n      if (isPlainObject(def)) {\n        components[key] = Vue.extend(def);\n      }\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n *\n * @param {Object} options\n */\n\nfunction guardProps(options) {\n  var props = options.props;\n  var i, val;\n  if (isArray(props)) {\n    options.props = {};\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        options.props[val] = null;\n      } else if (val.name) {\n        options.props[val.name] = val;\n      }\n    }\n  } else if (isPlainObject(props)) {\n    var keys = Object.keys(props);\n    i = keys.length;\n    while (i--) {\n      val = props[keys[i]];\n      if (typeof val === 'function') {\n        props[keys[i]] = { type: val };\n      }\n    }\n  }\n}\n\n/**\n * Guard an Array-format assets option and converted it\n * into the key-value Object format.\n *\n * @param {Object|Array} assets\n * @return {Object}\n */\n\nfunction guardArrayAssets(assets) {\n  if (isArray(assets)) {\n    var res = {};\n    var i = assets.length;\n    var asset;\n    while (i--) {\n      asset = assets[i];\n      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n      if (!id) {\n        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n      } else {\n        res[id] = asset;\n      }\n    }\n    return res;\n  }\n  return assets;\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n *\n * @param {Object} parent\n * @param {Object} child\n * @param {Vue} [vm] - if vm is present, indicates this is\n *                     an instantiation merge.\n */\n\nfunction mergeOptions(parent, child, vm) {\n  guardComponents(child);\n  guardProps(child);\n  if (process.env.NODE_ENV !== 'production') {\n    if (child.propsData && !vm) {\n      warn('propsData can only be used as an instantiation option.');\n    }\n  }\n  var options = {};\n  var key;\n  if (child['extends']) {\n    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\n      parent = mergeOptions(parent, mixinOptions, vm);\n    }\n  }\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n *\n * @param {Object} options\n * @param {String} type\n * @param {String} id\n * @param {Boolean} warnMissing\n * @return {Object|Function}\n */\n\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  var camelizedId;\n  var res = assets[id] ||\n  // camelCase ID\n  assets[camelizedId = camelize(id)] ||\n  // Pascal Case ID\n  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n *\n * @constructor\n */\nfunction Dep() {\n  this.id = uid$1++;\n  this.subs = [];\n}\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\n\n/**\n * Add a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub);\n};\n\n/**\n * Remove a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub);\n};\n\n/**\n * Add self as a dependency to the target watcher.\n */\n\nDep.prototype.depend = function () {\n  Dep.target.addDep(this);\n};\n\n/**\n * Notify all subscribers of a new value.\n */\n\nDep.prototype.notify = function () {\n  // stablize the subscriber list first\n  var subs = toArray(this.subs);\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto)\n\n/**\n * Intercept mutating methods and emit events\n */\n\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) ob.observeArray(inserted);\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\ndef(arrayProto, '$set', function $set(index, val) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1;\n  }\n  return this.splice(index, 1, val)[0];\n});\n\n/**\n * Convenience method to remove the element at given index or target element reference.\n *\n * @param {*} item\n */\n\ndef(arrayProto, '$remove', function $remove(item) {\n  /* istanbul ignore if */\n  if (!this.length) return;\n  var index = indexOf(this, item);\n  if (index > -1) {\n    return this.splice(index, 1);\n  }\n});\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However in certain cases, e.g.\n * v-for scope alias and props, we don't want to force conversion\n * because the value may be a nested value under a frozen data structure.\n *\n * So whenever we want to set a reactive property without forcing\n * conversion on the new value, we wrap that call inside this function.\n */\n\nvar shouldConvert = true;\n\nfunction withoutConversion(fn) {\n  shouldConvert = false;\n  fn();\n  shouldConvert = true;\n}\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @param {Array|Object} value\n * @constructor\n */\n\nfunction Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  def(value, '__ob__', this);\n  if (isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n}\n\n// Instance methods\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n *\n * @param {Object} obj\n */\n\nObserver.prototype.walk = function (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    this.convert(keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n *\n * @param {Array} items\n */\n\nObserver.prototype.observeArray = function (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n/**\n * Convert a property into getter/setter so we can emit\n * the events when the property is accessed/changed.\n *\n * @param {String} key\n * @param {*} val\n */\n\nObserver.prototype.convert = function (key, val) {\n  defineReactive(this.value, key, val);\n};\n\n/**\n * Add an owner vm, so that when $set/$delete mutations\n * happen we can notify owner vms to proxy the keys and\n * digest the watchers. This is only called when the object\n * is observed as an instance's root $data.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.addVm = function (vm) {\n  (this.vms || (this.vms = [])).push(vm);\n};\n\n/**\n * Remove an owner vm. This is called when the object is\n * swapped out as an instance's $data object.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.removeVm = function (vm) {\n  this.vms.$remove(vm);\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n *\n * @param {Object|Array} target\n * @param {Object} src\n */\n\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @param {Vue} [vm]\n * @return {Observer|undefined}\n * @static\n */\n\nfunction observe(value, vm) {\n  if (!value || typeof value !== 'object') {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (ob && vm) {\n    ob.addVm(vm);\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n */\n\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (isArray(value)) {\n          for (var e, i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n          }\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      if (newVal === value) {\n        return;\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive,\n\tset: set,\n\tdel: del,\n\thasOwn: hasOwn,\n\tisLiteral: isLiteral,\n\tisReserved: isReserved,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\ttoBoolean: toBoolean,\n\tstripQuotes: stripQuotes,\n\tcamelize: camelize,\n\thyphenate: hyphenate,\n\tclassify: classify,\n\tbind: bind,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\tdef: def,\n\tdebounce: _debounce,\n\tindexOf: indexOf,\n\tcancellable: cancellable,\n\tlooseEqual: looseEqual,\n\tisArray: isArray,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tdevtools: devtools,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisAndroid: isAndroid,\n\tisIOS: isIOS,\n\tget transitionProp () { return transitionProp; },\n\tget transitionEndEvent () { return transitionEndEvent; },\n\tget animationProp () { return animationProp; },\n\tget animationEndEvent () { return animationEndEvent; },\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tquery: query,\n\tinDoc: inDoc,\n\tgetAttr: getAttr,\n\tgetBindAttr: getBindAttr,\n\thasBindAttr: hasBindAttr,\n\tbefore: before,\n\tafter: after,\n\tremove: remove,\n\tprepend: prepend,\n\treplace: replace,\n\ton: on,\n\toff: off,\n\tsetClass: setClass,\n\taddClass: addClass,\n\tremoveClass: removeClass,\n\textractContent: extractContent,\n\ttrimNode: trimNode,\n\tisTemplate: isTemplate,\n\tcreateAnchor: createAnchor,\n\tfindRef: findRef,\n\tmapNodeRange: mapNodeRange,\n\tremoveNodeRange: removeNodeRange,\n\tisFragment: isFragment,\n\tgetOuterHTML: getOuterHTML,\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tcheckComponentAttr: checkComponentAttr,\n\tcommonTagRE: commonTagRE,\n\treservedTagRE: reservedTagRE,\n\tget warn () { return warn; }\n});\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  /**\n   * The main init sequence. This is called for every\n   * instance, including ones that are created from extended\n   * constructors.\n   *\n   * @param {Object} options - this options object should be\n   *                           the result of merging class\n   *                           options and the options passed\n   *                           in to the constructor.\n   */\n\n  Vue.prototype._init = function (options) {\n    options = options || {};\n\n    this.$el = null;\n    this.$parent = options.parent;\n    this.$root = this.$parent ? this.$parent.$root : this;\n    this.$children = [];\n    this.$refs = {}; // child vm references\n    this.$els = {}; // element references\n    this._watchers = []; // all watchers as an array\n    this._directives = []; // all directives\n\n    // a uid\n    this._uid = uid++;\n\n    // a flag to avoid this being observed\n    this._isVue = true;\n\n    // events bookkeeping\n    this._events = {}; // registered callbacks\n    this._eventsCount = {}; // for $broadcast optimization\n\n    // fragment instance properties\n    this._isFragment = false;\n    this._fragment = // @type {DocumentFragment}\n    this._fragmentStart = // @type {Text|Comment}\n    this._fragmentEnd = null; // @type {Text|Comment}\n\n    // lifecycle state\n    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\n    this._unlinkFn = null;\n\n    // context:\n    // if this is a transcluded component, context\n    // will be the common parent vm of this instance\n    // and its host.\n    this._context = options._context || this.$parent;\n\n    // scope:\n    // if this is inside an inline v-for, the scope\n    // will be the intermediate scope created for this\n    // repeat fragment. this is used for linking props\n    // and container directives.\n    this._scope = options._scope;\n\n    // fragment:\n    // if this instance is compiled inside a Fragment, it\n    // needs to register itself as a child of that fragment\n    // for attach/detach to work properly.\n    this._frag = options._frag;\n    if (this._frag) {\n      this._frag.children.push(this);\n    }\n\n    // push self into parent / transclusion host\n    if (this.$parent) {\n      this.$parent.$children.push(this);\n    }\n\n    // merge options.\n    options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n    // set ref\n    this._updateRef();\n\n    // initialize data as empty object.\n    // it will be filled up in _initData().\n    this._data = {};\n\n    // call init hook\n    this._callHook('init');\n\n    // initialize data observation and scope inheritance.\n    this._initState();\n\n    // setup event system and option events.\n    this._initEvents();\n\n    // call created hook\n    this._callHook('created');\n\n    // if `el` option is passed, start compilation.\n    if (options.el) {\n      this.$mount(options.el);\n    }\n  };\n}\n\nvar pathCache = new Cache(1000);\n\n// actions\nvar APPEND = 0;\nvar PUSH = 1;\nvar INC_SUB_PATH_DEPTH = 2;\nvar PUSH_SUB_PATH = 3;\n\n// states\nvar BEFORE_PATH = 0;\nvar IN_PATH = 1;\nvar BEFORE_IDENT = 2;\nvar IN_IDENT = 3;\nvar IN_SUB_PATH = 4;\nvar IN_SINGLE_QUOTE = 5;\nvar IN_DOUBLE_QUOTE = 6;\nvar AFTER_PATH = 7;\nvar ERROR = 8;\n\nvar pathStateMachine = [];\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND]\n};\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [IN_SUB_PATH, PUSH],\n  'eof': [AFTER_PATH, PUSH]\n};\n\npathStateMachine[IN_SUB_PATH] = {\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n  ']': [IN_PATH, PUSH_SUB_PATH],\n  'eof': ERROR,\n  'else': [IN_SUB_PATH, APPEND]\n};\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND]\n};\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND]\n};\n\n/**\n * Determine the type of a character in a keypath.\n *\n * @param {Char} ch\n * @return {String} type\n */\n\nfunction getPathCharType(ch) {\n  if (ch === undefined) {\n    return 'eof';\n  }\n\n  var code = ch.charCodeAt(0);\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n    case 0x30:\n      // 0\n      return ch;\n\n    case 0x5F: // _\n    case 0x24:\n      // $\n      return 'ident';\n\n    case 0x20: // Space\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0: // No-break space\n    case 0xFEFF: // Byte Order Mark\n    case 0x2028: // Line Separator\n    case 0x2029:\n      // Paragraph Separator\n      return 'ws';\n  }\n\n  // a-z, A-Z\n  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n    return 'ident';\n  }\n\n  // 1-9\n  if (code >= 0x31 && code <= 0x39) {\n    return 'number';\n  }\n\n  return 'else';\n}\n\n/**\n * Format a subPath, return its plain form if it is\n * a literal string or number. Otherwise prepend the\n * dynamic indicator (*).\n *\n * @param {String} path\n * @return {String}\n */\n\nfunction formatSubPath(path) {\n  var trimmed = path.trim();\n  // invalid leading 0\n  if (path.charAt(0) === '0' && isNaN(path)) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n}\n\n/**\n * Parse a string path into an array of segments\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parse(path) {\n  var keys = [];\n  var index = -1;\n  var mode = BEFORE_PATH;\n  var subPathDepth = 0;\n  var c, newChar, key, type, transition, action, typeMap;\n\n  var actions = [];\n\n  actions[PUSH] = function () {\n    if (key !== undefined) {\n      keys.push(key);\n      key = undefined;\n    }\n  };\n\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n\n  actions[INC_SUB_PATH_DEPTH] = function () {\n    actions[APPEND]();\n    subPathDepth++;\n  };\n\n  actions[PUSH_SUB_PATH] = function () {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = IN_SUB_PATH;\n      actions[APPEND]();\n    } else {\n      subPathDepth = 0;\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[PUSH]();\n      }\n    }\n  };\n\n  function maybeUnescapeQuote() {\n    var nextChar = path[index + 1];\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n      index++;\n      newChar = '\\\\' + nextChar;\n      actions[APPEND]();\n      return true;\n    }\n  }\n\n  while (mode != null) {\n    index++;\n    c = path[index];\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue;\n    }\n\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap['else'] || ERROR;\n\n    if (transition === ERROR) {\n      return; // parse error\n    }\n\n    mode = transition[0];\n    action = actions[transition[1]];\n    if (action) {\n      newChar = transition[2];\n      newChar = newChar === undefined ? c : newChar;\n      if (action() === false) {\n        return;\n      }\n    }\n\n    if (mode === AFTER_PATH) {\n      keys.raw = path;\n      return keys;\n    }\n  }\n}\n\n/**\n * External parse that check for a cache hit first\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parsePath(path) {\n  var hit = pathCache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      pathCache.put(path, hit);\n    }\n  }\n  return hit;\n}\n\n/**\n * Get from an object from a path string\n *\n * @param {Object} obj\n * @param {String} path\n */\n\nfunction getPath(obj, path) {\n  return parseExpression$1(path).get(obj);\n}\n\n/**\n * Warn against setting non-existent root path on a vm.\n */\n\nvar warnNonExistent;\nif (process.env.NODE_ENV !== 'production') {\n  warnNonExistent = function (path, vm) {\n    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\n  };\n}\n\n/**\n * Set on an object from a path\n *\n * @param {Object} obj\n * @param {String | Array} path\n * @param {*} val\n */\n\nfunction setPath(obj, path, val) {\n  var original = obj;\n  if (typeof path === 'string') {\n    path = parse(path);\n  }\n  if (!path || !isObject(obj)) {\n    return false;\n  }\n  var last, key;\n  for (var i = 0, l = path.length; i < l; i++) {\n    last = obj;\n    key = path[i];\n    if (key.charAt(0) === '*') {\n      key = parseExpression$1(key.slice(1)).get.call(original, original);\n    }\n    if (i < l - 1) {\n      obj = obj[key];\n      if (!isObject(obj)) {\n        obj = {};\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\n          warnNonExistent(path, last);\n        }\n        set(last, key, obj);\n      }\n    } else {\n      if (isArray(obj)) {\n        obj.$set(key, val);\n      } else if (key in obj) {\n        obj[key] = val;\n      } else {\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\n          warnNonExistent(path, obj);\n        }\n        set(obj, key, val);\n      }\n    }\n  }\n  return true;\n}\n\nvar path = Object.freeze({\n  parsePath: parsePath,\n  getPath: getPath,\n  setPath: setPath\n});\n\nvar expressionCache = new Cache(1000);\n\nvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\nvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n// keywords that don't make sense inside expressions\nvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\nvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\nvar wsRE = /\\s/g;\nvar newlineRE = /\\n/g;\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\\"']|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\nvar restoreRE = /\"(\\d+)\"/g;\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\nvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\nvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\n\nfunction noop() {}\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nvar saved = [];\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save(str, isString) {\n  var i = saved.length;\n  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n  return '\"' + i + '\"';\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite(raw) {\n  var c = raw.charAt(0);\n  var path = raw.slice(1);\n  if (allowedKeywordsRE.test(path)) {\n    return raw;\n  } else {\n    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n    return c + 'scope.' + path;\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore(str, i) {\n  return saved[i];\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compileGetter(exp) {\n  if (improperKeywordsRE.test(exp)) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n  }\n  // reset state\n  saved.length = 0;\n  // save strings and object literal keys\n  var body = exp.replace(saveRE, save).replace(wsRE, '');\n  // rewrite all paths\n  // pad 1 space here because the regex matches 1 extra char\n  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\n  return makeGetterFn(body);\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn(body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', 'return ' + body + ';');\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\n      } else {\n        warn('Invalid expression. ' + 'Generated function body: ' + body);\n      }\n    }\n    return noop;\n  }\n}\n\n/**\n * Compile a setter function for the expression.\n *\n * @param {String} exp\n * @return {Function|undefined}\n */\n\nfunction compileSetter(exp) {\n  var path = parsePath(exp);\n  if (path) {\n    return function (scope, val) {\n      setPath(scope, path, val);\n    };\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);\n  }\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nfunction parseExpression$1(exp, needSet) {\n  exp = exp.trim();\n  // try cache\n  var hit = expressionCache.get(exp);\n  if (hit) {\n    if (needSet && !hit.set) {\n      hit.set = compileSetter(hit.exp);\n    }\n    return hit;\n  }\n  var res = { exp: exp };\n  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n  // optimized super simple getter\n  ? makeGetterFn('scope.' + exp)\n  // dynamic getter\n  : compileGetter(exp);\n  if (needSet) {\n    res.set = compileSetter(exp);\n  }\n  expressionCache.put(exp, res);\n  return res;\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nfunction isSimplePath(exp) {\n  return pathTestRE.test(exp) &&\n  // don't treat literal values as paths\n  !literalValueRE$1.test(exp) &&\n  // Math constants e.g. Math.PI, Math.E etc.\n  exp.slice(0, 5) !== 'Math.';\n}\n\nvar expression = Object.freeze({\n  parseExpression: parseExpression$1,\n  isSimplePath: isSimplePath\n});\n\n// we have two separate queues: one for directive updates\n// and one for user watcher registered via $watch().\n// we want to guarantee directive updates to be called\n// before user watchers so that when user watchers are\n// triggered, the DOM would have already been in updated\n// state.\n\nvar queue = [];\nvar userQueue = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState() {\n  queue.length = 0;\n  userQueue.length = 0;\n  has = {};\n  circular = {};\n  waiting = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\n\nfunction flushBatcherQueue() {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n\n    runBatcherQueue(queue);\n    runBatcherQueue(userQueue);\n    // user watchers triggered more watchers,\n    // keep flushing until it depletes\n    if (queue.length) {\n      _again = true;\n      continue _function;\n    }\n    // dev tool hook\n    /* istanbul ignore if */\n    if (devtools && config.devtools) {\n      devtools.emit('flush');\n    }\n    resetBatcherState();\n  }\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue(queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (var i = 0; i < queue.length; i++) {\n    var watcher = queue[i];\n    var id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\n        break;\n      }\n    }\n  }\n  queue.length = 0;\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nfunction pushWatcher(watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    // push watcher into appropriate queue\n    var q = watcher.user ? userQueue : queue;\n    has[id] = q.length;\n    q.push(watcher);\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushBatcherQueue);\n    }\n  }\n}\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n *\n * @param {Vue} vm\n * @param {String|Function} expOrFn\n * @param {Function} cb\n * @param {Object} options\n *                 - {Array} filters\n *                 - {Boolean} twoWay\n *                 - {Boolean} deep\n *                 - {Boolean} user\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n *                 - {Function} [preProcess]\n *                 - {Function} [postProcess]\n * @constructor\n */\nfunction Watcher(vm, expOrFn, cb, options) {\n  // mix in options\n  if (options) {\n    extend(this, options);\n  }\n  var isFn = typeof expOrFn === 'function';\n  this.vm = vm;\n  vm._watchers.push(this);\n  this.expression = expOrFn;\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.prevError = null; // for async error stacks\n  // parse expression for getter/setter\n  if (isFn) {\n    this.getter = expOrFn;\n    this.setter = undefined;\n  } else {\n    var res = parseExpression$1(expOrFn, this.twoWay);\n    this.getter = res.get;\n    this.setter = res.set;\n  }\n  this.value = this.lazy ? undefined : this.get();\n  // state for avoiding false triggers for deep and Array\n  // watchers during vm._digest()\n  this.queued = this.shallow = false;\n}\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\n\nWatcher.prototype.get = function () {\n  this.beforeGet();\n  var scope = this.scope || this.vm;\n  var value;\n  try {\n    value = this.getter.call(scope, scope);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  if (this.preProcess) {\n    value = this.preProcess(value);\n  }\n  if (this.filters) {\n    value = scope._applyFilters(value, null, this.filters, false);\n  }\n  if (this.postProcess) {\n    value = this.postProcess(value);\n  }\n  this.afterGet();\n  return value;\n};\n\n/**\n * Set the corresponding value with the setter.\n *\n * @param {*} value\n */\n\nWatcher.prototype.set = function (value) {\n  var scope = this.scope || this.vm;\n  if (this.filters) {\n    value = scope._applyFilters(value, this.value, this.filters, true);\n  }\n  try {\n    this.setter.call(scope, scope, value);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // two-way sync for v-for alias\n  var forContext = scope.$forContext;\n  if (forContext && forContext.alias === this.expression) {\n    if (forContext.filters) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\n      return;\n    }\n    forContext._withLock(function () {\n      if (scope.$key) {\n        // original is an object\n        forContext.rawValue[scope.$key] = value;\n      } else {\n        forContext.rawValue.$set(scope.$index, value);\n      }\n    });\n  }\n};\n\n/**\n * Prepare for dependency collection.\n */\n\nWatcher.prototype.beforeGet = function () {\n  Dep.target = this;\n};\n\n/**\n * Add a dependency to this directive.\n *\n * @param {Dep} dep\n */\n\nWatcher.prototype.addDep = function (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\n\nWatcher.prototype.afterGet = function () {\n  Dep.target = null;\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n *\n * @param {Boolean} shallow\n */\n\nWatcher.prototype.update = function (shallow) {\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync || !config.async) {\n    this.run();\n  } else {\n    // if queued, only overwrite shallow with non-shallow,\n    // but not the other way around.\n    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n    this.queued = true;\n    // record before-push error stack in debug mode\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\n      this.prevError = new Error('[vue] async stack trace');\n    }\n    pushWatcher(this);\n  }\n};\n\n/**\n * Batcher job interface.\n * Will be called by the batcher.\n */\n\nWatcher.prototype.run = function () {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated; but only do so if this is a\n    // non-shallow update (caused by a vm digest).\n    (isObject(value) || this.deep) && !this.shallow) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      // in debug + async mode, when a watcher callbacks\n      // throws, we also throw the saved before-push error\n      // so the full cross-tick stack trace is available.\n      var prevError = this.prevError;\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {\n        this.prevError = null;\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          nextTick(function () {\n            throw prevError;\n          }, 0);\n          throw e;\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n    this.queued = this.shallow = false;\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\n\nWatcher.prototype.evaluate = function () {\n  // avoid overwriting another watcher that is being\n  // collected.\n  var current = Dep.target;\n  this.value = this.get();\n  this.dirty = false;\n  Dep.target = current;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\n\nWatcher.prototype.depend = function () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subcriber list.\n */\n\nWatcher.prototype.teardown = function () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed or is performing a v-for\n    // re-render (the watcher list is then filtered by v-for).\n    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\n      this.vm._watchers.$remove(this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n    this.vm = this.cb = this.value = null;\n  }\n};\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} val\n */\n\nvar seenObjects = new _Set();\nfunction traverse(val, seen) {\n  var i = undefined,\n      keys = undefined;\n  if (!seen) {\n    seen = seenObjects;\n    seen.clear();\n  }\n  var isA = isArray(val);\n  var isO = isObject(val);\n  if ((isA || isO) && Object.isExtensible(val)) {\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return;\n      } else {\n        seen.add(depId);\n      }\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) traverse(val[i], seen);\n    } else if (isO) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]], seen);\n    }\n  }\n}\n\nvar text$1 = {\n\n  bind: function bind() {\n    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n  },\n\n  update: function update(value) {\n    this.el[this.attr] = _toString(value);\n  }\n};\n\nvar templateCache = new Cache(1000);\nvar idSelectorCache = new Cache(1000);\n\nvar map = {\n  efault: [0, '', ''],\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n};\n\nmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\nmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n/**\n * Check if a node is a supported template node with a\n * DocumentFragment content.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isRealTemplate(node) {\n  return isTemplate(node) && isFragment(node.content);\n}\n\nvar tagRE$1 = /<([\\w:-]+)/;\nvar entityRE = /&#?\\w+?;/;\nvar commentRE = /<!--/;\n\n/**\n * Convert a string template to a DocumentFragment.\n * Determines correct wrapping by tag types. Wrapping\n * strategy found in jQuery & component/domify.\n *\n * @param {String} templateString\n * @param {Boolean} raw\n * @return {DocumentFragment}\n */\n\nfunction stringToFragment(templateString, raw) {\n  // try a cache hit first\n  var cacheKey = raw ? templateString : templateString.trim();\n  var hit = templateCache.get(cacheKey);\n  if (hit) {\n    return hit;\n  }\n\n  var frag = document.createDocumentFragment();\n  var tagMatch = templateString.match(tagRE$1);\n  var entityMatch = entityRE.test(templateString);\n  var commentMatch = commentRE.test(templateString);\n\n  if (!tagMatch && !entityMatch && !commentMatch) {\n    // text only, return a single text node.\n    frag.appendChild(document.createTextNode(templateString));\n  } else {\n    var tag = tagMatch && tagMatch[1];\n    var wrap = map[tag] || map.efault;\n    var depth = wrap[0];\n    var prefix = wrap[1];\n    var suffix = wrap[2];\n    var node = document.createElement('div');\n\n    node.innerHTML = prefix + templateString + suffix;\n    while (depth--) {\n      node = node.lastChild;\n    }\n\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = node.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n  }\n  if (!raw) {\n    trimNode(frag);\n  }\n  templateCache.put(cacheKey, frag);\n  return frag;\n}\n\n/**\n * Convert a template node to a DocumentFragment.\n *\n * @param {Node} node\n * @return {DocumentFragment}\n */\n\nfunction nodeToFragment(node) {\n  // if its a template tag and the browser supports it,\n  // its content is already a document fragment. However, iOS Safari has\n  // bug when using directly cloned template content with touch\n  // events and can cause crashes when the nodes are removed from DOM, so we\n  // have to treat template elements as string templates. (#2805)\n  /* istanbul ignore if */\n  if (isRealTemplate(node)) {\n    return stringToFragment(node.innerHTML);\n  }\n  // script template\n  if (node.tagName === 'SCRIPT') {\n    return stringToFragment(node.textContent);\n  }\n  // normal node, clone it to avoid mutating the original\n  var clonedNode = cloneNode(node);\n  var frag = document.createDocumentFragment();\n  var child;\n  /* eslint-disable no-cond-assign */\n  while (child = clonedNode.firstChild) {\n    /* eslint-enable no-cond-assign */\n    frag.appendChild(child);\n  }\n  trimNode(frag);\n  return frag;\n}\n\n// Test for the presence of the Safari template cloning bug\n// https://bugs.webkit.org/showug.cgi?id=137755\nvar hasBrokenTemplate = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var a = document.createElement('div');\n    a.innerHTML = '<template>1</template>';\n    return !a.cloneNode(true).firstChild.innerHTML;\n  } else {\n    return false;\n  }\n})();\n\n// Test for IE10/11 textarea placeholder clone bug\nvar hasTextareaCloneBug = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var t = document.createElement('textarea');\n    t.placeholder = 't';\n    return t.cloneNode(true).value === 't';\n  } else {\n    return false;\n  }\n})();\n\n/**\n * 1. Deal with Safari cloning nested <template> bug by\n *    manually cloning all template instances.\n * 2. Deal with IE10/11 textarea placeholder bug by setting\n *    the correct value after cloning.\n *\n * @param {Element|DocumentFragment} node\n * @return {Element|DocumentFragment}\n */\n\nfunction cloneNode(node) {\n  /* istanbul ignore if */\n  if (!node.querySelectorAll) {\n    return node.cloneNode();\n  }\n  var res = node.cloneNode(true);\n  var i, original, cloned;\n  /* istanbul ignore if */\n  if (hasBrokenTemplate) {\n    var tempClone = res;\n    if (isRealTemplate(node)) {\n      node = node.content;\n      tempClone = res.content;\n    }\n    original = node.querySelectorAll('template');\n    if (original.length) {\n      cloned = tempClone.querySelectorAll('template');\n      i = cloned.length;\n      while (i--) {\n        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n      }\n    }\n  }\n  /* istanbul ignore if */\n  if (hasTextareaCloneBug) {\n    if (node.tagName === 'TEXTAREA') {\n      res.value = node.value;\n    } else {\n      original = node.querySelectorAll('textarea');\n      if (original.length) {\n        cloned = res.querySelectorAll('textarea');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].value = original[i].value;\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Process the template option and normalizes it into a\n * a DocumentFragment that can be used as a partial or a\n * instance template.\n *\n * @param {*} template\n *        Possible values include:\n *        - DocumentFragment object\n *        - Node object of type Template\n *        - id selector: '#some-template-id'\n *        - template string: '<div><span>{{msg}}</span></div>'\n * @param {Boolean} shouldClone\n * @param {Boolean} raw\n *        inline HTML interpolation. Do not check for id\n *        selector and keep whitespace in the string.\n * @return {DocumentFragment|undefined}\n */\n\nfunction parseTemplate(template, shouldClone, raw) {\n  var node, frag;\n\n  // if the template is already a document fragment,\n  // do nothing\n  if (isFragment(template)) {\n    trimNode(template);\n    return shouldClone ? cloneNode(template) : template;\n  }\n\n  if (typeof template === 'string') {\n    // id selector\n    if (!raw && template.charAt(0) === '#') {\n      // id selector can be cached too\n      frag = idSelectorCache.get(template);\n      if (!frag) {\n        node = document.getElementById(template.slice(1));\n        if (node) {\n          frag = nodeToFragment(node);\n          // save selector to cache\n          idSelectorCache.put(template, frag);\n        }\n      }\n    } else {\n      // normal string template\n      frag = stringToFragment(template, raw);\n    }\n  } else if (template.nodeType) {\n    // a direct node\n    frag = nodeToFragment(template);\n  }\n\n  return frag && shouldClone ? cloneNode(frag) : frag;\n}\n\nvar template = Object.freeze({\n  cloneNode: cloneNode,\n  parseTemplate: parseTemplate\n});\n\nvar html = {\n\n  bind: function bind() {\n    // a comment node means this is a binding for\n    // {{{ inline unescaped html }}}\n    if (this.el.nodeType === 8) {\n      // hold nodes\n      this.nodes = [];\n      // replace the placeholder with proper anchor\n      this.anchor = createAnchor('v-html');\n      replace(this.el, this.anchor);\n    }\n  },\n\n  update: function update(value) {\n    value = _toString(value);\n    if (this.nodes) {\n      this.swap(value);\n    } else {\n      this.el.innerHTML = value;\n    }\n  },\n\n  swap: function swap(value) {\n    // remove old nodes\n    var i = this.nodes.length;\n    while (i--) {\n      remove(this.nodes[i]);\n    }\n    // convert new value to a fragment\n    // do not attempt to retrieve from id selector\n    var frag = parseTemplate(value, true, true);\n    // save a reference to these nodes so we can remove later\n    this.nodes = toArray(frag.childNodes);\n    before(frag, this.anchor);\n  }\n};\n\n/**\n * Abstraction for a partially-compiled fragment.\n * Can optionally compile content with a child scope.\n *\n * @param {Function} linker\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Vue} [host]\n * @param {Object} [scope]\n * @param {Fragment} [parentFrag]\n */\nfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\n  this.children = [];\n  this.childFrags = [];\n  this.vm = vm;\n  this.scope = scope;\n  this.inserted = false;\n  this.parentFrag = parentFrag;\n  if (parentFrag) {\n    parentFrag.childFrags.push(this);\n  }\n  this.unlink = linker(vm, frag, host, scope, this);\n  var single = this.single = frag.childNodes.length === 1 &&\n  // do not go single mode if the only node is an anchor\n  !frag.childNodes[0].__v_anchor;\n  if (single) {\n    this.node = frag.childNodes[0];\n    this.before = singleBefore;\n    this.remove = singleRemove;\n  } else {\n    this.node = createAnchor('fragment-start');\n    this.end = createAnchor('fragment-end');\n    this.frag = frag;\n    prepend(this.node, frag);\n    frag.appendChild(this.end);\n    this.before = multiBefore;\n    this.remove = multiRemove;\n  }\n  this.node.__v_frag = this;\n}\n\n/**\n * Call attach/detach for all components contained within\n * this fragment. Also do so recursively for all child\n * fragments.\n *\n * @param {Function} hook\n */\n\nFragment.prototype.callHook = function (hook) {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    this.childFrags[i].callHook(hook);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    hook(this.children[i]);\n  }\n};\n\n/**\n * Insert fragment before target, single node version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction singleBefore(target, withTransition) {\n  this.inserted = true;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  method(this.node, target, this.vm);\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, single node version\n */\n\nfunction singleRemove() {\n  this.inserted = false;\n  var shouldCallRemove = inDoc(this.node);\n  var self = this;\n  this.beforeRemove();\n  removeWithTransition(this.node, this.vm, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Insert fragment before target, multi-nodes version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction multiBefore(target, withTransition) {\n  this.inserted = true;\n  var vm = this.vm;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  mapNodeRange(this.node, this.end, function (node) {\n    method(node, target, vm);\n  });\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, multi-nodes version\n */\n\nfunction multiRemove() {\n  this.inserted = false;\n  var self = this;\n  var shouldCallRemove = inDoc(this.node);\n  this.beforeRemove();\n  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Prepare the fragment for removal.\n */\n\nFragment.prototype.beforeRemove = function () {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    // call the same method recursively on child\n    // fragments, depth-first\n    this.childFrags[i].beforeRemove(false);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    // Call destroy for all contained instances,\n    // with remove:false and defer:true.\n    // Defer is necessary because we need to\n    // keep the children to call detach hooks\n    // on them.\n    this.children[i].$destroy(false, true);\n  }\n  var dirs = this.unlink.dirs;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    // disable the watchers on all the directives\n    // so that the rendered content stays the same\n    // during removal.\n    dirs[i]._watcher && dirs[i]._watcher.teardown();\n  }\n};\n\n/**\n * Destroy the fragment.\n */\n\nFragment.prototype.destroy = function () {\n  if (this.parentFrag) {\n    this.parentFrag.childFrags.$remove(this);\n  }\n  this.node.__v_frag = null;\n  this.unlink();\n};\n\n/**\n * Call attach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction attach(child) {\n  if (!child._isAttached && inDoc(child.$el)) {\n    child._callHook('attached');\n  }\n}\n\n/**\n * Call detach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction detach(child) {\n  if (child._isAttached && !inDoc(child.$el)) {\n    child._callHook('detached');\n  }\n}\n\nvar linkerCache = new Cache(5000);\n\n/**\n * A factory that can be used to create instances of a\n * fragment. Caches the compiled linker if possible.\n *\n * @param {Vue} vm\n * @param {Element|String} el\n */\nfunction FragmentFactory(vm, el) {\n  this.vm = vm;\n  var template;\n  var isString = typeof el === 'string';\n  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\n    template = parseTemplate(el, true);\n  } else {\n    template = document.createDocumentFragment();\n    template.appendChild(el);\n  }\n  this.template = template;\n  // linker can be cached, but only for components\n  var linker;\n  var cid = vm.constructor.cid;\n  if (cid > 0) {\n    var cacheId = cid + (isString ? el : getOuterHTML(el));\n    linker = linkerCache.get(cacheId);\n    if (!linker) {\n      linker = compile(template, vm.$options, true);\n      linkerCache.put(cacheId, linker);\n    }\n  } else {\n    linker = compile(template, vm.$options, true);\n  }\n  this.linker = linker;\n}\n\n/**\n * Create a fragment instance with given host and scope.\n *\n * @param {Vue} host\n * @param {Object} scope\n * @param {Fragment} parentFrag\n */\n\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n  var frag = cloneNode(this.template);\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n};\n\nvar ON = 700;\nvar MODEL = 800;\nvar BIND = 850;\nvar TRANSITION = 1100;\nvar EL = 1500;\nvar COMPONENT = 1500;\nvar PARTIAL = 1750;\nvar IF = 2100;\nvar FOR = 2200;\nvar SLOT = 2300;\n\nvar uid$3 = 0;\n\nvar vFor = {\n\n  priority: FOR,\n  terminal: true,\n\n  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n  bind: function bind() {\n    if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('v-if')) {\n      warn('<' + this.el.tagName.toLowerCase() + ' v-for=\"' + this.expression + '\" v-if=\"' + this.el.getAttribute('v-if') + '\">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);\n    }\n\n    // support \"item in/of items\" syntax\n    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\n    if (inMatch) {\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n      if (itMatch) {\n        this.iterator = itMatch[1].trim();\n        this.alias = itMatch[2].trim();\n      } else {\n        this.alias = inMatch[1].trim();\n      }\n      this.expression = inMatch[2];\n    }\n\n    if (!this.alias) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\n      return;\n    }\n\n    // uid as a cache identifier\n    this.id = '__v-for__' + ++uid$3;\n\n    // check if this is an option list,\n    // so that we know if we need to update the <select>'s\n    // v-model when the option list has changed.\n    // because v-model has a lower priority than v-for,\n    // the v-model is not bound here yet, so we have to\n    // retrive it in the actual updateModel() function.\n    var tag = this.el.tagName;\n    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n    // setup anchor nodes\n    this.start = createAnchor('v-for-start');\n    this.end = createAnchor('v-for-end');\n    replace(this.el, this.end);\n    before(this.start, this.end);\n\n    // cache\n    this.cache = Object.create(null);\n\n    // fragment factory\n    this.factory = new FragmentFactory(this.vm, this.el);\n  },\n\n  update: function update(data) {\n    this.diff(data);\n    this.updateRef();\n    this.updateModel();\n  },\n\n  /**\n   * Diff, based on new data and old data, determine the\n   * minimum amount of DOM manipulations needed to make the\n   * DOM reflect the new data Array.\n   *\n   * The algorithm diffs the new data Array by storing a\n   * hidden reference to an owner vm instance on previously\n   * seen data. This allows us to achieve O(n) which is\n   * better than a levenshtein distance based algorithm,\n   * which is O(m * n).\n   *\n   * @param {Array} data\n   */\n\n  diff: function diff(data) {\n    // check if the Array was converted from an Object\n    var item = data[0];\n    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n    var trackByKey = this.params.trackBy;\n    var oldFrags = this.frags;\n    var frags = this.frags = new Array(data.length);\n    var alias = this.alias;\n    var iterator = this.iterator;\n    var start = this.start;\n    var end = this.end;\n    var inDocument = inDoc(start);\n    var init = !oldFrags;\n    var i, l, frag, key, value, primitive;\n\n    // First pass, go through the new Array and fill up\n    // the new frags array. If a piece of data has a cached\n    // instance for it, we reuse it. Otherwise build a new\n    // instance.\n    for (i = 0, l = data.length; i < l; i++) {\n      item = data[i];\n      key = convertedFromObject ? item.$key : null;\n      value = convertedFromObject ? item.$value : item;\n      primitive = !isObject(value);\n      frag = !init && this.getCachedFrag(value, i, key);\n      if (frag) {\n        // reusable fragment\n        frag.reused = true;\n        // update $index\n        frag.scope.$index = i;\n        // update $key\n        if (key) {\n          frag.scope.$key = key;\n        }\n        // update iterator\n        if (iterator) {\n          frag.scope[iterator] = key !== null ? key : i;\n        }\n        // update data for track-by, object repeat &\n        // primitive values.\n        if (trackByKey || convertedFromObject || primitive) {\n          withoutConversion(function () {\n            frag.scope[alias] = value;\n          });\n        }\n      } else {\n        // new instance\n        frag = this.create(value, alias, i, key);\n        frag.fresh = !init;\n      }\n      frags[i] = frag;\n      if (init) {\n        frag.before(end);\n      }\n    }\n\n    // we're done for the initial render.\n    if (init) {\n      return;\n    }\n\n    // Second pass, go through the old fragments and\n    // destroy those who are not reused (and remove them\n    // from cache)\n    var removalIndex = 0;\n    var totalRemoved = oldFrags.length - frags.length;\n    // when removing a large number of fragments, watcher removal\n    // turns out to be a perf bottleneck, so we batch the watcher\n    // removals into a single filter call!\n    this.vm._vForRemoving = true;\n    for (i = 0, l = oldFrags.length; i < l; i++) {\n      frag = oldFrags[i];\n      if (!frag.reused) {\n        this.deleteCachedFrag(frag);\n        this.remove(frag, removalIndex++, totalRemoved, inDocument);\n      }\n    }\n    this.vm._vForRemoving = false;\n    if (removalIndex) {\n      this.vm._watchers = this.vm._watchers.filter(function (w) {\n        return w.active;\n      });\n    }\n\n    // Final pass, move/insert new fragments into the\n    // right place.\n    var targetPrev, prevEl, currentPrev;\n    var insertionIndex = 0;\n    for (i = 0, l = frags.length; i < l; i++) {\n      frag = frags[i];\n      // this is the frag that we should be after\n      targetPrev = frags[i - 1];\n      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n      if (frag.reused && !frag.staggerCb) {\n        currentPrev = findPrevFrag(frag, start, this.id);\n        if (currentPrev !== targetPrev && (!currentPrev ||\n        // optimization for moving a single item.\n        // thanks to suggestions by @livoras in #1807\n        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n          this.move(frag, prevEl);\n        }\n      } else {\n        // new instance, or still in stagger.\n        // insert with updated stagger index.\n        this.insert(frag, insertionIndex++, prevEl, inDocument);\n      }\n      frag.reused = frag.fresh = false;\n    }\n  },\n\n  /**\n   * Create a new fragment instance.\n   *\n   * @param {*} value\n   * @param {String} alias\n   * @param {Number} index\n   * @param {String} [key]\n   * @return {Fragment}\n   */\n\n  create: function create(value, alias, index, key) {\n    var host = this._host;\n    // create iteration scope\n    var parentScope = this._scope || this.vm;\n    var scope = Object.create(parentScope);\n    // ref holder for the scope\n    scope.$refs = Object.create(parentScope.$refs);\n    scope.$els = Object.create(parentScope.$els);\n    // make sure point $parent to parent scope\n    scope.$parent = parentScope;\n    // for two-way binding on alias\n    scope.$forContext = this;\n    // define scope properties\n    // important: define the scope alias without forced conversion\n    // so that frozen data structures remain non-reactive.\n    withoutConversion(function () {\n      defineReactive(scope, alias, value);\n    });\n    defineReactive(scope, '$index', index);\n    if (key) {\n      defineReactive(scope, '$key', key);\n    } else if (scope.$key) {\n      // avoid accidental fallback\n      def(scope, '$key', null);\n    }\n    if (this.iterator) {\n      defineReactive(scope, this.iterator, key !== null ? key : index);\n    }\n    var frag = this.factory.create(host, scope, this._frag);\n    frag.forId = this.id;\n    this.cacheFrag(value, frag, index, key);\n    return frag;\n  },\n\n  /**\n   * Update the v-ref on owner vm.\n   */\n\n  updateRef: function updateRef() {\n    var ref = this.descriptor.ref;\n    if (!ref) return;\n    var hash = (this._scope || this.vm).$refs;\n    var refs;\n    if (!this.fromObject) {\n      refs = this.frags.map(findVmFromFrag);\n    } else {\n      refs = {};\n      this.frags.forEach(function (frag) {\n        refs[frag.scope.$key] = findVmFromFrag(frag);\n      });\n    }\n    hash[ref] = refs;\n  },\n\n  /**\n   * For option lists, update the containing v-model on\n   * parent <select>.\n   */\n\n  updateModel: function updateModel() {\n    if (this.isOption) {\n      var parent = this.start.parentNode;\n      var model = parent && parent.__v_model;\n      if (model) {\n        model.forceUpdate();\n      }\n    }\n  },\n\n  /**\n   * Insert a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Node} prevEl\n   * @param {Boolean} inDocument\n   */\n\n  insert: function insert(frag, index, prevEl, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n    }\n    var staggerAmount = this.getStagger(frag, index, null, 'enter');\n    if (inDocument && staggerAmount) {\n      // create an anchor and insert it synchronously,\n      // so that we can resolve the correct order without\n      // worrying about some elements not inserted yet\n      var anchor = frag.staggerAnchor;\n      if (!anchor) {\n        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n        anchor.__v_frag = frag;\n      }\n      after(anchor, prevEl);\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.before(anchor);\n        remove(anchor);\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      var target = prevEl.nextSibling;\n      /* istanbul ignore if */\n      if (!target) {\n        // reset end anchor position in case the position was messed up\n        // by an external drag-n-drop library.\n        after(this.end, prevEl);\n        target = this.end;\n      }\n      frag.before(target);\n    }\n  },\n\n  /**\n   * Remove a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {Boolean} inDocument\n   */\n\n  remove: function remove(frag, index, total, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n      // it's not possible for the same frag to be removed\n      // twice, so if we have a pending stagger callback,\n      // it means this frag is queued for enter but removed\n      // before its transition started. Since it is already\n      // destroyed, we can just leave it in detached state.\n      return;\n    }\n    var staggerAmount = this.getStagger(frag, index, total, 'leave');\n    if (inDocument && staggerAmount) {\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.remove();\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      frag.remove();\n    }\n  },\n\n  /**\n   * Move a fragment to a new position.\n   * Force no transition.\n   *\n   * @param {Fragment} frag\n   * @param {Node} prevEl\n   */\n\n  move: function move(frag, prevEl) {\n    // fix a common issue with Sortable:\n    // if prevEl doesn't have nextSibling, this means it's\n    // been dragged after the end anchor. Just re-position\n    // the end anchor to the end of the container.\n    /* istanbul ignore if */\n    if (!prevEl.nextSibling) {\n      this.end.parentNode.appendChild(this.end);\n    }\n    frag.before(prevEl.nextSibling, false);\n  },\n\n  /**\n   * Cache a fragment using track-by or the object key.\n   *\n   * @param {*} value\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {String} [key]\n   */\n\n  cacheFrag: function cacheFrag(value, frag, index, key) {\n    var trackByKey = this.params.trackBy;\n    var cache = this.cache;\n    var primitive = !isObject(value);\n    var id;\n    if (key || trackByKey || primitive) {\n      id = getTrackByKey(index, key, value, trackByKey);\n      if (!cache[id]) {\n        cache[id] = frag;\n      } else if (trackByKey !== '$index') {\n        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n      }\n    } else {\n      id = this.id;\n      if (hasOwn(value, id)) {\n        if (value[id] === null) {\n          value[id] = frag;\n        } else {\n          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n        }\n      } else if (Object.isExtensible(value)) {\n        def(value, id, frag);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\n      }\n    }\n    frag.raw = value;\n  },\n\n  /**\n   * Get a cached fragment from the value/index/key\n   *\n   * @param {*} value\n   * @param {Number} index\n   * @param {String} key\n   * @return {Fragment}\n   */\n\n  getCachedFrag: function getCachedFrag(value, index, key) {\n    var trackByKey = this.params.trackBy;\n    var primitive = !isObject(value);\n    var frag;\n    if (key || trackByKey || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      frag = this.cache[id];\n    } else {\n      frag = value[this.id];\n    }\n    if (frag && (frag.reused || frag.fresh)) {\n      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n    }\n    return frag;\n  },\n\n  /**\n   * Delete a fragment from cache.\n   *\n   * @param {Fragment} frag\n   */\n\n  deleteCachedFrag: function deleteCachedFrag(frag) {\n    var value = frag.raw;\n    var trackByKey = this.params.trackBy;\n    var scope = frag.scope;\n    var index = scope.$index;\n    // fix #948: avoid accidentally fall through to\n    // a parent repeater which happens to have $key.\n    var key = hasOwn(scope, '$key') && scope.$key;\n    var primitive = !isObject(value);\n    if (trackByKey || key || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      this.cache[id] = null;\n    } else {\n      value[this.id] = null;\n      frag.raw = null;\n    }\n  },\n\n  /**\n   * Get the stagger amount for an insertion/removal.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {String} type\n   */\n\n  getStagger: function getStagger(frag, index, total, type) {\n    type = type + 'Stagger';\n    var trans = frag.node.__v_trans;\n    var hooks = trans && trans.hooks;\n    var hook = hooks && (hooks[type] || hooks.stagger);\n    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n  },\n\n  /**\n   * Pre-process the value before piping it through the\n   * filters. This is passed to and called by the watcher.\n   */\n\n  _preProcess: function _preProcess(value) {\n    // regardless of type, store the un-filtered raw value.\n    this.rawValue = value;\n    return value;\n  },\n\n  /**\n   * Post-process the value after it has been piped through\n   * the filters. This is passed to and called by the watcher.\n   *\n   * It is necessary for this to be called during the\n   * watcher's dependency collection phase because we want\n   * the v-for to update when the source Object is mutated.\n   */\n\n  _postProcess: function _postProcess(value) {\n    if (isArray(value)) {\n      return value;\n    } else if (isPlainObject(value)) {\n      // convert plain object to array.\n      var keys = Object.keys(value);\n      var i = keys.length;\n      var res = new Array(i);\n      var key;\n      while (i--) {\n        key = keys[i];\n        res[i] = {\n          $key: key,\n          $value: value[key]\n        };\n      }\n      return res;\n    } else {\n      if (typeof value === 'number' && !isNaN(value)) {\n        value = range(value);\n      }\n      return value || [];\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.descriptor.ref) {\n      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n    }\n    if (this.frags) {\n      var i = this.frags.length;\n      var frag;\n      while (i--) {\n        frag = this.frags[i];\n        this.deleteCachedFrag(frag);\n        frag.destroy();\n      }\n    }\n  }\n};\n\n/**\n * Helper to find the previous element that is a fragment\n * anchor. This is necessary because a destroyed frag's\n * element could still be lingering in the DOM before its\n * leaving transition finishes, but its inserted flag\n * should have been set to false so we can skip them.\n *\n * If this is a block repeat, we want to make sure we only\n * return frag that is bound to this v-for. (see #929)\n *\n * @param {Fragment} frag\n * @param {Comment|Text} anchor\n * @param {String} id\n * @return {Fragment}\n */\n\nfunction findPrevFrag(frag, anchor, id) {\n  var el = frag.node.previousSibling;\n  /* istanbul ignore if */\n  if (!el) return;\n  frag = el.__v_frag;\n  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n    el = el.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__v_frag;\n  }\n  return frag;\n}\n\n/**\n * Create a range array from given number.\n *\n * @param {Number} n\n * @return {Array}\n */\n\nfunction range(n) {\n  var i = -1;\n  var ret = new Array(Math.floor(n));\n  while (++i < n) {\n    ret[i] = i;\n  }\n  return ret;\n}\n\n/**\n * Get the track by key for an item.\n *\n * @param {Number} index\n * @param {String} key\n * @param {*} value\n * @param {String} [trackByKey]\n */\n\nfunction getTrackByKey(index, key, value, trackByKey) {\n  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  vFor.warnDuplicate = function (value) {\n    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\n  };\n}\n\n/**\n * Find a vm from a fragment.\n *\n * @param {Fragment} frag\n * @return {Vue|undefined}\n */\n\nfunction findVmFromFrag(frag) {\n  var node = frag.node;\n  // handle multi-node frag\n  if (frag.end) {\n    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n      node = node.nextSibling;\n    }\n  }\n  return node.__vue__;\n}\n\nvar vIf = {\n\n  priority: IF,\n  terminal: true,\n\n  bind: function bind() {\n    var el = this.el;\n    if (!el.__vue__) {\n      // check else block\n      var next = el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        remove(next);\n        this.elseEl = next;\n      }\n      // check main block\n      this.anchor = createAnchor('v-if');\n      replace(el, this.anchor);\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\n      this.invalid = true;\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) return;\n    if (value) {\n      if (!this.frag) {\n        this.insert();\n      }\n    } else {\n      this.remove();\n    }\n  },\n\n  insert: function insert() {\n    if (this.elseFrag) {\n      this.elseFrag.remove();\n      this.elseFrag = null;\n    }\n    // lazy init factory\n    if (!this.factory) {\n      this.factory = new FragmentFactory(this.vm, this.el);\n    }\n    this.frag = this.factory.create(this._host, this._scope, this._frag);\n    this.frag.before(this.anchor);\n  },\n\n  remove: function remove() {\n    if (this.frag) {\n      this.frag.remove();\n      this.frag = null;\n    }\n    if (this.elseEl && !this.elseFrag) {\n      if (!this.elseFactory) {\n        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\n      }\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n      this.elseFrag.before(this.anchor);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n    if (this.elseFrag) {\n      this.elseFrag.destroy();\n    }\n  }\n};\n\nvar show = {\n\n  bind: function bind() {\n    // check else block\n    var next = this.el.nextElementSibling;\n    if (next && getAttr(next, 'v-else') !== null) {\n      this.elseEl = next;\n    }\n  },\n\n  update: function update(value) {\n    this.apply(this.el, value);\n    if (this.elseEl) {\n      this.apply(this.elseEl, !value);\n    }\n  },\n\n  apply: function apply(el, value) {\n    if (inDoc(el)) {\n      applyTransition(el, value ? 1 : -1, toggle, this.vm);\n    } else {\n      toggle();\n    }\n    function toggle() {\n      el.style.display = value ? '' : 'none';\n    }\n  }\n};\n\nvar text$2 = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n    var isRange = el.type === 'range';\n    var lazy = this.params.lazy;\n    var number = this.params.number;\n    var debounce = this.params.debounce;\n\n    // handle composition events.\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\n    // skip this for Android because it handles composition\n    // events quite differently. Android doesn't trigger\n    // composition events for language input methods e.g.\n    // Chinese, but instead triggers them for spelling\n    // suggestions... (see Discussion/#162)\n    var composing = false;\n    if (!isAndroid && !isRange) {\n      this.on('compositionstart', function () {\n        composing = true;\n      });\n      this.on('compositionend', function () {\n        composing = false;\n        // in IE11 the \"compositionend\" event fires AFTER\n        // the \"input\" event, so the input handler is blocked\n        // at the end... have to call it here.\n        //\n        // #1327: in lazy mode this is unecessary.\n        if (!lazy) {\n          self.listener();\n        }\n      });\n    }\n\n    // prevent messing with the input when user is typing,\n    // and force update on blur.\n    this.focused = false;\n    if (!isRange && !lazy) {\n      this.on('focus', function () {\n        self.focused = true;\n      });\n      this.on('blur', function () {\n        self.focused = false;\n        // do not sync value after fragment removal (#2017)\n        if (!self._frag || self._frag.inserted) {\n          self.rawListener();\n        }\n      });\n    }\n\n    // Now attach the main listener\n    this.listener = this.rawListener = function () {\n      if (composing || !self._bound) {\n        return;\n      }\n      var val = number || isRange ? toNumber(el.value) : el.value;\n      self.set(val);\n      // force update on next tick to avoid lock & same value\n      // also only update when user is not typing\n      nextTick(function () {\n        if (self._bound && !self.focused) {\n          self.update(self._watcher.value);\n        }\n      });\n    };\n\n    // apply debounce\n    if (debounce) {\n      this.listener = _debounce(this.listener, debounce);\n    }\n\n    // Support jQuery events, since jQuery.trigger() doesn't\n    // trigger native events in some cases and some plugins\n    // rely on $.trigger()\n    //\n    // We want to make sure if a listener is attached using\n    // jQuery, it is also removed with jQuery, that's why\n    // we do the check for each directive instance and\n    // store that check result on itself. This also allows\n    // easier test coverage control by unsetting the global\n    // jQuery variable in tests.\n    this.hasjQuery = typeof jQuery === 'function';\n    if (this.hasjQuery) {\n      var method = jQuery.fn.on ? 'on' : 'bind';\n      jQuery(el)[method]('change', this.rawListener);\n      if (!lazy) {\n        jQuery(el)[method]('input', this.listener);\n      }\n    } else {\n      this.on('change', this.rawListener);\n      if (!lazy) {\n        this.on('input', this.listener);\n      }\n    }\n\n    // IE9 doesn't fire input event on backspace/del/cut\n    if (!lazy && isIE9) {\n      this.on('cut', function () {\n        nextTick(self.listener);\n      });\n      this.on('keyup', function (e) {\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          self.listener();\n        }\n      });\n    }\n\n    // set initial value if present\n    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    // #3029 only update when the value changes. This prevent\n    // browsers from overwriting values like selectionStart\n    value = _toString(value);\n    if (value !== this.el.value) this.el.value = value;\n  },\n\n  unbind: function unbind() {\n    var el = this.el;\n    if (this.hasjQuery) {\n      var method = jQuery.fn.off ? 'off' : 'unbind';\n      jQuery(el)[method]('change', this.listener);\n      jQuery(el)[method]('input', this.listener);\n    }\n  }\n};\n\nvar radio = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      // value overwrite via v-bind:value\n      if (el.hasOwnProperty('_value')) {\n        return el._value;\n      }\n      var val = el.value;\n      if (self.params.number) {\n        val = toNumber(val);\n      }\n      return val;\n    };\n\n    this.listener = function () {\n      self.set(self.getValue());\n    };\n    this.on('change', this.listener);\n\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    this.el.checked = looseEqual(value, this.getValue());\n  }\n};\n\nvar select = {\n\n  bind: function bind() {\n    var _this = this;\n\n    var self = this;\n    var el = this.el;\n\n    // method to force update DOM using latest value.\n    this.forceUpdate = function () {\n      if (self._watcher) {\n        self.update(self._watcher.get());\n      }\n    };\n\n    // check if this is a multiple select\n    var multiple = this.multiple = el.hasAttribute('multiple');\n\n    // attach listener\n    this.listener = function () {\n      var value = getValue(el, multiple);\n      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n      self.set(value);\n    };\n    this.on('change', this.listener);\n\n    // if has initial value, set afterBind\n    var initValue = getValue(el, multiple, true);\n    if (multiple && initValue.length || !multiple && initValue !== null) {\n      this.afterBind = this.listener;\n    }\n\n    // All major browsers except Firefox resets\n    // selectedIndex with value -1 to 0 when the element\n    // is appended to a new parent, therefore we have to\n    // force a DOM update whenever that happens...\n    this.vm.$on('hook:attached', function () {\n      nextTick(_this.forceUpdate);\n    });\n    if (!inDoc(el)) {\n      nextTick(this.forceUpdate);\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    el.selectedIndex = -1;\n    var multi = this.multiple && isArray(value);\n    var options = el.options;\n    var i = options.length;\n    var op, val;\n    while (i--) {\n      op = options[i];\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      /* eslint-disable eqeqeq */\n      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n      /* eslint-enable eqeqeq */\n    }\n  },\n\n  unbind: function unbind() {\n    /* istanbul ignore next */\n    this.vm.$off('hook:attached', this.forceUpdate);\n  }\n};\n\n/**\n * Get select value\n *\n * @param {SelectElement} el\n * @param {Boolean} multi\n * @param {Boolean} init\n * @return {Array|*}\n */\n\nfunction getValue(el, multi, init) {\n  var res = multi ? [] : null;\n  var op, val, selected;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    op = el.options[i];\n    selected = init ? op.hasAttribute('selected') : op.selected;\n    if (selected) {\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      if (multi) {\n        res.push(val);\n      } else {\n        return val;\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Native Array.indexOf uses strict equal, but in this\n * case we need to match string/numbers with custom equal.\n *\n * @param {Array} arr\n * @param {*} val\n */\n\nfunction indexOf$1(arr, val) {\n  var i = arr.length;\n  while (i--) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvar checkbox = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n    };\n\n    function getBooleanValue() {\n      var val = el.checked;\n      if (val && el.hasOwnProperty('_trueValue')) {\n        return el._trueValue;\n      }\n      if (!val && el.hasOwnProperty('_falseValue')) {\n        return el._falseValue;\n      }\n      return val;\n    }\n\n    this.listener = function () {\n      var model = self._watcher.get();\n      if (isArray(model)) {\n        var val = self.getValue();\n        var i = indexOf(model, val);\n        if (el.checked) {\n          if (i < 0) {\n            self.set(model.concat(val));\n          }\n        } else if (i > -1) {\n          self.set(model.slice(0, i).concat(model.slice(i + 1)));\n        }\n      } else {\n        self.set(getBooleanValue());\n      }\n    };\n\n    this.on('change', this.listener);\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    if (isArray(value)) {\n      el.checked = indexOf(value, this.getValue()) > -1;\n    } else {\n      if (el.hasOwnProperty('_trueValue')) {\n        el.checked = looseEqual(value, el._trueValue);\n      } else {\n        el.checked = !!value;\n      }\n    }\n  }\n};\n\nvar handlers = {\n  text: text$2,\n  radio: radio,\n  select: select,\n  checkbox: checkbox\n};\n\nvar model = {\n\n  priority: MODEL,\n  twoWay: true,\n  handlers: handlers,\n  params: ['lazy', 'number', 'debounce'],\n\n  /**\n   * Possible elements:\n   *   <select>\n   *   <textarea>\n   *   <input type=\"*\">\n   *     - text\n   *     - checkbox\n   *     - radio\n   *     - number\n   */\n\n  bind: function bind() {\n    // friendly warning...\n    this.checkFilters();\n    if (this.hasRead && !this.hasWrite) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\n    }\n    var el = this.el;\n    var tag = el.tagName;\n    var handler;\n    if (tag === 'INPUT') {\n      handler = handlers[el.type] || handlers.text;\n    } else if (tag === 'SELECT') {\n      handler = handlers.select;\n    } else if (tag === 'TEXTAREA') {\n      handler = handlers.text;\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\n      return;\n    }\n    el.__v_model = this;\n    handler.bind.call(this);\n    this.update = handler.update;\n    this._unbind = handler.unbind;\n  },\n\n  /**\n   * Check read/write filter stats.\n   */\n\n  checkFilters: function checkFilters() {\n    var filters = this.filters;\n    if (!filters) return;\n    var i = filters.length;\n    while (i--) {\n      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n      if (typeof filter === 'function' || filter.read) {\n        this.hasRead = true;\n      }\n      if (filter.write) {\n        this.hasWrite = true;\n      }\n    }\n  },\n\n  unbind: function unbind() {\n    this.el.__v_model = null;\n    this._unbind && this._unbind();\n  }\n};\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  'delete': [8, 46],\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40\n};\n\nfunction keyFilter(handler, keys) {\n  var codes = keys.map(function (key) {\n    var charCode = key.charCodeAt(0);\n    if (charCode > 47 && charCode < 58) {\n      return parseInt(key, 10);\n    }\n    if (key.length === 1) {\n      charCode = key.toUpperCase().charCodeAt(0);\n      if (charCode > 64 && charCode < 91) {\n        return charCode;\n      }\n    }\n    return keyCodes[key];\n  });\n  codes = [].concat.apply([], codes);\n  return function keyHandler(e) {\n    if (codes.indexOf(e.keyCode) > -1) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nfunction stopFilter(handler) {\n  return function stopHandler(e) {\n    e.stopPropagation();\n    return handler.call(this, e);\n  };\n}\n\nfunction preventFilter(handler) {\n  return function preventHandler(e) {\n    e.preventDefault();\n    return handler.call(this, e);\n  };\n}\n\nfunction selfFilter(handler) {\n  return function selfHandler(e) {\n    if (e.target === e.currentTarget) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nvar on$1 = {\n\n  priority: ON,\n  acceptStatement: true,\n  keyCodes: keyCodes,\n\n  bind: function bind() {\n    // deal with iframes\n    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n      var self = this;\n      this.iframeBind = function () {\n        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\n      };\n      this.on('load', this.iframeBind);\n    }\n  },\n\n  update: function update(handler) {\n    // stub a noop for v-on with no value,\n    // e.g. @mousedown.prevent\n    if (!this.descriptor.raw) {\n      handler = function () {};\n    }\n\n    if (typeof handler !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\n      return;\n    }\n\n    // apply modifiers\n    if (this.modifiers.stop) {\n      handler = stopFilter(handler);\n    }\n    if (this.modifiers.prevent) {\n      handler = preventFilter(handler);\n    }\n    if (this.modifiers.self) {\n      handler = selfFilter(handler);\n    }\n    // key filter\n    var keys = Object.keys(this.modifiers).filter(function (key) {\n      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\n    });\n    if (keys.length) {\n      handler = keyFilter(handler, keys);\n    }\n\n    this.reset();\n    this.handler = handler;\n\n    if (this.iframeBind) {\n      this.iframeBind();\n    } else {\n      on(this.el, this.arg, this.handler, this.modifiers.capture);\n    }\n  },\n\n  reset: function reset() {\n    var el = this.iframeBind ? this.el.contentWindow : this.el;\n    if (this.handler) {\n      off(el, this.arg, this.handler);\n    }\n  },\n\n  unbind: function unbind() {\n    this.reset();\n  }\n};\n\nvar prefixes = ['-webkit-', '-moz-', '-ms-'];\nvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\nvar importantRE = /!important;?$/;\nvar propCache = Object.create(null);\n\nvar testEl = null;\n\nvar style = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (typeof value === 'string') {\n      this.el.style.cssText = value;\n    } else if (isArray(value)) {\n      this.handleObject(value.reduce(extend, {}));\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  handleObject: function handleObject(value) {\n    // cache object styles so that only changed props\n    // are actually updated.\n    var cache = this.cache || (this.cache = {});\n    var name, val;\n    for (name in cache) {\n      if (!(name in value)) {\n        this.handleSingle(name, null);\n        delete cache[name];\n      }\n    }\n    for (name in value) {\n      val = value[name];\n      if (val !== cache[name]) {\n        cache[name] = val;\n        this.handleSingle(name, val);\n      }\n    }\n  },\n\n  handleSingle: function handleSingle(prop, value) {\n    prop = normalize(prop);\n    if (!prop) return; // unsupported prop\n    // cast possible numbers/booleans into strings\n    if (value != null) value += '';\n    if (value) {\n      var isImportant = importantRE.test(value) ? 'important' : '';\n      if (isImportant) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\n        }\n        value = value.replace(importantRE, '').trim();\n        this.el.style.setProperty(prop.kebab, value, isImportant);\n      } else {\n        this.el.style[prop.camel] = value;\n      }\n    } else {\n      this.el.style[prop.camel] = '';\n    }\n  }\n\n};\n\n/**\n * Normalize a CSS property name.\n * - cache result\n * - auto prefix\n * - camelCase -> dash-case\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction normalize(prop) {\n  if (propCache[prop]) {\n    return propCache[prop];\n  }\n  var res = prefix(prop);\n  propCache[prop] = propCache[res] = res;\n  return res;\n}\n\n/**\n * Auto detect the appropriate prefix for a CSS property.\n * https://gist.github.com/paulirish/523692\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction prefix(prop) {\n  prop = hyphenate(prop);\n  var camel = camelize(prop);\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n  if (!testEl) {\n    testEl = document.createElement('div');\n  }\n  var i = prefixes.length;\n  var prefixed;\n  if (camel !== 'filter' && camel in testEl.style) {\n    return {\n      kebab: prop,\n      camel: camel\n    };\n  }\n  while (i--) {\n    prefixed = camelPrefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return {\n        kebab: prefixes[i] + prop,\n        camel: prefixed\n      };\n    }\n  }\n}\n\n// xlink\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xlinkRE = /^xlink:/;\n\n// check for attributes that prohibit interpolations\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n// these attributes should also set their corresponding properties\n// because they only affect the initial state of the element\nvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\n// these attributes expect enumrated values of \"true\" or \"false\"\n// but are not boolean attributes\nvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\n\n// these attributes should set a hidden property for\n// binding v-model to object values\nvar modelProps = {\n  value: '_value',\n  'true-value': '_trueValue',\n  'false-value': '_falseValue'\n};\n\nvar bind$1 = {\n\n  priority: BIND,\n\n  bind: function bind() {\n    var attr = this.arg;\n    var tag = this.el.tagName;\n    // should be deep watch on object mode\n    if (!attr) {\n      this.deep = true;\n    }\n    // handle interpolation bindings\n    var descriptor = this.descriptor;\n    var tokens = descriptor.interp;\n    if (tokens) {\n      // handle interpolations with one-time tokens\n      if (descriptor.hasOneTime) {\n        this.expression = tokensToExp(tokens, this._scope || this.vm);\n      }\n\n      // only allow binding on native attributes\n      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n        process.env.NODE_ENV !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\n        this.el.removeAttribute(attr);\n        this.invalid = true;\n      }\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        var raw = attr + '=\"' + descriptor.raw + '\": ';\n        // warn src\n        if (attr === 'src') {\n          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\n        }\n\n        // warn style\n        if (attr === 'style') {\n          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\n        }\n      }\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) {\n      return;\n    }\n    var attr = this.arg;\n    if (this.arg) {\n      this.handleSingle(attr, value);\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  // share object handler with v-bind:class\n  handleObject: style.handleObject,\n\n  handleSingle: function handleSingle(attr, value) {\n    var el = this.el;\n    var interp = this.descriptor.interp;\n    if (this.modifiers.camel) {\n      attr = camelize(attr);\n    }\n    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\n      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\n      ? '' : value : value;\n\n      if (el[attr] !== attrValue) {\n        el[attr] = attrValue;\n      }\n    }\n    // set model props\n    var modelProp = modelProps[attr];\n    if (!interp && modelProp) {\n      el[modelProp] = value;\n      // update v-model if present\n      var model = el.__v_model;\n      if (model) {\n        model.listener();\n      }\n    }\n    // do not set value attribute for textarea\n    if (attr === 'value' && el.tagName === 'TEXTAREA') {\n      el.removeAttribute(attr);\n      return;\n    }\n    // update attribute\n    if (enumeratedAttrRE.test(attr)) {\n      el.setAttribute(attr, value ? 'true' : 'false');\n    } else if (value != null && value !== false) {\n      if (attr === 'class') {\n        // handle edge case #1960:\n        // class interpolation should not overwrite Vue transition class\n        if (el.__v_trans) {\n          value += ' ' + el.__v_trans.id + '-transition';\n        }\n        setClass(el, value);\n      } else if (xlinkRE.test(attr)) {\n        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\n      } else {\n        el.setAttribute(attr, value === true ? '' : value);\n      }\n    } else {\n      el.removeAttribute(attr);\n    }\n  }\n};\n\nvar el = {\n\n  priority: EL,\n\n  bind: function bind() {\n    /* istanbul ignore if */\n    if (!this.arg) {\n      return;\n    }\n    var id = this.id = camelize(this.arg);\n    var refs = (this._scope || this.vm).$els;\n    if (hasOwn(refs, id)) {\n      refs[id] = this.el;\n    } else {\n      defineReactive(refs, id, this.el);\n    }\n  },\n\n  unbind: function unbind() {\n    var refs = (this._scope || this.vm).$els;\n    if (refs[this.id] === this.el) {\n      refs[this.id] = null;\n    }\n  }\n};\n\nvar ref = {\n  bind: function bind() {\n    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\n  }\n};\n\nvar cloak = {\n  bind: function bind() {\n    var el = this.el;\n    this.vm.$once('pre-hook:compiled', function () {\n      el.removeAttribute('v-cloak');\n    });\n  }\n};\n\n// logic control\n// two-way binding\n// event handling\n// attributes\n// ref & el\n// cloak\n// must export plain object\nvar directives = {\n  text: text$1,\n  html: html,\n  'for': vFor,\n  'if': vIf,\n  show: show,\n  model: model,\n  on: on$1,\n  bind: bind$1,\n  el: el,\n  ref: ref,\n  cloak: cloak\n};\n\nvar vClass = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (!value) {\n      this.cleanup();\n    } else if (typeof value === 'string') {\n      this.setClass(value.trim().split(/\\s+/));\n    } else {\n      this.setClass(normalize$1(value));\n    }\n  },\n\n  setClass: function setClass(value) {\n    this.cleanup(value);\n    for (var i = 0, l = value.length; i < l; i++) {\n      var val = value[i];\n      if (val) {\n        apply(this.el, val, addClass);\n      }\n    }\n    this.prevKeys = value;\n  },\n\n  cleanup: function cleanup(value) {\n    var prevKeys = this.prevKeys;\n    if (!prevKeys) return;\n    var i = prevKeys.length;\n    while (i--) {\n      var key = prevKeys[i];\n      if (!value || value.indexOf(key) < 0) {\n        apply(this.el, key, removeClass);\n      }\n    }\n  }\n};\n\n/**\n * Normalize objects and arrays (potentially containing objects)\n * into array of strings.\n *\n * @param {Object|Array<String|Object>} value\n * @return {Array<String>}\n */\n\nfunction normalize$1(value) {\n  var res = [];\n  if (isArray(value)) {\n    for (var i = 0, l = value.length; i < l; i++) {\n      var _key = value[i];\n      if (_key) {\n        if (typeof _key === 'string') {\n          res.push(_key);\n        } else {\n          for (var k in _key) {\n            if (_key[k]) res.push(k);\n          }\n        }\n      }\n    }\n  } else if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) res.push(key);\n    }\n  }\n  return res;\n}\n\n/**\n * Add or remove a class/classes on an element\n *\n * @param {Element} el\n * @param {String} key The class name. This may or may not\n *                     contain a space character, in such a\n *                     case we'll deal with multiple class\n *                     names at once.\n * @param {Function} fn\n */\n\nfunction apply(el, key, fn) {\n  key = key.trim();\n  if (key.indexOf(' ') === -1) {\n    fn(el, key);\n    return;\n  }\n  // The key contains one or more space characters.\n  // Since a class name doesn't accept such characters, we\n  // treat it as multiple classes.\n  var keys = key.split(/\\s+/);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    fn(el, keys[i]);\n  }\n}\n\nvar component = {\n\n  priority: COMPONENT,\n\n  params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n  /**\n   * Setup. Two possible usages:\n   *\n   * - static:\n   *   <comp> or <div v-component=\"comp\">\n   *\n   * - dynamic:\n   *   <component :is=\"view\">\n   */\n\n  bind: function bind() {\n    if (!this.el.__vue__) {\n      // keep-alive cache\n      this.keepAlive = this.params.keepAlive;\n      if (this.keepAlive) {\n        this.cache = {};\n      }\n      // check inline-template\n      if (this.params.inlineTemplate) {\n        // extract inline template as a DocumentFragment\n        this.inlineTemplate = extractContent(this.el, true);\n      }\n      // component resolution related state\n      this.pendingComponentCb = this.Component = null;\n      // transition related state\n      this.pendingRemovals = 0;\n      this.pendingRemovalCb = null;\n      // create a ref anchor\n      this.anchor = createAnchor('v-component');\n      replace(this.el, this.anchor);\n      // remove is attribute.\n      // this is removed during compilation, but because compilation is\n      // cached, when the component is used elsewhere this attribute\n      // will remain at link time.\n      this.el.removeAttribute('is');\n      this.el.removeAttribute(':is');\n      // remove ref, same as above\n      if (this.descriptor.ref) {\n        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n      }\n      // if static, build right now.\n      if (this.literal) {\n        this.setComponent(this.expression);\n      }\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n    }\n  },\n\n  /**\n   * Public update, called by the watcher in the dynamic\n   * literal scenario, e.g. <component :is=\"view\">\n   */\n\n  update: function update(value) {\n    if (!this.literal) {\n      this.setComponent(value);\n    }\n  },\n\n  /**\n   * Switch dynamic components. May resolve the component\n   * asynchronously, and perform transition based on\n   * specified transition mode. Accepts a few additional\n   * arguments specifically for vue-router.\n   *\n   * The callback is called when the full transition is\n   * finished.\n   *\n   * @param {String} value\n   * @param {Function} [cb]\n   */\n\n  setComponent: function setComponent(value, cb) {\n    this.invalidatePending();\n    if (!value) {\n      // just remove current\n      this.unbuild(true);\n      this.remove(this.childVM, cb);\n      this.childVM = null;\n    } else {\n      var self = this;\n      this.resolveComponent(value, function () {\n        self.mountComponent(cb);\n      });\n    }\n  },\n\n  /**\n   * Resolve the component constructor to use when creating\n   * the child vm.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  resolveComponent: function resolveComponent(value, cb) {\n    var self = this;\n    this.pendingComponentCb = cancellable(function (Component) {\n      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\n      self.Component = Component;\n      cb();\n    });\n    this.vm._resolveComponent(value, this.pendingComponentCb);\n  },\n\n  /**\n   * Create a new instance using the current constructor and\n   * replace the existing instance. This method doesn't care\n   * whether the new component and the old one are actually\n   * the same.\n   *\n   * @param {Function} [cb]\n   */\n\n  mountComponent: function mountComponent(cb) {\n    // actual mount\n    this.unbuild(true);\n    var self = this;\n    var activateHooks = this.Component.options.activate;\n    var cached = this.getCached();\n    var newComponent = this.build();\n    if (activateHooks && !cached) {\n      this.waitingFor = newComponent;\n      callActivateHooks(activateHooks, newComponent, function () {\n        if (self.waitingFor !== newComponent) {\n          return;\n        }\n        self.waitingFor = null;\n        self.transition(newComponent, cb);\n      });\n    } else {\n      // update ref for kept-alive component\n      if (cached) {\n        newComponent._updateRef();\n      }\n      this.transition(newComponent, cb);\n    }\n  },\n\n  /**\n   * When the component changes or unbinds before an async\n   * constructor is resolved, we need to invalidate its\n   * pending callback.\n   */\n\n  invalidatePending: function invalidatePending() {\n    if (this.pendingComponentCb) {\n      this.pendingComponentCb.cancel();\n      this.pendingComponentCb = null;\n    }\n  },\n\n  /**\n   * Instantiate/insert a new child vm.\n   * If keep alive and has cached instance, insert that\n   * instance; otherwise build a new one and cache it.\n   *\n   * @param {Object} [extraOptions]\n   * @return {Vue} - the created instance\n   */\n\n  build: function build(extraOptions) {\n    var cached = this.getCached();\n    if (cached) {\n      return cached;\n    }\n    if (this.Component) {\n      // default options\n      var options = {\n        name: this.ComponentName,\n        el: cloneNode(this.el),\n        template: this.inlineTemplate,\n        // make sure to add the child with correct parent\n        // if this is a transcluded component, its parent\n        // should be the transclusion host.\n        parent: this._host || this.vm,\n        // if no inline-template, then the compiled\n        // linker can be cached for better performance.\n        _linkerCachable: !this.inlineTemplate,\n        _ref: this.descriptor.ref,\n        _asComponent: true,\n        _isRouterView: this._isRouterView,\n        // if this is a transcluded component, context\n        // will be the common parent vm of this instance\n        // and its host.\n        _context: this.vm,\n        // if this is inside an inline v-for, the scope\n        // will be the intermediate scope created for this\n        // repeat fragment. this is used for linking props\n        // and container directives.\n        _scope: this._scope,\n        // pass in the owner fragment of this component.\n        // this is necessary so that the fragment can keep\n        // track of its contained components in order to\n        // call attach/detach hooks for them.\n        _frag: this._frag\n      };\n      // extra options\n      // in 1.0.0 this is used by vue-router only\n      /* istanbul ignore if */\n      if (extraOptions) {\n        extend(options, extraOptions);\n      }\n      var child = new this.Component(options);\n      if (this.keepAlive) {\n        this.cache[this.Component.cid] = child;\n      }\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\n      }\n      return child;\n    }\n  },\n\n  /**\n   * Try to get a cached instance of the current component.\n   *\n   * @return {Vue|undefined}\n   */\n\n  getCached: function getCached() {\n    return this.keepAlive && this.cache[this.Component.cid];\n  },\n\n  /**\n   * Teardown the current child, but defers cleanup so\n   * that we can separate the destroy and removal steps.\n   *\n   * @param {Boolean} defer\n   */\n\n  unbuild: function unbuild(defer) {\n    if (this.waitingFor) {\n      if (!this.keepAlive) {\n        this.waitingFor.$destroy();\n      }\n      this.waitingFor = null;\n    }\n    var child = this.childVM;\n    if (!child || this.keepAlive) {\n      if (child) {\n        // remove ref\n        child._inactive = true;\n        child._updateRef(true);\n      }\n      return;\n    }\n    // the sole purpose of `deferCleanup` is so that we can\n    // \"deactivate\" the vm right now and perform DOM removal\n    // later.\n    child.$destroy(false, defer);\n  },\n\n  /**\n   * Remove current destroyed child and manually do\n   * the cleanup after removal.\n   *\n   * @param {Function} cb\n   */\n\n  remove: function remove(child, cb) {\n    var keepAlive = this.keepAlive;\n    if (child) {\n      // we may have a component switch when a previous\n      // component is still being transitioned out.\n      // we want to trigger only one lastest insertion cb\n      // when the existing transition finishes. (#1119)\n      this.pendingRemovals++;\n      this.pendingRemovalCb = cb;\n      var self = this;\n      child.$remove(function () {\n        self.pendingRemovals--;\n        if (!keepAlive) child._cleanup();\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\n          self.pendingRemovalCb();\n          self.pendingRemovalCb = null;\n        }\n      });\n    } else if (cb) {\n      cb();\n    }\n  },\n\n  /**\n   * Actually swap the components, depending on the\n   * transition mode. Defaults to simultaneous.\n   *\n   * @param {Vue} target\n   * @param {Function} [cb]\n   */\n\n  transition: function transition(target, cb) {\n    var self = this;\n    var current = this.childVM;\n    // for devtool inspection\n    if (current) current._inactive = true;\n    target._inactive = false;\n    this.childVM = target;\n    switch (self.params.transitionMode) {\n      case 'in-out':\n        target.$before(self.anchor, function () {\n          self.remove(current, cb);\n        });\n        break;\n      case 'out-in':\n        self.remove(current, function () {\n          target.$before(self.anchor, cb);\n        });\n        break;\n      default:\n        self.remove(current);\n        target.$before(self.anchor, cb);\n    }\n  },\n\n  /**\n   * Unbind.\n   */\n\n  unbind: function unbind() {\n    this.invalidatePending();\n    // Do not defer cleanup when unbinding\n    this.unbuild();\n    // destroy all keep-alive cached instances\n    if (this.cache) {\n      for (var key in this.cache) {\n        this.cache[key].$destroy();\n      }\n      this.cache = null;\n    }\n  }\n};\n\n/**\n * Call activate hooks in order (asynchronous)\n *\n * @param {Array} hooks\n * @param {Vue} vm\n * @param {Function} cb\n */\n\nfunction callActivateHooks(hooks, vm, cb) {\n  var total = hooks.length;\n  var called = 0;\n  hooks[0].call(vm, next);\n  function next() {\n    if (++called >= total) {\n      cb();\n    } else {\n      hooks[called].call(vm, next);\n    }\n  }\n}\n\nvar propBindingModes = config._propBindingModes;\nvar empty = {};\n\n// regexes\nvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n/**\n * Compile props on a root element and return\n * a props link function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Array} propOptions\n * @param {Vue} vm\n * @return {Function} propsLinkFn\n */\n\nfunction compileProps(el, propOptions, vm) {\n  var props = [];\n  var propsData = vm.$options.propsData;\n  var names = Object.keys(propOptions);\n  var i = names.length;\n  var options, name, attr, value, path, parsed, prop;\n  while (i--) {\n    name = names[i];\n    options = propOptions[name] || empty;\n\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\n      warn('Do not use $data as prop.', vm);\n      continue;\n    }\n\n    // props could contain dashes, which will be\n    // interpreted as minus calculations by the parser\n    // so we need to camelize the path here\n    path = camelize(name);\n    if (!identRE$1.test(path)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\n      continue;\n    }\n\n    prop = {\n      name: name,\n      path: path,\n      options: options,\n      mode: propBindingModes.ONE_WAY,\n      raw: null\n    };\n\n    attr = hyphenate(name);\n    // first check dynamic version\n    if ((value = getBindAttr(el, attr)) === null) {\n      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n        prop.mode = propBindingModes.TWO_WAY;\n      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n        prop.mode = propBindingModes.ONE_TIME;\n      }\n    }\n    if (value !== null) {\n      // has dynamic binding!\n      prop.raw = value;\n      parsed = parseDirective(value);\n      value = parsed.expression;\n      prop.filters = parsed.filters;\n      // check binding type\n      if (isLiteral(value) && !parsed.filters) {\n        // for expressions containing literal numbers and\n        // booleans, there's no need to setup a prop binding,\n        // so we can optimize them as a one-time set.\n        prop.optimizedLiteral = true;\n      } else {\n        prop.dynamic = true;\n        // check non-settable path for two-way bindings\n        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n          prop.mode = propBindingModes.ONE_WAY;\n          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\n        }\n      }\n      prop.parentPath = value;\n\n      // warn required two-way\n      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\n      }\n    } else if ((value = getAttr(el, attr)) !== null) {\n      // has literal binding!\n      prop.raw = value;\n    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {\n      // has propsData\n      prop.raw = value;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // check possible camelCase prop usage\n      var lowerCaseName = path.toLowerCase();\n      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\n      if (value) {\n        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\n      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {\n        // warn missing required\n        warn('Missing required prop: ' + name, vm);\n      }\n    }\n    // push prop\n    props.push(prop);\n  }\n  return makePropsLinkFn(props);\n}\n\n/**\n * Build a function that applies props to a vm.\n *\n * @param {Array} props\n * @return {Function} propsLinkFn\n */\n\nfunction makePropsLinkFn(props) {\n  return function propsLinkFn(vm, scope) {\n    // store resolved props info\n    vm._props = {};\n    var inlineProps = vm.$options.propsData;\n    var i = props.length;\n    var prop, path, options, value, raw;\n    while (i--) {\n      prop = props[i];\n      raw = prop.raw;\n      path = prop.path;\n      options = prop.options;\n      vm._props[path] = prop;\n      if (inlineProps && hasOwn(inlineProps, path)) {\n        initProp(vm, prop, inlineProps[path]);\n      }if (raw === null) {\n        // initialize absent prop\n        initProp(vm, prop, undefined);\n      } else if (prop.dynamic) {\n        // dynamic prop\n        if (prop.mode === propBindingModes.ONE_TIME) {\n          // one time binding\n          value = (scope || vm._context || vm).$get(prop.parentPath);\n          initProp(vm, prop, value);\n        } else {\n          if (vm._context) {\n            // dynamic binding\n            vm._bindDir({\n              name: 'prop',\n              def: propDef,\n              prop: prop\n            }, null, null, scope); // el, host, scope\n          } else {\n              // root instance\n              initProp(vm, prop, vm.$get(prop.parentPath));\n            }\n        }\n      } else if (prop.optimizedLiteral) {\n        // optimized literal, cast it and just set once\n        var stripped = stripQuotes(raw);\n        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n        initProp(vm, prop, value);\n      } else {\n        // string literal, but we need to cater for\n        // Boolean props with no value, or with same\n        // literal value (e.g. disabled=\"disabled\")\n        // see https://github.com/vuejs/vue-loader/issues/182\n        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\n        initProp(vm, prop, value);\n      }\n    }\n  };\n}\n\n/**\n * Process a prop with a rawValue, applying necessary coersions,\n * default values & assertions and call the given callback with\n * processed value.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} rawValue\n * @param {Function} fn\n */\n\nfunction processPropValue(vm, prop, rawValue, fn) {\n  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\n  var value = rawValue;\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop);\n  }\n  value = coerceProp(prop, value, vm);\n  var coerced = value !== rawValue;\n  if (!assertProp(prop, value, vm)) {\n    value = undefined;\n  }\n  if (isSimple && !coerced) {\n    withoutConversion(function () {\n      fn(value);\n    });\n  } else {\n    fn(value);\n  }\n}\n\n/**\n * Set a prop's initial value on a vm and its data object.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction initProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    defineReactive(vm, prop.path, value);\n  });\n}\n\n/**\n * Update a prop's value on a vm.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction updateProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    vm[prop.path] = value;\n  });\n}\n\n/**\n * Get the default value of a prop.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @return {*}\n */\n\nfunction getPropDefaultValue(vm, prop) {\n  // no default, return undefined\n  var options = prop.options;\n  if (!hasOwn(options, 'default')) {\n    // absent boolean value defaults to false\n    return options.type === Boolean ? false : undefined;\n  }\n  var def = options['default'];\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n *\n * @param {Object} prop\n * @param {*} value\n * @param {Vue} vm\n */\n\nfunction assertProp(prop, value, vm) {\n  if (!prop.options.required && ( // non-required\n  prop.raw === null || // abscent\n  value == null) // null or undefined\n  ) {\n      return true;\n    }\n  var options = prop.options;\n  var type = options.type;\n  var valid = !type;\n  var expectedTypes = [];\n  if (type) {\n    if (!isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType);\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\n    }\n    return false;\n  }\n  var validator = options.validator;\n  if (validator) {\n    if (!validator(value)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Force parsing value with coerce option.\n *\n * @param {*} value\n * @param {Object} options\n * @return {*}\n */\n\nfunction coerceProp(prop, value, vm) {\n  var coerce = prop.options.coerce;\n  if (!coerce) {\n    return value;\n  }\n  if (typeof coerce === 'function') {\n    return coerce(value);\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\n    return value;\n  }\n}\n\n/**\n * Assert the type of a value\n *\n * @param {*} value\n * @param {Function} type\n * @return {Object}\n */\n\nfunction assertType(value, type) {\n  var valid;\n  var expectedType;\n  if (type === String) {\n    expectedType = 'string';\n    valid = typeof value === expectedType;\n  } else if (type === Number) {\n    expectedType = 'number';\n    valid = typeof value === expectedType;\n  } else if (type === Boolean) {\n    expectedType = 'boolean';\n    valid = typeof value === expectedType;\n  } else if (type === Function) {\n    expectedType = 'function';\n    valid = typeof value === expectedType;\n  } else if (type === Object) {\n    expectedType = 'object';\n    valid = isPlainObject(value);\n  } else if (type === Array) {\n    expectedType = 'array';\n    valid = isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Format type for output\n *\n * @param {String} type\n * @return {String}\n */\n\nfunction formatType(type) {\n  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\n}\n\n/**\n * Format value\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction formatValue(val) {\n  return Object.prototype.toString.call(val).slice(8, -1);\n}\n\nvar bindingModes = config._propBindingModes;\n\nvar propDef = {\n\n  bind: function bind() {\n    var child = this.vm;\n    var parent = child._context;\n    // passed in from compiler directly\n    var prop = this.descriptor.prop;\n    var childKey = prop.path;\n    var parentKey = prop.parentPath;\n    var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n      updateProp(child, prop, val);\n    }, {\n      twoWay: twoWay,\n      filters: prop.filters,\n      // important: props need to be observed on the\n      // v-for scope if present\n      scope: this._scope\n    });\n\n    // set the child initial value.\n    initProp(child, prop, parentWatcher.value);\n\n    // setup two-way binding\n    if (twoWay) {\n      // important: defer the child watcher creation until\n      // the created hook (after data observation)\n      var self = this;\n      child.$once('pre-hook:created', function () {\n        self.childWatcher = new Watcher(child, childKey, function (val) {\n          parentWatcher.set(val);\n        }, {\n          // ensure sync upward before parent sync down.\n          // this is necessary in cases e.g. the child\n          // mutates a prop array, then replaces it. (#1683)\n          sync: true\n        });\n      });\n    }\n  },\n\n  unbind: function unbind() {\n    this.parentWatcher.teardown();\n    if (this.childWatcher) {\n      this.childWatcher.teardown();\n    }\n  }\n};\n\nvar queue$1 = [];\nvar queued = false;\n\n/**\n * Push a job into the queue.\n *\n * @param {Function} job\n */\n\nfunction pushJob(job) {\n  queue$1.push(job);\n  if (!queued) {\n    queued = true;\n    nextTick(flush);\n  }\n}\n\n/**\n * Flush the queue, and do one forced reflow before\n * triggering transitions.\n */\n\nfunction flush() {\n  // Force layout\n  var f = document.documentElement.offsetHeight;\n  for (var i = 0; i < queue$1.length; i++) {\n    queue$1[i]();\n  }\n  queue$1 = [];\n  queued = false;\n  // dummy return, so js linters don't complain about\n  // unused variable f\n  return f;\n}\n\nvar TYPE_TRANSITION = 'transition';\nvar TYPE_ANIMATION = 'animation';\nvar transDurationProp = transitionProp + 'Duration';\nvar animDurationProp = animationProp + 'Duration';\n\n/**\n * If a just-entered element is applied the\n * leave class while its enter transition hasn't started yet,\n * and the transitioned property has the same value for both\n * enter/leave, then the leave transition will be skipped and\n * the transitionend event never fires. This function ensures\n * its callback to be called after a transition has started\n * by waiting for double raf.\n *\n * It falls back to setTimeout on devices that support CSS\n * transitions but not raf (e.g. Android 4.2 browser) - since\n * these environments are usually slow, we are giving it a\n * relatively large timeout.\n */\n\nvar raf = inBrowser && window.requestAnimationFrame;\nvar waitForTransitionStart = raf\n/* istanbul ignore next */\n? function (fn) {\n  raf(function () {\n    raf(fn);\n  });\n} : function (fn) {\n  setTimeout(fn, 50);\n};\n\n/**\n * A Transition object that encapsulates the state and logic\n * of the transition.\n *\n * @param {Element} el\n * @param {String} id\n * @param {Object} hooks\n * @param {Vue} vm\n */\nfunction Transition(el, id, hooks, vm) {\n  this.id = id;\n  this.el = el;\n  this.enterClass = hooks && hooks.enterClass || id + '-enter';\n  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\n  this.hooks = hooks;\n  this.vm = vm;\n  // async state\n  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n  this.justEntered = false;\n  this.entered = this.left = false;\n  this.typeCache = {};\n  // check css transition type\n  this.type = hooks && hooks.type;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\n      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\n    }\n  }\n  // bind\n  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n    self[m] = bind(self[m], self);\n  });\n}\n\nvar p$1 = Transition.prototype;\n\n/**\n * Start an entering transition.\n *\n * 1. enter transition triggered\n * 2. call beforeEnter hook\n * 3. add enter class\n * 4. insert/show element\n * 5. call enter hook (with possible explicit js callback)\n * 6. reflow\n * 7. based on transition type:\n *    - transition:\n *        remove class now, wait for transitionend,\n *        then done if there's no explicit js callback.\n *    - animation:\n *        wait for animationend, remove class,\n *        then done if there's no explicit js callback.\n *    - no css transition:\n *        done now if there's no explicit js callback.\n * 8. wait for either done or js callback, then call\n *    afterEnter hook.\n *\n * @param {Function} op - insert/show the element\n * @param {Function} [cb]\n */\n\np$1.enter = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeEnter');\n  this.cb = cb;\n  addClass(this.el, this.enterClass);\n  op();\n  this.entered = false;\n  this.callHookWithCb('enter');\n  if (this.entered) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.enterCancelled;\n  pushJob(this.enterNextTick);\n};\n\n/**\n * The \"nextTick\" phase of an entering transition, which is\n * to be pushed into a queue and executed after a reflow so\n * that removing the class can trigger a CSS transition.\n */\n\np$1.enterNextTick = function () {\n  var _this = this;\n\n  // prevent transition skipping\n  this.justEntered = true;\n  waitForTransitionStart(function () {\n    _this.justEntered = false;\n  });\n  var enterDone = this.enterDone;\n  var type = this.getCssTransitionType(this.enterClass);\n  if (!this.pendingJsCb) {\n    if (type === TYPE_TRANSITION) {\n      // trigger transition by removing enter class now\n      removeClass(this.el, this.enterClass);\n      this.setupCssCb(transitionEndEvent, enterDone);\n    } else if (type === TYPE_ANIMATION) {\n      this.setupCssCb(animationEndEvent, enterDone);\n    } else {\n      enterDone();\n    }\n  } else if (type === TYPE_TRANSITION) {\n    removeClass(this.el, this.enterClass);\n  }\n};\n\n/**\n * The \"cleanup\" phase of an entering transition.\n */\n\np$1.enterDone = function () {\n  this.entered = true;\n  this.cancel = this.pendingJsCb = null;\n  removeClass(this.el, this.enterClass);\n  this.callHook('afterEnter');\n  if (this.cb) this.cb();\n};\n\n/**\n * Start a leaving transition.\n *\n * 1. leave transition triggered.\n * 2. call beforeLeave hook\n * 3. add leave class (trigger css transition)\n * 4. call leave hook (with possible explicit js callback)\n * 5. reflow if no explicit js callback is provided\n * 6. based on transition type:\n *    - transition or animation:\n *        wait for end event, remove class, then done if\n *        there's no explicit js callback.\n *    - no css transition:\n *        done if there's no explicit js callback.\n * 7. wait for either done or js callback, then call\n *    afterLeave hook.\n *\n * @param {Function} op - remove/hide the element\n * @param {Function} [cb]\n */\n\np$1.leave = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeLeave');\n  this.op = op;\n  this.cb = cb;\n  addClass(this.el, this.leaveClass);\n  this.left = false;\n  this.callHookWithCb('leave');\n  if (this.left) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.leaveCancelled;\n  // only need to handle leaveDone if\n  // 1. the transition is already done (synchronously called\n  //    by the user, which causes this.op set to null)\n  // 2. there's no explicit js callback\n  if (this.op && !this.pendingJsCb) {\n    // if a CSS transition leaves immediately after enter,\n    // the transitionend event never fires. therefore we\n    // detect such cases and end the leave immediately.\n    if (this.justEntered) {\n      this.leaveDone();\n    } else {\n      pushJob(this.leaveNextTick);\n    }\n  }\n};\n\n/**\n * The \"nextTick\" phase of a leaving transition.\n */\n\np$1.leaveNextTick = function () {\n  var type = this.getCssTransitionType(this.leaveClass);\n  if (type) {\n    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n    this.setupCssCb(event, this.leaveDone);\n  } else {\n    this.leaveDone();\n  }\n};\n\n/**\n * The \"cleanup\" phase of a leaving transition.\n */\n\np$1.leaveDone = function () {\n  this.left = true;\n  this.cancel = this.pendingJsCb = null;\n  this.op();\n  removeClass(this.el, this.leaveClass);\n  this.callHook('afterLeave');\n  if (this.cb) this.cb();\n  this.op = null;\n};\n\n/**\n * Cancel any pending callbacks from a previously running\n * but not finished transition.\n */\n\np$1.cancelPending = function () {\n  this.op = this.cb = null;\n  var hasPending = false;\n  if (this.pendingCssCb) {\n    hasPending = true;\n    off(this.el, this.pendingCssEvent, this.pendingCssCb);\n    this.pendingCssEvent = this.pendingCssCb = null;\n  }\n  if (this.pendingJsCb) {\n    hasPending = true;\n    this.pendingJsCb.cancel();\n    this.pendingJsCb = null;\n  }\n  if (hasPending) {\n    removeClass(this.el, this.enterClass);\n    removeClass(this.el, this.leaveClass);\n  }\n  if (this.cancel) {\n    this.cancel.call(this.vm, this.el);\n    this.cancel = null;\n  }\n};\n\n/**\n * Call a user-provided synchronous hook function.\n *\n * @param {String} type\n */\n\np$1.callHook = function (type) {\n  if (this.hooks && this.hooks[type]) {\n    this.hooks[type].call(this.vm, this.el);\n  }\n};\n\n/**\n * Call a user-provided, potentially-async hook function.\n * We check for the length of arguments to see if the hook\n * expects a `done` callback. If true, the transition's end\n * will be determined by when the user calls that callback;\n * otherwise, the end is determined by the CSS transition or\n * animation.\n *\n * @param {String} type\n */\n\np$1.callHookWithCb = function (type) {\n  var hook = this.hooks && this.hooks[type];\n  if (hook) {\n    if (hook.length > 1) {\n      this.pendingJsCb = cancellable(this[type + 'Done']);\n    }\n    hook.call(this.vm, this.el, this.pendingJsCb);\n  }\n};\n\n/**\n * Get an element's transition type based on the\n * calculated styles.\n *\n * @param {String} className\n * @return {Number}\n */\n\np$1.getCssTransitionType = function (className) {\n  /* istanbul ignore if */\n  if (!transitionEndEvent ||\n  // skip CSS transitions if page is not visible -\n  // this solves the issue of transitionend events not\n  // firing until the page is visible again.\n  // pageVisibility API is supported in IE10+, same as\n  // CSS transitions.\n  document.hidden ||\n  // explicit js-only transition\n  this.hooks && this.hooks.css === false ||\n  // element is hidden\n  isHidden(this.el)) {\n    return;\n  }\n  var type = this.type || this.typeCache[className];\n  if (type) return type;\n  var inlineStyles = this.el.style;\n  var computedStyles = window.getComputedStyle(this.el);\n  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n  if (transDuration && transDuration !== '0s') {\n    type = TYPE_TRANSITION;\n  } else {\n    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n    if (animDuration && animDuration !== '0s') {\n      type = TYPE_ANIMATION;\n    }\n  }\n  if (type) {\n    this.typeCache[className] = type;\n  }\n  return type;\n};\n\n/**\n * Setup a CSS transitionend/animationend callback.\n *\n * @param {String} event\n * @param {Function} cb\n */\n\np$1.setupCssCb = function (event, cb) {\n  this.pendingCssEvent = event;\n  var self = this;\n  var el = this.el;\n  var onEnd = this.pendingCssCb = function (e) {\n    if (e.target === el) {\n      off(el, event, onEnd);\n      self.pendingCssEvent = self.pendingCssCb = null;\n      if (!self.pendingJsCb && cb) {\n        cb();\n      }\n    }\n  };\n  on(el, event, onEnd);\n};\n\n/**\n * Check if an element is hidden - in that case we can just\n * skip the transition alltogether.\n *\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction isHidden(el) {\n  if (/svg$/.test(el.namespaceURI)) {\n    // SVG elements do not have offset(Width|Height)\n    // so we need to check the client rect\n    var rect = el.getBoundingClientRect();\n    return !(rect.width || rect.height);\n  } else {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n}\n\nvar transition$1 = {\n\n  priority: TRANSITION,\n\n  update: function update(id, oldId) {\n    var el = this.el;\n    // resolve on owner vm\n    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n    id = id || 'v';\n    oldId = oldId || 'v';\n    el.__v_trans = new Transition(el, id, hooks, this.vm);\n    removeClass(el, oldId + '-transition');\n    addClass(el, id + '-transition');\n  }\n};\n\nvar internalDirectives = {\n  style: style,\n  'class': vClass,\n  component: component,\n  prop: propDef,\n  transition: transition$1\n};\n\n// special binding prefixes\nvar bindRE = /^v-bind:|^:/;\nvar onRE = /^v-on:|^@/;\nvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\nvar modifierRE = /\\.[^\\.]+/g;\nvar transitionRE = /^(v-bind:|:)?transition$/;\n\n// default directive priority\nvar DEFAULT_PRIORITY = 1000;\nvar DEFAULT_TERMINAL_PRIORITY = 2000;\n\n/**\n * Compile a template and return a reusable composite link\n * function, which recursively contains more link functions\n * inside. This top level compile function would normally\n * be called on instance root nodes, but can also be used\n * for partial compilation if the partial argument is true.\n *\n * The returned composite link function, when called, will\n * return an unlink function that tearsdown all directives\n * created during the linking phase.\n *\n * @param {Element|DocumentFragment} el\n * @param {Object} options\n * @param {Boolean} partial\n * @return {Function}\n */\n\nfunction compile(el, options, partial) {\n  // link function for the node itself.\n  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n  // link function for the childNodes\n  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n  /**\n   * A composite linker function to be called on a already\n   * compiled piece of DOM, which instantiates all directive\n   * instances.\n   *\n   * @param {Vue} vm\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host] - host vm of transcluded content\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - link context fragment\n   * @return {Function|undefined}\n   */\n\n  return function compositeLinkFn(vm, el, host, scope, frag) {\n    // cache childNodes before linking parent, fix #657\n    var childNodes = toArray(el.childNodes);\n    // link\n    var dirs = linkAndCapture(function compositeLinkCapturer() {\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n    }, vm);\n    return makeUnlinkFn(vm, dirs);\n  };\n}\n\n/**\n * Apply a linker to a vm/element pair and capture the\n * directives created during the process.\n *\n * @param {Function} linker\n * @param {Vue} vm\n */\n\nfunction linkAndCapture(linker, vm) {\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV === 'production') {\n    // reset directives before every capture in production\n    // mode, so that when unlinking we don't need to splice\n    // them out (which turns out to be a perf hit).\n    // they are kept in development mode because they are\n    // useful for Vue's own tests.\n    vm._directives = [];\n  }\n  var originalDirCount = vm._directives.length;\n  linker();\n  var dirs = vm._directives.slice(originalDirCount);\n  sortDirectives(dirs);\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    dirs[i]._bind();\n  }\n  return dirs;\n}\n\n/**\n * sort directives by priority (stable sort)\n *\n * @param {Array} dirs\n */\nfunction sortDirectives(dirs) {\n  if (dirs.length === 0) return;\n\n  var groupedMap = {};\n  var i, j, k, l;\n  var index = 0;\n  var priorities = [];\n  for (i = 0, j = dirs.length; i < j; i++) {\n    var dir = dirs[i];\n    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;\n    var array = groupedMap[priority];\n    if (!array) {\n      array = groupedMap[priority] = [];\n      priorities.push(priority);\n    }\n    array.push(dir);\n  }\n\n  priorities.sort(function (a, b) {\n    return a > b ? -1 : a === b ? 0 : 1;\n  });\n  for (i = 0, j = priorities.length; i < j; i++) {\n    var group = groupedMap[priorities[i]];\n    for (k = 0, l = group.length; k < l; k++) {\n      dirs[index++] = group[k];\n    }\n  }\n}\n\n/**\n * Linker functions return an unlink function that\n * tearsdown all directives instances generated during\n * the process.\n *\n * We create unlink functions with only the necessary\n * information to avoid retaining additional closures.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Vue} [context]\n * @param {Array} [contextDirs]\n * @return {Function}\n */\n\nfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\n  function unlink(destroying) {\n    teardownDirs(vm, dirs, destroying);\n    if (context && contextDirs) {\n      teardownDirs(context, contextDirs);\n    }\n  }\n  // expose linked directives\n  unlink.dirs = dirs;\n  return unlink;\n}\n\n/**\n * Teardown partial linked directives.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Boolean} destroying\n */\n\nfunction teardownDirs(vm, dirs, destroying) {\n  var i = dirs.length;\n  while (i--) {\n    dirs[i]._teardown();\n    if (process.env.NODE_ENV !== 'production' && !destroying) {\n      vm._directives.$remove(dirs[i]);\n    }\n  }\n}\n\n/**\n * Compile link props on an instance.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} props\n * @param {Object} [scope]\n * @return {Function}\n */\n\nfunction compileAndLinkProps(vm, el, props, scope) {\n  var propsLinkFn = compileProps(el, props, vm);\n  var propDirs = linkAndCapture(function () {\n    propsLinkFn(vm, scope);\n  }, vm);\n  return makeUnlinkFn(vm, propDirs);\n}\n\n/**\n * Compile the root element of an instance.\n *\n * 1. attrs on context container (context scope)\n * 2. attrs on the component template root node, if\n *    replace:true (child scope)\n *\n * If this is a fragment instance, we only need to compile 1.\n *\n * @param {Element} el\n * @param {Object} options\n * @param {Object} contextOptions\n * @return {Function}\n */\n\nfunction compileRoot(el, options, contextOptions) {\n  var containerAttrs = options._containerAttrs;\n  var replacerAttrs = options._replacerAttrs;\n  var contextLinkFn, replacerLinkFn;\n\n  // only need to compile other attributes for\n  // non-fragment instances\n  if (el.nodeType !== 11) {\n    // for components, container and replacer need to be\n    // compiled separately and linked in different scopes.\n    if (options._asComponent) {\n      // 2. container attributes\n      if (containerAttrs && contextOptions) {\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n      }\n      if (replacerAttrs) {\n        // 3. replacer attributes\n        replacerLinkFn = compileDirectives(replacerAttrs, options);\n      }\n    } else {\n      // non-component, just compile as a normal element.\n      replacerLinkFn = compileDirectives(el.attributes, options);\n    }\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\n    // warn container directives for fragment instances\n    var names = containerAttrs.filter(function (attr) {\n      // allow vue-loader/vueify scoped css attributes\n      return attr.name.indexOf('_v-') < 0 &&\n      // allow event listeners\n      !onRE.test(attr.name) &&\n      // allow slots\n      attr.name !== 'slot';\n    }).map(function (attr) {\n      return '\"' + attr.name + '\"';\n    });\n    if (names.length) {\n      var plural = names.length > 1;\n\n      var componentName = options.el.tagName.toLowerCase();\n      if (componentName === 'component' && options.name) {\n        componentName += ':' + options.name;\n      }\n\n      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\n    }\n  }\n\n  options._containerAttrs = options._replacerAttrs = null;\n  return function rootLinkFn(vm, el, scope) {\n    // link context scope dirs\n    var context = vm._context;\n    var contextDirs;\n    if (context && contextLinkFn) {\n      contextDirs = linkAndCapture(function () {\n        contextLinkFn(context, el, null, scope);\n      }, context);\n    }\n\n    // link self\n    var selfDirs = linkAndCapture(function () {\n      if (replacerLinkFn) replacerLinkFn(vm, el);\n    }, vm);\n\n    // return the unlink function that tearsdown context\n    // container directives.\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n  };\n}\n\n/**\n * Compile a node and return a nodeLinkFn based on the\n * node type.\n *\n * @param {Node} node\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileNode(node, options) {\n  var type = node.nodeType;\n  if (type === 1 && !isScript(node)) {\n    return compileElement(node, options);\n  } else if (type === 3 && node.data.trim()) {\n    return compileTextNode(node, options);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Compile an element and return a nodeLinkFn.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileElement(el, options) {\n  // preprocess textareas.\n  // textarea treats its text content as the initial value.\n  // just bind it as an attr directive for value.\n  if (el.tagName === 'TEXTAREA') {\n    // a textarea which has v-pre attr should skip complie.\n    if (getAttr(el, 'v-pre') !== null) {\n      return skip;\n    }\n    var tokens = parseText(el.value);\n    if (tokens) {\n      el.setAttribute(':value', tokensToExp(tokens));\n      el.value = '';\n    }\n  }\n  var linkFn;\n  var hasAttrs = el.hasAttributes();\n  var attrs = hasAttrs && toArray(el.attributes);\n  // check terminal directives (for & if)\n  if (hasAttrs) {\n    linkFn = checkTerminalDirectives(el, attrs, options);\n  }\n  // check element directives\n  if (!linkFn) {\n    linkFn = checkElementDirectives(el, options);\n  }\n  // check component\n  if (!linkFn) {\n    linkFn = checkComponent(el, options);\n  }\n  // normal directives\n  if (!linkFn && hasAttrs) {\n    linkFn = compileDirectives(attrs, options);\n  }\n  return linkFn;\n}\n\n/**\n * Compile a textNode and return a nodeLinkFn.\n *\n * @param {TextNode} node\n * @param {Object} options\n * @return {Function|null} textNodeLinkFn\n */\n\nfunction compileTextNode(node, options) {\n  // skip marked text nodes\n  if (node._skip) {\n    return removeText;\n  }\n\n  var tokens = parseText(node.wholeText);\n  if (!tokens) {\n    return null;\n  }\n\n  // mark adjacent text nodes as skipped,\n  // because we are using node.wholeText to compile\n  // all adjacent text nodes together. This fixes\n  // issues in IE where sometimes it splits up a single\n  // text node into multiple ones.\n  var next = node.nextSibling;\n  while (next && next.nodeType === 3) {\n    next._skip = true;\n    next = next.nextSibling;\n  }\n\n  var frag = document.createDocumentFragment();\n  var el, token;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n    frag.appendChild(el);\n  }\n  return makeTextNodeLinkFn(tokens, frag, options);\n}\n\n/**\n * Linker for an skipped text node.\n *\n * @param {Vue} vm\n * @param {Text} node\n */\n\nfunction removeText(vm, node) {\n  remove(node);\n}\n\n/**\n * Process a single text token.\n *\n * @param {Object} token\n * @param {Object} options\n * @return {Node}\n */\n\nfunction processTextToken(token, options) {\n  var el;\n  if (token.oneTime) {\n    el = document.createTextNode(token.value);\n  } else {\n    if (token.html) {\n      el = document.createComment('v-html');\n      setTokenType('html');\n    } else {\n      // IE will clean up empty textNodes during\n      // frag.cloneNode(true), so we have to give it\n      // something here...\n      el = document.createTextNode(' ');\n      setTokenType('text');\n    }\n  }\n  function setTokenType(type) {\n    if (token.descriptor) return;\n    var parsed = parseDirective(token.value);\n    token.descriptor = {\n      name: type,\n      def: directives[type],\n      expression: parsed.expression,\n      filters: parsed.filters\n    };\n  }\n  return el;\n}\n\n/**\n * Build a function that processes a textNode.\n *\n * @param {Array<Object>} tokens\n * @param {DocumentFragment} frag\n */\n\nfunction makeTextNodeLinkFn(tokens, frag) {\n  return function textNodeLinkFn(vm, el, host, scope) {\n    var fragClone = frag.cloneNode(true);\n    var childNodes = toArray(fragClone.childNodes);\n    var token, value, node;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      value = token.value;\n      if (token.tag) {\n        node = childNodes[i];\n        if (token.oneTime) {\n          value = (scope || vm).$eval(value);\n          if (token.html) {\n            replace(node, parseTemplate(value, true));\n          } else {\n            node.data = _toString(value);\n          }\n        } else {\n          vm._bindDir(token.descriptor, node, host, scope);\n        }\n      }\n    }\n    replace(el, fragClone);\n  };\n}\n\n/**\n * Compile a node list and return a childLinkFn.\n *\n * @param {NodeList} nodeList\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction compileNodeList(nodeList, options) {\n  var linkFns = [];\n  var nodeLinkFn, childLinkFn, node;\n  for (var i = 0, l = nodeList.length; i < l; i++) {\n    node = nodeList[i];\n    nodeLinkFn = compileNode(node, options);\n    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n    linkFns.push(nodeLinkFn, childLinkFn);\n  }\n  return linkFns.length ? makeChildLinkFn(linkFns) : null;\n}\n\n/**\n * Make a child link function for a node's childNodes.\n *\n * @param {Array<Function>} linkFns\n * @return {Function} childLinkFn\n */\n\nfunction makeChildLinkFn(linkFns) {\n  return function childLinkFn(vm, nodes, host, scope, frag) {\n    var node, nodeLinkFn, childrenLinkFn;\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n      node = nodes[n];\n      nodeLinkFn = linkFns[i++];\n      childrenLinkFn = linkFns[i++];\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(node.childNodes);\n      if (nodeLinkFn) {\n        nodeLinkFn(vm, node, host, scope, frag);\n      }\n      if (childrenLinkFn) {\n        childrenLinkFn(vm, childNodes, host, scope, frag);\n      }\n    }\n  };\n}\n\n/**\n * Check for element directives (custom elements that should\n * be resovled as terminal directives).\n *\n * @param {Element} el\n * @param {Object} options\n */\n\nfunction checkElementDirectives(el, options) {\n  var tag = el.tagName.toLowerCase();\n  if (commonTagRE.test(tag)) {\n    return;\n  }\n  var def = resolveAsset(options, 'elementDirectives', tag);\n  if (def) {\n    return makeTerminalNodeLinkFn(el, tag, '', options, def);\n  }\n}\n\n/**\n * Check if an element is a component. If yes, return\n * a component link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction checkComponent(el, options) {\n  var component = checkComponentAttr(el, options);\n  if (component) {\n    var ref = findRef(el);\n    var descriptor = {\n      name: 'component',\n      ref: ref,\n      expression: component.id,\n      def: internalDirectives.component,\n      modifiers: {\n        literal: !component.dynamic\n      }\n    };\n    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n      if (ref) {\n        defineReactive((scope || vm).$refs, ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    componentLinkFn.terminal = true;\n    return componentLinkFn;\n  }\n}\n\n/**\n * Check an element for terminal directives in fixed order.\n * If it finds one, return a terminal link function.\n *\n * @param {Element} el\n * @param {Array} attrs\n * @param {Object} options\n * @return {Function} terminalLinkFn\n */\n\nfunction checkTerminalDirectives(el, attrs, options) {\n  // skip v-pre\n  if (getAttr(el, 'v-pre') !== null) {\n    return skip;\n  }\n  // skip v-else block, but only if following v-if\n  if (el.hasAttribute('v-else')) {\n    var prev = el.previousElementSibling;\n    if (prev && prev.hasAttribute('v-if')) {\n      return skip;\n    }\n  }\n\n  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\n  for (var i = 0, j = attrs.length; i < j; i++) {\n    attr = attrs[i];\n    name = attr.name.replace(modifierRE, '');\n    if (matched = name.match(dirAttrRE)) {\n      def = resolveAsset(options, 'directives', matched[1]);\n      if (def && def.terminal) {\n        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\n          termDef = def;\n          rawName = attr.name;\n          modifiers = parseModifiers(attr.name);\n          value = attr.value;\n          dirName = matched[1];\n          arg = matched[2];\n        }\n      }\n    }\n  }\n\n  if (termDef) {\n    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\n  }\n}\n\nfunction skip() {}\nskip.terminal = true;\n\n/**\n * Build a node link function for a terminal directive.\n * A terminal link function terminates the current\n * compilation recursion and handles compilation of the\n * subtree in the directive.\n *\n * @param {Element} el\n * @param {String} dirName\n * @param {String} value\n * @param {Object} options\n * @param {Object} def\n * @param {String} [rawName]\n * @param {String} [arg]\n * @param {Object} [modifiers]\n * @return {Function} terminalLinkFn\n */\n\nfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\n  var parsed = parseDirective(value);\n  var descriptor = {\n    name: dirName,\n    arg: arg,\n    expression: parsed.expression,\n    filters: parsed.filters,\n    raw: value,\n    attr: rawName,\n    modifiers: modifiers,\n    def: def\n  };\n  // check ref for v-for, v-if and router-view\n  if (dirName === 'for' || dirName === 'router-view') {\n    descriptor.ref = findRef(el);\n  }\n  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n    if (descriptor.ref) {\n      defineReactive((scope || vm).$refs, descriptor.ref, null);\n    }\n    vm._bindDir(descriptor, el, host, scope, frag);\n  };\n  fn.terminal = true;\n  return fn;\n}\n\n/**\n * Compile the directives on an element and return a linker.\n *\n * @param {Array|NamedNodeMap} attrs\n * @param {Object} options\n * @return {Function}\n */\n\nfunction compileDirectives(attrs, options) {\n  var i = attrs.length;\n  var dirs = [];\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\n  while (i--) {\n    attr = attrs[i];\n    name = rawName = attr.name;\n    value = rawValue = attr.value;\n    tokens = parseText(value);\n    // reset arg\n    arg = null;\n    // check modifiers\n    modifiers = parseModifiers(name);\n    name = name.replace(modifierRE, '');\n\n    // attribute interpolations\n    if (tokens) {\n      value = tokensToExp(tokens);\n      arg = name;\n      pushDir('bind', directives.bind, tokens);\n      // warn against mixing mustaches with v-bind\n      if (process.env.NODE_ENV !== 'production') {\n        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n          return attr.name === ':class' || attr.name === 'v-bind:class';\n        })) {\n          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\n        }\n      }\n    } else\n\n      // special attribute: transition\n      if (transitionRE.test(name)) {\n        modifiers.literal = !bindRE.test(name);\n        pushDir('transition', internalDirectives.transition);\n      } else\n\n        // event handlers\n        if (onRE.test(name)) {\n          arg = name.replace(onRE, '');\n          pushDir('on', directives.on);\n        } else\n\n          // attribute bindings\n          if (bindRE.test(name)) {\n            dirName = name.replace(bindRE, '');\n            if (dirName === 'style' || dirName === 'class') {\n              pushDir(dirName, internalDirectives[dirName]);\n            } else {\n              arg = dirName;\n              pushDir('bind', directives.bind);\n            }\n          } else\n\n            // normal directives\n            if (matched = name.match(dirAttrRE)) {\n              dirName = matched[1];\n              arg = matched[2];\n\n              // skip v-else (when used with v-show)\n              if (dirName === 'else') {\n                continue;\n              }\n\n              dirDef = resolveAsset(options, 'directives', dirName, true);\n              if (dirDef) {\n                pushDir(dirName, dirDef);\n              }\n            }\n  }\n\n  /**\n   * Push a directive.\n   *\n   * @param {String} dirName\n   * @param {Object|Function} def\n   * @param {Array} [interpTokens]\n   */\n\n  function pushDir(dirName, def, interpTokens) {\n    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\n    var parsed = !hasOneTimeToken && parseDirective(value);\n    dirs.push({\n      name: dirName,\n      attr: rawName,\n      raw: rawValue,\n      def: def,\n      arg: arg,\n      modifiers: modifiers,\n      // conversion from interpolation strings with one-time token\n      // to expression is differed until directive bind time so that we\n      // have access to the actual vm context for one-time bindings.\n      expression: parsed && parsed.expression,\n      filters: parsed && parsed.filters,\n      interp: interpTokens,\n      hasOneTime: hasOneTimeToken\n    });\n  }\n\n  if (dirs.length) {\n    return makeNodeLinkFn(dirs);\n  }\n}\n\n/**\n * Parse modifiers from directive attribute name.\n *\n * @param {String} name\n * @return {Object}\n */\n\nfunction parseModifiers(name) {\n  var res = Object.create(null);\n  var match = name.match(modifierRE);\n  if (match) {\n    var i = match.length;\n    while (i--) {\n      res[match[i].slice(1)] = true;\n    }\n  }\n  return res;\n}\n\n/**\n * Build a link function for all directives on a single node.\n *\n * @param {Array} directives\n * @return {Function} directivesLinkFn\n */\n\nfunction makeNodeLinkFn(directives) {\n  return function nodeLinkFn(vm, el, host, scope, frag) {\n    // reverse apply because it's sorted low to high\n    var i = directives.length;\n    while (i--) {\n      vm._bindDir(directives[i], el, host, scope, frag);\n    }\n  };\n}\n\n/**\n * Check if an interpolation string contains one-time tokens.\n *\n * @param {Array} tokens\n * @return {Boolean}\n */\n\nfunction hasOneTime(tokens) {\n  var i = tokens.length;\n  while (i--) {\n    if (tokens[i].oneTime) return true;\n  }\n}\n\nfunction isScript(el) {\n  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\n}\n\nvar specialCharRE = /[^\\w\\-:\\.]/;\n\n/**\n * Process an element or a DocumentFragment based on a\n * instance option object. This allows us to transclude\n * a template node/fragment before the instance is created,\n * so the processed fragment can then be cloned and reused\n * in v-for.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transclude(el, options) {\n  // extract container attributes to pass them down\n  // to compiler, because they need to be compiled in\n  // parent scope. we are mutating the options object here\n  // assuming the same object will be used for compile\n  // right after this.\n  if (options) {\n    options._containerAttrs = extractAttrs(el);\n  }\n  // for template tags, what we want is its content as\n  // a documentFragment (for fragment instances)\n  if (isTemplate(el)) {\n    el = parseTemplate(el);\n  }\n  if (options) {\n    if (options._asComponent && !options.template) {\n      options.template = '<slot></slot>';\n    }\n    if (options.template) {\n      options._content = extractContent(el);\n      el = transcludeTemplate(el, options);\n    }\n  }\n  if (isFragment(el)) {\n    // anchors for fragment instance\n    // passing in `persist: true` to avoid them being\n    // discarded by IE during template cloning\n    prepend(createAnchor('v-start', true), el);\n    el.appendChild(createAnchor('v-end', true));\n  }\n  return el;\n}\n\n/**\n * Process the template option.\n * If the replace option is true this will swap the $el.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transcludeTemplate(el, options) {\n  var template = options.template;\n  var frag = parseTemplate(template, true);\n  if (frag) {\n    var replacer = frag.firstChild;\n    if (!replacer) {\n      return frag;\n    }\n    var tag = replacer.tagName && replacer.tagName.toLowerCase();\n    if (options.replace) {\n      /* istanbul ignore if */\n      if (el === document.body) {\n        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n      }\n      // there are many cases where the instance must\n      // become a fragment instance: basically anything that\n      // can create more than 1 root nodes.\n      if (\n      // multi-children template\n      frag.childNodes.length > 1 ||\n      // non-element template\n      replacer.nodeType !== 1 ||\n      // single nested component\n      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\n      // element directive\n      resolveAsset(options, 'elementDirectives', tag) ||\n      // for block\n      replacer.hasAttribute('v-for') ||\n      // if block\n      replacer.hasAttribute('v-if')) {\n        return frag;\n      } else {\n        options._replacerAttrs = extractAttrs(replacer);\n        mergeAttrs(el, replacer);\n        return replacer;\n      }\n    } else {\n      el.appendChild(frag);\n      return el;\n    }\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);\n  }\n}\n\n/**\n * Helper to extract a component container's attributes\n * into a plain object array.\n *\n * @param {Element} el\n * @return {Array}\n */\n\nfunction extractAttrs(el) {\n  if (el.nodeType === 1 && el.hasAttributes()) {\n    return toArray(el.attributes);\n  }\n}\n\n/**\n * Merge the attributes of two elements, and make sure\n * the class names are merged properly.\n *\n * @param {Element} from\n * @param {Element} to\n */\n\nfunction mergeAttrs(from, to) {\n  var attrs = from.attributes;\n  var i = attrs.length;\n  var name, value;\n  while (i--) {\n    name = attrs[i].name;\n    value = attrs[i].value;\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n      to.setAttribute(name, value);\n    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\n      value.split(/\\s+/).forEach(function (cls) {\n        addClass(to, cls);\n      });\n    }\n  }\n}\n\n/**\n * Scan and determine slot content distribution.\n * We do this during transclusion instead at compile time so that\n * the distribution is decoupled from the compilation order of\n * the slots.\n *\n * @param {Element|DocumentFragment} template\n * @param {Element} content\n * @param {Vue} vm\n */\n\nfunction resolveSlots(vm, content) {\n  if (!content) {\n    return;\n  }\n  var contents = vm._slotContents = Object.create(null);\n  var el, name;\n  for (var i = 0, l = content.children.length; i < l; i++) {\n    el = content.children[i];\n    /* eslint-disable no-cond-assign */\n    if (name = el.getAttribute('slot')) {\n      (contents[name] || (contents[name] = [])).push(el);\n    }\n    /* eslint-enable no-cond-assign */\n    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {\n      warn('The \"slot\" attribute must be static.', vm.$parent);\n    }\n  }\n  for (name in contents) {\n    contents[name] = extractFragment(contents[name], content);\n  }\n  if (content.hasChildNodes()) {\n    var nodes = content.childNodes;\n    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\n      return;\n    }\n    contents['default'] = extractFragment(content.childNodes, content);\n  }\n}\n\n/**\n * Extract qualified content nodes from a node list.\n *\n * @param {NodeList} nodes\n * @return {DocumentFragment}\n */\n\nfunction extractFragment(nodes, parent) {\n  var frag = document.createDocumentFragment();\n  nodes = toArray(nodes);\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    var node = nodes[i];\n    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n      parent.removeChild(node);\n      node = parseTemplate(node, true);\n    }\n    frag.appendChild(node);\n  }\n  return frag;\n}\n\n\n\nvar compiler = Object.freeze({\n\tcompile: compile,\n\tcompileAndLinkProps: compileAndLinkProps,\n\tcompileRoot: compileRoot,\n\ttransclude: transclude,\n\tresolveSlots: resolveSlots\n});\n\nfunction stateMixin (Vue) {\n  /**\n   * Accessor for `$data` property, since setting $data\n   * requires observing the new object and updating\n   * proxied properties.\n   */\n\n  Object.defineProperty(Vue.prototype, '$data', {\n    get: function get() {\n      return this._data;\n    },\n    set: function set(newData) {\n      if (newData !== this._data) {\n        this._setData(newData);\n      }\n    }\n  });\n\n  /**\n   * Setup the scope of an instance, which contains:\n   * - observed data\n   * - computed properties\n   * - user methods\n   * - meta properties\n   */\n\n  Vue.prototype._initState = function () {\n    this._initProps();\n    this._initMeta();\n    this._initMethods();\n    this._initData();\n    this._initComputed();\n  };\n\n  /**\n   * Initialize props.\n   */\n\n  Vue.prototype._initProps = function () {\n    var options = this.$options;\n    var el = options.el;\n    var props = options.props;\n    if (props && !el) {\n      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\n    }\n    // make sure to convert string selectors into element now\n    el = options.el = query(el);\n    this._propsUnlinkFn = el && el.nodeType === 1 && props\n    // props must be linked in proper scope if inside v-for\n    ? compileAndLinkProps(this, el, props, this._scope) : null;\n  };\n\n  /**\n   * Initialize the data.\n   */\n\n  Vue.prototype._initData = function () {\n    var dataFn = this.$options.data;\n    var data = this._data = dataFn ? dataFn() : {};\n    if (!isPlainObject(data)) {\n      data = {};\n      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);\n    }\n    var props = this._props;\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var i, key;\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      // there are two scenarios where we can proxy a data key:\n      // 1. it's not already defined as a prop\n      // 2. it's provided via a instantiation option AND there are no\n      //    template prop present\n      if (!props || !hasOwn(props, key)) {\n        this._proxy(key);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\n      }\n    }\n    // observe data\n    observe(data, this);\n  };\n\n  /**\n   * Swap the instance's $data. Called in $data's setter.\n   *\n   * @param {Object} newData\n   */\n\n  Vue.prototype._setData = function (newData) {\n    newData = newData || {};\n    var oldData = this._data;\n    this._data = newData;\n    var keys, key, i;\n    // unproxy keys not present in new data\n    keys = Object.keys(oldData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!(key in newData)) {\n        this._unproxy(key);\n      }\n    }\n    // proxy keys not already proxied,\n    // and trigger change for changed values\n    keys = Object.keys(newData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!hasOwn(this, key)) {\n        // new property\n        this._proxy(key);\n      }\n    }\n    oldData.__ob__.removeVm(this);\n    observe(newData, this);\n    this._digest();\n  };\n\n  /**\n   * Proxy a property, so that\n   * vm.prop === vm._data.prop\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._proxy = function (key) {\n    if (!isReserved(key)) {\n      // need to store ref to self here\n      // because these getter/setters might\n      // be called by child scopes via\n      // prototype inheritance.\n      var self = this;\n      Object.defineProperty(self, key, {\n        configurable: true,\n        enumerable: true,\n        get: function proxyGetter() {\n          return self._data[key];\n        },\n        set: function proxySetter(val) {\n          self._data[key] = val;\n        }\n      });\n    }\n  };\n\n  /**\n   * Unproxy a property.\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._unproxy = function (key) {\n    if (!isReserved(key)) {\n      delete this[key];\n    }\n  };\n\n  /**\n   * Force update on every watcher in scope.\n   */\n\n  Vue.prototype._digest = function () {\n    for (var i = 0, l = this._watchers.length; i < l; i++) {\n      this._watchers[i].update(true); // shallow updates\n    }\n  };\n\n  /**\n   * Setup computed properties. They are essentially\n   * special getter/setters\n   */\n\n  function noop() {}\n  Vue.prototype._initComputed = function () {\n    var computed = this.$options.computed;\n    if (computed) {\n      for (var key in computed) {\n        var userDef = computed[key];\n        var def = {\n          enumerable: true,\n          configurable: true\n        };\n        if (typeof userDef === 'function') {\n          def.get = makeComputedGetter(userDef, this);\n          def.set = noop;\n        } else {\n          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\n          def.set = userDef.set ? bind(userDef.set, this) : noop;\n        }\n        Object.defineProperty(this, key, def);\n      }\n    }\n  };\n\n  function makeComputedGetter(getter, owner) {\n    var watcher = new Watcher(owner, getter, null, {\n      lazy: true\n    });\n    return function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n  }\n\n  /**\n   * Setup instance methods. Methods must be bound to the\n   * instance since they might be passed down as a prop to\n   * child components.\n   */\n\n  Vue.prototype._initMethods = function () {\n    var methods = this.$options.methods;\n    if (methods) {\n      for (var key in methods) {\n        this[key] = bind(methods[key], this);\n      }\n    }\n  };\n\n  /**\n   * Initialize meta information like $index, $key & $value.\n   */\n\n  Vue.prototype._initMeta = function () {\n    var metas = this.$options._meta;\n    if (metas) {\n      for (var key in metas) {\n        defineReactive(this, key, metas[key]);\n      }\n    }\n  };\n}\n\nvar eventRE = /^v-on:|^@/;\n\nfunction eventsMixin (Vue) {\n  /**\n   * Setup the instance's option events & watchers.\n   * If the value is a string, we pull it from the\n   * instance's methods by name.\n   */\n\n  Vue.prototype._initEvents = function () {\n    var options = this.$options;\n    if (options._asComponent) {\n      registerComponentEvents(this, options.el);\n    }\n    registerCallbacks(this, '$on', options.events);\n    registerCallbacks(this, '$watch', options.watch);\n  };\n\n  /**\n   * Register v-on events on a child component\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   */\n\n  function registerComponentEvents(vm, el) {\n    var attrs = el.attributes;\n    var name, value, handler;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      name = attrs[i].name;\n      if (eventRE.test(name)) {\n        name = name.replace(eventRE, '');\n        // force the expression into a statement so that\n        // it always dynamically resolves the method to call (#2670)\n        // kinda ugly hack, but does the job.\n        value = attrs[i].value;\n        if (isSimplePath(value)) {\n          value += '.apply(this, $arguments)';\n        }\n        handler = (vm._scope || vm._context).$eval(value, true);\n        handler._fromParent = true;\n        vm.$on(name.replace(eventRE), handler);\n      }\n    }\n  }\n\n  /**\n   * Register callbacks for option events and watchers.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {Object} hash\n   */\n\n  function registerCallbacks(vm, action, hash) {\n    if (!hash) return;\n    var handlers, key, i, j;\n    for (key in hash) {\n      handlers = hash[key];\n      if (isArray(handlers)) {\n        for (i = 0, j = handlers.length; i < j; i++) {\n          register(vm, action, key, handlers[i]);\n        }\n      } else {\n        register(vm, action, key, handlers);\n      }\n    }\n  }\n\n  /**\n   * Helper to register an event/watch callback.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {String} key\n   * @param {Function|String|Object} handler\n   * @param {Object} [options]\n   */\n\n  function register(vm, action, key, handler, options) {\n    var type = typeof handler;\n    if (type === 'function') {\n      vm[action](key, handler, options);\n    } else if (type === 'string') {\n      var methods = vm.$options.methods;\n      var method = methods && methods[handler];\n      if (method) {\n        vm[action](key, method, options);\n      } else {\n        process.env.NODE_ENV !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\n      }\n    } else if (handler && type === 'object') {\n      register(vm, action, key, handler.handler, handler);\n    }\n  }\n\n  /**\n   * Setup recursive attached/detached calls\n   */\n\n  Vue.prototype._initDOMHooks = function () {\n    this.$on('hook:attached', onAttached);\n    this.$on('hook:detached', onDetached);\n  };\n\n  /**\n   * Callback to recursively call attached hook on children\n   */\n\n  function onAttached() {\n    if (!this._isAttached) {\n      this._isAttached = true;\n      this.$children.forEach(callAttach);\n    }\n  }\n\n  /**\n   * Iterator to call attached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callAttach(child) {\n    if (!child._isAttached && inDoc(child.$el)) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Callback to recursively call detached hook on children\n   */\n\n  function onDetached() {\n    if (this._isAttached) {\n      this._isAttached = false;\n      this.$children.forEach(callDetach);\n    }\n  }\n\n  /**\n   * Iterator to call detached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callDetach(child) {\n    if (child._isAttached && !inDoc(child.$el)) {\n      child._callHook('detached');\n    }\n  }\n\n  /**\n   * Trigger all handlers for a hook\n   *\n   * @param {String} hook\n   */\n\n  Vue.prototype._callHook = function (hook) {\n    this.$emit('pre-hook:' + hook);\n    var handlers = this.$options[hook];\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        handlers[i].call(this);\n      }\n    }\n    this.$emit('hook:' + hook);\n  };\n}\n\nfunction noop$1() {}\n\n/**\n * A directive links a DOM element with a piece of data,\n * which is the result of evaluating an expression.\n * It registers a watcher with the expression and calls\n * the DOM update function when a change is triggered.\n *\n * @param {Object} descriptor\n *                 - {String} name\n *                 - {Object} def\n *                 - {String} expression\n *                 - {Array<Object>} [filters]\n *                 - {Object} [modifiers]\n *                 - {Boolean} literal\n *                 - {String} attr\n *                 - {String} arg\n *                 - {String} raw\n *                 - {String} [ref]\n *                 - {Array<Object>} [interp]\n *                 - {Boolean} [hasOneTime]\n * @param {Vue} vm\n * @param {Node} el\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n * @constructor\n */\nfunction Directive(descriptor, vm, el, host, scope, frag) {\n  this.vm = vm;\n  this.el = el;\n  // copy descriptor properties\n  this.descriptor = descriptor;\n  this.name = descriptor.name;\n  this.expression = descriptor.expression;\n  this.arg = descriptor.arg;\n  this.modifiers = descriptor.modifiers;\n  this.filters = descriptor.filters;\n  this.literal = this.modifiers && this.modifiers.literal;\n  // private\n  this._locked = false;\n  this._bound = false;\n  this._listeners = null;\n  // link context\n  this._host = host;\n  this._scope = scope;\n  this._frag = frag;\n  // store directives on node in dev mode\n  if (process.env.NODE_ENV !== 'production' && this.el) {\n    this.el._vue_directives = this.el._vue_directives || [];\n    this.el._vue_directives.push(this);\n  }\n}\n\n/**\n * Initialize the directive, mixin definition properties,\n * setup the watcher, call definition bind() and update()\n * if present.\n */\n\nDirective.prototype._bind = function () {\n  var name = this.name;\n  var descriptor = this.descriptor;\n\n  // remove attribute\n  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n    var attr = descriptor.attr || 'v-' + name;\n    this.el.removeAttribute(attr);\n  }\n\n  // copy def properties\n  var def = descriptor.def;\n  if (typeof def === 'function') {\n    this.update = def;\n  } else {\n    extend(this, def);\n  }\n\n  // setup directive params\n  this._setupParams();\n\n  // initial bind\n  if (this.bind) {\n    this.bind();\n  }\n  this._bound = true;\n\n  if (this.literal) {\n    this.update && this.update(descriptor.raw);\n  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n    // wrapped updater for context\n    var dir = this;\n    if (this.update) {\n      this._update = function (val, oldVal) {\n        if (!dir._locked) {\n          dir.update(val, oldVal);\n        }\n      };\n    } else {\n      this._update = noop$1;\n    }\n    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\n    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\n    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n    {\n      filters: this.filters,\n      twoWay: this.twoWay,\n      deep: this.deep,\n      preProcess: preProcess,\n      postProcess: postProcess,\n      scope: this._scope\n    });\n    // v-model with inital inline value need to sync back to\n    // model instead of update to DOM on init. They would\n    // set the afterBind hook to indicate that.\n    if (this.afterBind) {\n      this.afterBind();\n    } else if (this.update) {\n      this.update(watcher.value);\n    }\n  }\n};\n\n/**\n * Setup all param attributes, e.g. track-by,\n * transition-mode, etc...\n */\n\nDirective.prototype._setupParams = function () {\n  if (!this.params) {\n    return;\n  }\n  var params = this.params;\n  // swap the params array with a fresh object.\n  this.params = Object.create(null);\n  var i = params.length;\n  var key, val, mappedKey;\n  while (i--) {\n    key = hyphenate(params[i]);\n    mappedKey = camelize(key);\n    val = getBindAttr(this.el, key);\n    if (val != null) {\n      // dynamic\n      this._setupParamWatcher(mappedKey, val);\n    } else {\n      // static\n      val = getAttr(this.el, key);\n      if (val != null) {\n        this.params[mappedKey] = val === '' ? true : val;\n      }\n    }\n  }\n};\n\n/**\n * Setup a watcher for a dynamic param.\n *\n * @param {String} key\n * @param {String} expression\n */\n\nDirective.prototype._setupParamWatcher = function (key, expression) {\n  var self = this;\n  var called = false;\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n    self.params[key] = val;\n    // since we are in immediate mode,\n    // only call the param change callbacks if this is not the first update.\n    if (called) {\n      var cb = self.paramWatchers && self.paramWatchers[key];\n      if (cb) {\n        cb.call(self, val, oldVal);\n      }\n    } else {\n      called = true;\n    }\n  }, {\n    immediate: true,\n    user: false\n  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n};\n\n/**\n * Check if the directive is a function caller\n * and if the expression is a callable one. If both true,\n * we wrap up the expression and use it as the event\n * handler.\n *\n * e.g. on-click=\"a++\"\n *\n * @return {Boolean}\n */\n\nDirective.prototype._checkStatement = function () {\n  var expression = this.expression;\n  if (expression && this.acceptStatement && !isSimplePath(expression)) {\n    var fn = parseExpression$1(expression).get;\n    var scope = this._scope || this.vm;\n    var handler = function handler(e) {\n      scope.$event = e;\n      fn.call(scope, scope);\n      scope.$event = null;\n    };\n    if (this.filters) {\n      handler = scope._applyFilters(handler, null, this.filters);\n    }\n    this.update(handler);\n    return true;\n  }\n};\n\n/**\n * Set the corresponding value with the setter.\n * This should only be used in two-way directives\n * e.g. v-model.\n *\n * @param {*} value\n * @public\n */\n\nDirective.prototype.set = function (value) {\n  /* istanbul ignore else */\n  if (this.twoWay) {\n    this._withLock(function () {\n      this._watcher.set(value);\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn('Directive.set() can only be used inside twoWay' + 'directives.');\n  }\n};\n\n/**\n * Execute a function while preventing that function from\n * triggering updates on this directive instance.\n *\n * @param {Function} fn\n */\n\nDirective.prototype._withLock = function (fn) {\n  var self = this;\n  self._locked = true;\n  fn.call(self);\n  nextTick(function () {\n    self._locked = false;\n  });\n};\n\n/**\n * Convenience method that attaches a DOM event listener\n * to the directive element and autometically tears it down\n * during unbind.\n *\n * @param {String} event\n * @param {Function} handler\n * @param {Boolean} [useCapture]\n */\n\nDirective.prototype.on = function (event, handler, useCapture) {\n  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\n};\n\n/**\n * Teardown the watcher and call unbind.\n */\n\nDirective.prototype._teardown = function () {\n  if (this._bound) {\n    this._bound = false;\n    if (this.unbind) {\n      this.unbind();\n    }\n    if (this._watcher) {\n      this._watcher.teardown();\n    }\n    var listeners = this._listeners;\n    var i;\n    if (listeners) {\n      i = listeners.length;\n      while (i--) {\n        off(this.el, listeners[i][0], listeners[i][1]);\n      }\n    }\n    var unwatchFns = this._paramUnwatchFns;\n    if (unwatchFns) {\n      i = unwatchFns.length;\n      while (i--) {\n        unwatchFns[i]();\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' && this.el) {\n      this.el._vue_directives.$remove(this);\n    }\n    this.vm = this.el = this._watcher = this._listeners = null;\n  }\n};\n\nfunction lifecycleMixin (Vue) {\n  /**\n   * Update v-ref for component.\n   *\n   * @param {Boolean} remove\n   */\n\n  Vue.prototype._updateRef = function (remove) {\n    var ref = this.$options._ref;\n    if (ref) {\n      var refs = (this._scope || this._context).$refs;\n      if (remove) {\n        if (refs[ref] === this) {\n          refs[ref] = null;\n        }\n      } else {\n        refs[ref] = this;\n      }\n    }\n  };\n\n  /**\n   * Transclude, compile and link element.\n   *\n   * If a pre-compiled linker is available, that means the\n   * passed in element will be pre-transcluded and compiled\n   * as well - all we need to do is to call the linker.\n   *\n   * Otherwise we need to call transclude/compile/link here.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._compile = function (el) {\n    var options = this.$options;\n\n    // transclude and init element\n    // transclude can potentially replace original\n    // so we need to keep reference; this step also injects\n    // the template and caches the original attributes\n    // on the container node and replacer node.\n    var original = el;\n    el = transclude(el, options);\n    this._initElement(el);\n\n    // handle v-pre on root node (#2026)\n    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\n      return;\n    }\n\n    // root is always compiled per-instance, because\n    // container attrs and props can be different every time.\n    var contextOptions = this._context && this._context.$options;\n    var rootLinker = compileRoot(el, options, contextOptions);\n\n    // resolve slot distribution\n    resolveSlots(this, options._content);\n\n    // compile and link the rest\n    var contentLinkFn;\n    var ctor = this.constructor;\n    // component compilation can be cached\n    // as long as it's not using inline-template\n    if (options._linkerCachable) {\n      contentLinkFn = ctor.linker;\n      if (!contentLinkFn) {\n        contentLinkFn = ctor.linker = compile(el, options);\n      }\n    }\n\n    // link phase\n    // make sure to link root with prop scope!\n    var rootUnlinkFn = rootLinker(this, el, this._scope);\n    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n    // register composite unlink function\n    // to be called during instance destruction\n    this._unlinkFn = function () {\n      rootUnlinkFn();\n      // passing destroying: true to avoid searching and\n      // splicing the directives\n      contentUnlinkFn(true);\n    };\n\n    // finally replace original\n    if (options.replace) {\n      replace(original, el);\n    }\n\n    this._isCompiled = true;\n    this._callHook('compiled');\n  };\n\n  /**\n   * Initialize instance element. Called in the public\n   * $mount() method.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._initElement = function (el) {\n    if (isFragment(el)) {\n      this._isFragment = true;\n      this.$el = this._fragmentStart = el.firstChild;\n      this._fragmentEnd = el.lastChild;\n      // set persisted text anchors to empty\n      if (this._fragmentStart.nodeType === 3) {\n        this._fragmentStart.data = this._fragmentEnd.data = '';\n      }\n      this._fragment = el;\n    } else {\n      this.$el = el;\n    }\n    this.$el.__vue__ = this;\n    this._callHook('beforeCompile');\n  };\n\n  /**\n   * Create and bind a directive to an element.\n   *\n   * @param {Object} descriptor - parsed directive descriptor\n   * @param {Node} node   - target node\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   */\n\n  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n  };\n\n  /**\n   * Teardown an instance, unobserves the data, unbind all the\n   * directives, turn off all the event listeners, etc.\n   *\n   * @param {Boolean} remove - whether to remove the DOM node.\n   * @param {Boolean} deferCleanup - if true, defer cleanup to\n   *                                 be called later\n   */\n\n  Vue.prototype._destroy = function (remove, deferCleanup) {\n    if (this._isBeingDestroyed) {\n      if (!deferCleanup) {\n        this._cleanup();\n      }\n      return;\n    }\n\n    var destroyReady;\n    var pendingRemoval;\n\n    var self = this;\n    // Cleanup should be called either synchronously or asynchronoysly as\n    // callback of this.$remove(), or if remove and deferCleanup are false.\n    // In any case it should be called after all other removing, unbinding and\n    // turning of is done\n    var cleanupIfPossible = function cleanupIfPossible() {\n      if (destroyReady && !pendingRemoval && !deferCleanup) {\n        self._cleanup();\n      }\n    };\n\n    // remove DOM element\n    if (remove && this.$el) {\n      pendingRemoval = true;\n      this.$remove(function () {\n        pendingRemoval = false;\n        cleanupIfPossible();\n      });\n    }\n\n    this._callHook('beforeDestroy');\n    this._isBeingDestroyed = true;\n    var i;\n    // remove self from parent. only necessary\n    // if parent is not being destroyed as well.\n    var parent = this.$parent;\n    if (parent && !parent._isBeingDestroyed) {\n      parent.$children.$remove(this);\n      // unregister ref (remove: true)\n      this._updateRef(true);\n    }\n    // destroy all children.\n    i = this.$children.length;\n    while (i--) {\n      this.$children[i].$destroy();\n    }\n    // teardown props\n    if (this._propsUnlinkFn) {\n      this._propsUnlinkFn();\n    }\n    // teardown all directives. this also tearsdown all\n    // directive-owned watchers.\n    if (this._unlinkFn) {\n      this._unlinkFn();\n    }\n    i = this._watchers.length;\n    while (i--) {\n      this._watchers[i].teardown();\n    }\n    // remove reference to self on $el\n    if (this.$el) {\n      this.$el.__vue__ = null;\n    }\n\n    destroyReady = true;\n    cleanupIfPossible();\n  };\n\n  /**\n   * Clean up to ensure garbage collection.\n   * This is called after the leave transition if there\n   * is any.\n   */\n\n  Vue.prototype._cleanup = function () {\n    if (this._isDestroyed) {\n      return;\n    }\n    // remove self from owner fragment\n    // do it in cleanup so that we can call $destroy with\n    // defer right when a fragment is about to be removed.\n    if (this._frag) {\n      this._frag.children.$remove(this);\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (this._data && this._data.__ob__) {\n      this._data.__ob__.removeVm(this);\n    }\n    // Clean up references to private properties and other\n    // instances. preserve reference to _data so that proxy\n    // accessors still work. The only potential side effect\n    // here is that mutating the instance after it's destroyed\n    // may affect the state of other components that are still\n    // observing the same object, but that seems to be a\n    // reasonable responsibility for the user rather than\n    // always throwing an error on them.\n    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n    // call the last hook...\n    this._isDestroyed = true;\n    this._callHook('destroyed');\n    // turn off all instance listeners.\n    this.$off();\n  };\n}\n\nfunction miscMixin (Vue) {\n  /**\n   * Apply a list of filter (descriptors) to a value.\n   * Using plain for loops here because this will be called in\n   * the getter of any watcher with filters so it is very\n   * performance sensitive.\n   *\n   * @param {*} value\n   * @param {*} [oldValue]\n   * @param {Array} filters\n   * @param {Boolean} write\n   * @return {*}\n   */\n\n  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n    var filter, fn, args, arg, offset, i, l, j, k;\n    for (i = 0, l = filters.length; i < l; i++) {\n      filter = filters[write ? l - i - 1 : i];\n      fn = resolveAsset(this.$options, 'filters', filter.name, true);\n      if (!fn) continue;\n      fn = write ? fn.write : fn.read || fn;\n      if (typeof fn !== 'function') continue;\n      args = write ? [value, oldValue] : [value];\n      offset = write ? 2 : 1;\n      if (filter.args) {\n        for (j = 0, k = filter.args.length; j < k; j++) {\n          arg = filter.args[j];\n          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n        }\n      }\n      value = fn.apply(this, args);\n    }\n    return value;\n  };\n\n  /**\n   * Resolve a component, depending on whether the component\n   * is defined normally or using an async factory function.\n   * Resolves synchronously if already resolved, otherwise\n   * resolves asynchronously and caches the resolved\n   * constructor on the factory.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  Vue.prototype._resolveComponent = function (value, cb) {\n    var factory;\n    if (typeof value === 'function') {\n      factory = value;\n    } else {\n      factory = resolveAsset(this.$options, 'components', value, true);\n    }\n    /* istanbul ignore if */\n    if (!factory) {\n      return;\n    }\n    // async component factory\n    if (!factory.options) {\n      if (factory.resolved) {\n        // cached\n        cb(factory.resolved);\n      } else if (factory.requested) {\n        // pool callbacks\n        factory.pendingCallbacks.push(cb);\n      } else {\n        factory.requested = true;\n        var cbs = factory.pendingCallbacks = [cb];\n        factory.call(this, function resolve(res) {\n          if (isPlainObject(res)) {\n            res = Vue.extend(res);\n          }\n          // cache resolved\n          factory.resolved = res;\n          // invoke callbacks\n          for (var i = 0, l = cbs.length; i < l; i++) {\n            cbs[i](res);\n          }\n        }, function reject(reason) {\n          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\n        });\n      }\n    } else {\n      // normal component\n      cb(factory);\n    }\n  };\n}\n\nvar filterRE$1 = /[^|]\\|[^|]/;\n\nfunction dataAPI (Vue) {\n  /**\n   * Get the value from an expression on this vm.\n   *\n   * @param {String} exp\n   * @param {Boolean} [asStatement]\n   * @return {*}\n   */\n\n  Vue.prototype.$get = function (exp, asStatement) {\n    var res = parseExpression$1(exp);\n    if (res) {\n      if (asStatement) {\n        var self = this;\n        return function statementHandler() {\n          self.$arguments = toArray(arguments);\n          var result = res.get.call(self, self);\n          self.$arguments = null;\n          return result;\n        };\n      } else {\n        try {\n          return res.get.call(this, this);\n        } catch (e) {}\n      }\n    }\n  };\n\n  /**\n   * Set the value from an expression on this vm.\n   * The expression must be a valid left-hand\n   * expression in an assignment.\n   *\n   * @param {String} exp\n   * @param {*} val\n   */\n\n  Vue.prototype.$set = function (exp, val) {\n    var res = parseExpression$1(exp, true);\n    if (res && res.set) {\n      res.set.call(this, this, val);\n    }\n  };\n\n  /**\n   * Delete a property on the VM\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype.$delete = function (key) {\n    del(this._data, key);\n  };\n\n  /**\n   * Watch an expression, trigger callback when its\n   * value changes.\n   *\n   * @param {String|Function} expOrFn\n   * @param {Function} cb\n   * @param {Object} [options]\n   *                 - {Boolean} deep\n   *                 - {Boolean} immediate\n   * @return {Function} - unwatchFn\n   */\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    var parsed;\n    if (typeof expOrFn === 'string') {\n      parsed = parseDirective(expOrFn);\n      expOrFn = parsed.expression;\n    }\n    var watcher = new Watcher(vm, expOrFn, cb, {\n      deep: options && options.deep,\n      sync: options && options.sync,\n      filters: parsed && parsed.filters,\n      user: !options || options.user !== false\n    });\n    if (options && options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n\n  /**\n   * Evaluate a text directive, including filters.\n   *\n   * @param {String} text\n   * @param {Boolean} [asStatement]\n   * @return {String}\n   */\n\n  Vue.prototype.$eval = function (text, asStatement) {\n    // check for filters.\n    if (filterRE$1.test(text)) {\n      var dir = parseDirective(text);\n      // the filter regex check might give false positive\n      // for pipes inside strings, so it's possible that\n      // we don't get any filters here\n      var val = this.$get(dir.expression, asStatement);\n      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n    } else {\n      // no filter\n      return this.$get(text, asStatement);\n    }\n  };\n\n  /**\n   * Interpolate a piece of template text.\n   *\n   * @param {String} text\n   * @return {String}\n   */\n\n  Vue.prototype.$interpolate = function (text) {\n    var tokens = parseText(text);\n    var vm = this;\n    if (tokens) {\n      if (tokens.length === 1) {\n        return vm.$eval(tokens[0].value) + '';\n      } else {\n        return tokens.map(function (token) {\n          return token.tag ? vm.$eval(token.value) : token.value;\n        }).join('');\n      }\n    } else {\n      return text;\n    }\n  };\n\n  /**\n   * Log instance data as a plain JS object\n   * so that it is easier to inspect in console.\n   * This method assumes console is available.\n   *\n   * @param {String} [path]\n   */\n\n  Vue.prototype.$log = function (path) {\n    var data = path ? getPath(this._data, path) : this._data;\n    if (data) {\n      data = clean(data);\n    }\n    // include computed fields\n    if (!path) {\n      var key;\n      for (key in this.$options.computed) {\n        data[key] = clean(this[key]);\n      }\n      if (this._props) {\n        for (key in this._props) {\n          data[key] = clean(this[key]);\n        }\n      }\n    }\n    console.log(data);\n  };\n\n  /**\n   * \"clean\" a getter/setter converted object into a plain\n   * object copy.\n   *\n   * @param {Object} - obj\n   * @return {Object}\n   */\n\n  function clean(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\n\nfunction domAPI (Vue) {\n  /**\n   * Convenience on-instance nextTick. The callback is\n   * auto-bound to the instance, and this avoids component\n   * modules having to rely on the global Vue.\n   *\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$nextTick = function (fn) {\n    nextTick(fn, this);\n  };\n\n  /**\n   * Append instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$appendTo = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, append, appendWithTransition);\n  };\n\n  /**\n   * Prepend instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$prependTo = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.hasChildNodes()) {\n      this.$before(target.firstChild, cb, withTransition);\n    } else {\n      this.$appendTo(target, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Insert instance before target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$before = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n  };\n\n  /**\n   * Insert instance after target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$after = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.nextSibling) {\n      this.$before(target.nextSibling, cb, withTransition);\n    } else {\n      this.$appendTo(target.parentNode, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Remove instance from DOM\n   *\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$remove = function (cb, withTransition) {\n    if (!this.$el.parentNode) {\n      return cb && cb();\n    }\n    var inDocument = this._isAttached && inDoc(this.$el);\n    // if we are not in document, no need to check\n    // for transitions\n    if (!inDocument) withTransition = false;\n    var self = this;\n    var realCb = function realCb() {\n      if (inDocument) self._callHook('detached');\n      if (cb) cb();\n    };\n    if (this._isFragment) {\n      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n    } else {\n      var op = withTransition === false ? removeWithCb : removeWithTransition;\n      op(this.$el, this, realCb);\n    }\n    return this;\n  };\n\n  /**\n   * Shared DOM insertion function.\n   *\n   * @param {Vue} vm\n   * @param {Element} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition]\n   * @param {Function} op1 - op for non-transition insert\n   * @param {Function} op2 - op for transition insert\n   * @return vm\n   */\n\n  function insert(vm, target, cb, withTransition, op1, op2) {\n    target = query(target);\n    var targetIsDetached = !inDoc(target);\n    var op = withTransition === false || targetIsDetached ? op1 : op2;\n    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n    if (vm._isFragment) {\n      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n        op(node, target, vm);\n      });\n      cb && cb();\n    } else {\n      op(vm.$el, target, vm, cb);\n    }\n    if (shouldCallHook) {\n      vm._callHook('attached');\n    }\n    return vm;\n  }\n\n  /**\n   * Check for selectors\n   *\n   * @param {String|Element} el\n   */\n\n  function query(el) {\n    return typeof el === 'string' ? document.querySelector(el) : el;\n  }\n\n  /**\n   * Append operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function append(el, target, vm, cb) {\n    target.appendChild(el);\n    if (cb) cb();\n  }\n\n  /**\n   * InsertBefore operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function beforeWithCb(el, target, vm, cb) {\n    before(el, target);\n    if (cb) cb();\n  }\n\n  /**\n   * Remove operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function removeWithCb(el, vm, cb) {\n    remove(el);\n    if (cb) cb();\n  }\n}\n\nfunction eventsAPI (Vue) {\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$on = function (event, fn) {\n    (this._events[event] || (this._events[event] = [])).push(fn);\n    modifyListenerCount(this, event, 1);\n    return this;\n  };\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$once = function (event, fn) {\n    var self = this;\n    function on() {\n      self.$off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.$on(event, on);\n    return this;\n  };\n\n  /**\n   * Remove the given callback for `event` or all\n   * registered callbacks.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$off = function (event, fn) {\n    var cbs;\n    // all\n    if (!arguments.length) {\n      if (this.$parent) {\n        for (event in this._events) {\n          cbs = this._events[event];\n          if (cbs) {\n            modifyListenerCount(this, event, -cbs.length);\n          }\n        }\n      }\n      this._events = {};\n      return this;\n    }\n    // specific event\n    cbs = this._events[event];\n    if (!cbs) {\n      return this;\n    }\n    if (arguments.length === 1) {\n      modifyListenerCount(this, event, -cbs.length);\n      this._events[event] = null;\n      return this;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        modifyListenerCount(this, event, -1);\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger an event on self.\n   *\n   * @param {String|Object} event\n   * @return {Boolean} shouldPropagate\n   */\n\n  Vue.prototype.$emit = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    var cbs = this._events[event];\n    var shouldPropagate = isSource || !cbs;\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      // this is a somewhat hacky solution to the question raised\n      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\n      // the propagation handling is somewhat broken. Therefore we\n      // need to treat these inline callbacks differently.\n      var hasParentCbs = isSource && cbs.some(function (cb) {\n        return cb._fromParent;\n      });\n      if (hasParentCbs) {\n        shouldPropagate = false;\n      }\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        var cb = cbs[i];\n        var res = cb.apply(this, args);\n        if (res === true && (!hasParentCbs || cb._fromParent)) {\n          shouldPropagate = true;\n        }\n      }\n    }\n    return shouldPropagate;\n  };\n\n  /**\n   * Recursively broadcast an event to all children instances.\n   *\n   * @param {String|Object} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$broadcast = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    // if no child has registered for this event,\n    // then there's no need to broadcast.\n    if (!this._eventsCount[event]) return;\n    var children = this.$children;\n    var args = toArray(arguments);\n    if (isSource) {\n      // use object event to indicate non-source emit\n      // on children\n      args[0] = { name: event, source: this };\n    }\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var shouldPropagate = child.$emit.apply(child, args);\n      if (shouldPropagate) {\n        child.$broadcast.apply(child, args);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Recursively propagate an event up the parent chain.\n   *\n   * @param {String} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$dispatch = function (event) {\n    var shouldPropagate = this.$emit.apply(this, arguments);\n    if (!shouldPropagate) return;\n    var parent = this.$parent;\n    var args = toArray(arguments);\n    // use object event to indicate non-source emit\n    // on parents\n    args[0] = { name: event, source: this };\n    while (parent) {\n      shouldPropagate = parent.$emit.apply(parent, args);\n      parent = shouldPropagate ? parent.$parent : null;\n    }\n    return this;\n  };\n\n  /**\n   * Modify the listener counts on all parents.\n   * This bookkeeping allows $broadcast to return early when\n   * no child has listened to a certain event.\n   *\n   * @param {Vue} vm\n   * @param {String} event\n   * @param {Number} count\n   */\n\n  var hookRE = /^hook:/;\n  function modifyListenerCount(vm, event, count) {\n    var parent = vm.$parent;\n    // hooks do not get broadcasted so no need\n    // to do bookkeeping for them\n    if (!parent || !count || hookRE.test(event)) return;\n    while (parent) {\n      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n      parent = parent.$parent;\n    }\n  }\n}\n\nfunction lifecycleAPI (Vue) {\n  /**\n   * Set instance target element and kick off the compilation\n   * process. The passed in `el` can be a selector string, an\n   * existing Element, or a DocumentFragment (for block\n   * instances).\n   *\n   * @param {Element|DocumentFragment|string} el\n   * @public\n   */\n\n  Vue.prototype.$mount = function (el) {\n    if (this._isCompiled) {\n      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);\n      return;\n    }\n    el = query(el);\n    if (!el) {\n      el = document.createElement('div');\n    }\n    this._compile(el);\n    this._initDOMHooks();\n    if (inDoc(this.$el)) {\n      this._callHook('attached');\n      ready.call(this);\n    } else {\n      this.$once('hook:attached', ready);\n    }\n    return this;\n  };\n\n  /**\n   * Mark an instance as ready.\n   */\n\n  function ready() {\n    this._isAttached = true;\n    this._isReady = true;\n    this._callHook('ready');\n  }\n\n  /**\n   * Teardown the instance, simply delegate to the internal\n   * _destroy.\n   *\n   * @param {Boolean} remove\n   * @param {Boolean} deferCleanup\n   */\n\n  Vue.prototype.$destroy = function (remove, deferCleanup) {\n    this._destroy(remove, deferCleanup);\n  };\n\n  /**\n   * Partially compile a piece of DOM and return a\n   * decompile function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   * @param {Fragment} [frag]\n   * @return {Function}\n   */\n\n  Vue.prototype.$compile = function (el, host, scope, frag) {\n    return compile(el, this.$options, true)(this, el, host, scope, frag);\n  };\n}\n\n/**\n * The exposed Vue constructor.\n *\n * API conventions:\n * - public API methods/properties are prefixed with `$`\n * - internal methods/properties are prefixed with `_`\n * - non-prefixed properties are assumed to be proxied user\n *   data.\n *\n * @constructor\n * @param {Object} [options]\n * @public\n */\n\nfunction Vue(options) {\n  this._init(options);\n}\n\n// install internals\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nmiscMixin(Vue);\n\n// install instance APIs\ndataAPI(Vue);\ndomAPI(Vue);\neventsAPI(Vue);\nlifecycleAPI(Vue);\n\nvar slot = {\n\n  priority: SLOT,\n  params: ['name'],\n\n  bind: function bind() {\n    // this was resolved during component transclusion\n    var name = this.params.name || 'default';\n    var content = this.vm._slotContents && this.vm._slotContents[name];\n    if (!content || !content.hasChildNodes()) {\n      this.fallback();\n    } else {\n      this.compile(content.cloneNode(true), this.vm._context, this.vm);\n    }\n  },\n\n  compile: function compile(content, context, host) {\n    if (content && context) {\n      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\n        // if the inserted slot has v-if\n        // inject fallback content as the v-else\n        var elseBlock = document.createElement('template');\n        elseBlock.setAttribute('v-else', '');\n        elseBlock.innerHTML = this.el.innerHTML;\n        // the else block should be compiled in child scope\n        elseBlock._context = this.vm;\n        content.appendChild(elseBlock);\n      }\n      var scope = host ? host._scope : this._scope;\n      this.unlink = context.$compile(content, host, scope, this._frag);\n    }\n    if (content) {\n      replace(this.el, content);\n    } else {\n      remove(this.el);\n    }\n  },\n\n  fallback: function fallback() {\n    this.compile(extractContent(this.el, true), this.vm);\n  },\n\n  unbind: function unbind() {\n    if (this.unlink) {\n      this.unlink();\n    }\n  }\n};\n\nvar partial = {\n\n  priority: PARTIAL,\n\n  params: ['name'],\n\n  // watch changes to name for dynamic partials\n  paramWatchers: {\n    name: function name(value) {\n      vIf.remove.call(this);\n      if (value) {\n        this.insert(value);\n      }\n    }\n  },\n\n  bind: function bind() {\n    this.anchor = createAnchor('v-partial');\n    replace(this.el, this.anchor);\n    this.insert(this.params.name);\n  },\n\n  insert: function insert(id) {\n    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\n    if (partial) {\n      this.factory = new FragmentFactory(this.vm, partial);\n      vIf.insert.call(this);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n  }\n};\n\nvar elementDirectives = {\n  slot: slot,\n  partial: partial\n};\n\nvar convertArray = vFor._postProcess;\n\n/**\n * Limit filter for arrays\n *\n * @param {Number} n\n * @param {Number} offset (Decimal expected)\n */\n\nfunction limitBy(arr, n, offset) {\n  offset = offset ? parseInt(offset, 10) : 0;\n  n = toNumber(n);\n  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} search\n * @param {String} [delimiter]\n * @param {String} ...dataKeys\n */\n\nfunction filterBy(arr, search, delimiter) {\n  arr = convertArray(arr);\n  if (search == null) {\n    return arr;\n  }\n  if (typeof search === 'function') {\n    return arr.filter(search);\n  }\n  // cast to lowercase string\n  search = ('' + search).toLowerCase();\n  // allow optional `in` delimiter\n  // because why not\n  var n = delimiter === 'in' ? 3 : 2;\n  // extract and flatten keys\n  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\n  var res = [];\n  var item, key, val, j;\n  for (var i = 0, l = arr.length; i < l; i++) {\n    item = arr[i];\n    val = item && item.$value || item;\n    j = keys.length;\n    if (j) {\n      while (j--) {\n        key = keys[j];\n        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n          res.push(item);\n          break;\n        }\n      }\n    } else if (contains(item, search)) {\n      res.push(item);\n    }\n  }\n  return res;\n}\n\n/**\n * Order filter for arrays\n *\n * @param {String|Array<String>|Function} ...sortKeys\n * @param {Number} [order]\n */\n\nfunction orderBy(arr) {\n  var comparator = null;\n  var sortKeys = undefined;\n  arr = convertArray(arr);\n\n  // determine order (last argument)\n  var args = toArray(arguments, 1);\n  var order = args[args.length - 1];\n  if (typeof order === 'number') {\n    order = order < 0 ? -1 : 1;\n    args = args.length > 1 ? args.slice(0, -1) : args;\n  } else {\n    order = 1;\n  }\n\n  // determine sortKeys & comparator\n  var firstArg = args[0];\n  if (!firstArg) {\n    return arr;\n  } else if (typeof firstArg === 'function') {\n    // custom comparator\n    comparator = function (a, b) {\n      return firstArg(a, b) * order;\n    };\n  } else {\n    // string keys. flatten first\n    sortKeys = Array.prototype.concat.apply([], args);\n    comparator = function (a, b, i) {\n      i = i || 0;\n      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\n    };\n  }\n\n  function baseCompare(a, b, sortKeyIndex) {\n    var sortKey = sortKeys[sortKeyIndex];\n    if (sortKey) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n    }\n    return a === b ? 0 : a > b ? order : -order;\n  }\n\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(comparator);\n}\n\n/**\n * String contain helper\n *\n * @param {*} val\n * @param {String} search\n */\n\nfunction contains(val, search) {\n  var i;\n  if (isPlainObject(val)) {\n    var keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      if (contains(val[keys[i]], search)) {\n        return true;\n      }\n    }\n  } else if (isArray(val)) {\n    i = val.length;\n    while (i--) {\n      if (contains(val[i], search)) {\n        return true;\n      }\n    }\n  } else if (val != null) {\n    return val.toString().toLowerCase().indexOf(search) > -1;\n  }\n}\n\nvar digitsRE = /(\\d{3})(?=\\d)/g;\n\n// asset collections must be a plain object.\nvar filters = {\n\n  orderBy: orderBy,\n  filterBy: filterBy,\n  limitBy: limitBy,\n\n  /**\n   * Stringify value.\n   *\n   * @param {Number} indent\n   */\n\n  json: {\n    read: function read(value, indent) {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\n    },\n    write: function write(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n  },\n\n  /**\n   * 'abc' => 'Abc'\n   */\n\n  capitalize: function capitalize(value) {\n    if (!value && value !== 0) return '';\n    value = value.toString();\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  },\n\n  /**\n   * 'abc' => 'ABC'\n   */\n\n  uppercase: function uppercase(value) {\n    return value || value === 0 ? value.toString().toUpperCase() : '';\n  },\n\n  /**\n   * 'AbC' => 'abc'\n   */\n\n  lowercase: function lowercase(value) {\n    return value || value === 0 ? value.toString().toLowerCase() : '';\n  },\n\n  /**\n   * 12345 => $12,345.00\n   *\n   * @param {String} sign\n   * @param {Number} decimals Decimal places\n   */\n\n  currency: function currency(value, _currency, decimals) {\n    value = parseFloat(value);\n    if (!isFinite(value) || !value && value !== 0) return '';\n    _currency = _currency != null ? _currency : '$';\n    decimals = decimals != null ? decimals : 2;\n    var stringified = Math.abs(value).toFixed(decimals);\n    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\n    var i = _int.length % 3;\n    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n    var _float = decimals ? stringified.slice(-1 - decimals) : '';\n    var sign = value < 0 ? '-' : '';\n    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n  },\n\n  /**\n   * 'item' => 'items'\n   *\n   * @params\n   *  an array of strings corresponding to\n   *  the single, double, triple ... forms of the word to\n   *  be pluralized. When the number to be pluralized\n   *  exceeds the length of the args, it will use the last\n   *  entry in the array.\n   *\n   *  e.g. ['single', 'double', 'triple', 'multiple']\n   */\n\n  pluralize: function pluralize(value) {\n    var args = toArray(arguments, 1);\n    var length = args.length;\n    if (length > 1) {\n      var index = value % 10 - 1;\n      return index in args ? args[index] : args[length - 1];\n    } else {\n      return args[0] + (value === 1 ? '' : 's');\n    }\n  },\n\n  /**\n   * Debounce a handler function.\n   *\n   * @param {Function} handler\n   * @param {Number} delay = 300\n   * @return {Function}\n   */\n\n  debounce: function debounce(handler, delay) {\n    if (!handler) return;\n    if (!delay) {\n      delay = 300;\n    }\n    return _debounce(handler, delay);\n  }\n};\n\nfunction installGlobalAPI (Vue) {\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: directives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  /**\n   * Expose useful internals\n   */\n\n  Vue.util = util;\n  Vue.config = config;\n  Vue.set = set;\n  Vue['delete'] = del;\n  Vue.nextTick = nextTick;\n\n  /**\n   * The following are exposed for advanced usage / plugins\n   */\n\n  Vue.compiler = compiler;\n  Vue.FragmentFactory = FragmentFactory;\n  Vue.internalDirectives = internalDirectives;\n  Vue.parsers = {\n    path: path,\n    text: text,\n    template: template,\n    directive: directive,\n    expression: expression\n  };\n\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   *\n   * @param {Object} extendOptions\n   */\n\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var isFirstExtend = Super.cid === 0;\n    if (isFirstExtend && extendOptions._Ctor) {\n      return extendOptions._Ctor;\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\n        name = null;\n      }\n    }\n    var Sub = createClass(name || 'VueComponent');\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n    // allow further extension\n    Sub.extend = Super.extend;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // cache constructor\n    if (isFirstExtend) {\n      extendOptions._Ctor = Sub;\n    }\n    return Sub;\n  };\n\n  /**\n   * A function that returns a sub-class constructor with the\n   * given name. This gives us much nicer output when\n   * logging instances in the console.\n   *\n   * @param {String} name\n   * @return {Function}\n   */\n\n  function createClass(name) {\n    /* eslint-disable no-new-func */\n    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    /* eslint-enable no-new-func */\n  }\n\n  /**\n   * Plugin system\n   *\n   * @param {Object} plugin\n   */\n\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n\n  /**\n   * Apply a global mixin by merging it into the default\n   * options.\n   */\n\n  Vue.mixin = function (mixin) {\n    Vue.options = mergeOptions(Vue.options, mixin);\n  };\n\n  /**\n   * Create asset registration methods with the following\n   * signature:\n   *\n   * @param {String} id\n   * @param {*} definition\n   */\n\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          if (!definition.name) {\n            definition.name = id;\n          }\n          definition = Vue.extend(definition);\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n\n  // expose internal transition API\n  extend(Vue.transition, transition);\n}\n\ninstallGlobalAPI(Vue);\n\nVue.version = '1.0.28';\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue);\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n}, 0);\n\nmodule.exports = Vue;\n}).call(this,require('_process'))\n\n},{\"_process\":1}],3:[function(require,module,exports){\nvar auth2, numInstances;\n\nmodule.exports = {\n    translations: {\n        description: {\n            en: 'Google Drive ({{config.email || \"Not connected\"}})',\n            de: 'Google Drive ({{config.email || \"Nicht verbunden\"}})',\n            fr: 'Google Drive ({{config.email || \"Non connecté\"}})',\n        },\n        'document': {\n            en: 'Doc',\n            de: 'Doc',\n            fr: 'Doc'\n        },\n        'spreadsheet': {\n            en: 'Spreadsheet',\n            de: 'Tabelle',\n            fr: 'Feuille de calcul'\n        },\n        'presentation': {\n            en: 'Presentation',\n            de: 'Präsentation',\n            fr: 'Presentation'\n        },\n        'map': {\n            en: 'My Maps',\n            de: 'My Maps',\n            fr: 'Mes Cartes'\n        },\n        'form': {\n            en: 'Form',\n            de: 'Formular',\n            fr: 'Formulaire'\n        },\n        'drawing': {\n            en: 'Drawing',\n            de: 'Zeichnung',\n            fr: 'Dessin'\n        },\n        'folder': {\n            en: 'Folder',\n            de: 'Ordner',\n            fr: 'Dossier'\n        },\n        'script': {\n            en: 'App Script',\n            de: 'App Script',\n            fr: 'App Script'\n        }\n    },\n    http: {\n        base: 'https://content.googleapis.com/drive/v3',\n        http: {\n            // Google web services by default have a limit of 1000 Requests / 100 seconds\n            // So keep 100ms meantime between all requests\n            throttle: 100\n        }\n    },\n    created: function () {\n        if (this.config.hosted_domain && numInstances) {\n            require('vue').console.warn('hosted_domain is a global option for Google Auth - can not have multiple storages based on that');\n        }\n        if (this.auth) {\n            this.config.email = this.auth.email;\n        }\n        numInstances++;\n    },\n    stored: {\n        auth: true\n    },\n    methods: {\n        loadAuth2: function() {\n            return this.$promise(function(resolve) {\n                if (auth2) {\n                    resolve();\n                } else {\n                    this.util.loadScript('https://apis.google.com/js/platform.js', function() {\n                        gapi.load('auth2', function() {\n                            var options = {\n                                client_id: this.config.client_id,\n                                scope: 'https://www.googleapis.com/auth/drive.readonly'\n                            };\n                            if (this.config.hosted_domain) {\n                                options.hosted_domain = this.config.hosted_domain;\n                            }\n                            gapi.auth2.init(options).then(function(a) {\n                                auth2 = a;\n                                resolve();\n                            });\n                        }.bind(this));\n                    }.bind(this));\n                }\n            });\n        },\n        signIn: function () {\n            return this.$promise(function(resolve) {\n                this.loadAuth2().then(function() {\n                    if (auth2.isSignedIn.get()) {\n                        resolve(auth2.currentUser.get());\n                    } else {\n                        var open = this.$parent.open;\n                        this.$parent.open = true;\n                        var div = this.$el.appendChild(document.createElement('div'));\n                        div.className = 'panel panel-default';\n                        var button = div.appendChild(document.createElement('div'));\n                        button.className = 'btn btn-default btn-block';\n                        button.innerHTML = this.t('login.login');\n\n                        auth2.attachClickHandler(button, {}, function(currentUser) {\n                            this.$parent.open = open;\n                            this.$el.removeChild(div);\n                            resolve(currentUser);\n                        }.bind(this));\n                    }\n                }.bind(this));\n            });\n        },\n        setupToken: function() {\n            return this.$promise(function(resolve) {\n                var setup = function() {\n                    this.$options.http.params = {key: this.config.api_key };\n                    this.$options.http.headers = {Authorization: 'Bearer ' + this.auth.token};\n                    resolve();\n                }.bind(this);\n                if (this.auth && this.auth.expires_at < Date.now()) {\n                    this.auth = null;\n                }\n                if (this.auth) {\n                    setup();\n                } else {\n                    this.signIn().then(function(user) {\n                        this.auth = {\n                            token: user.getAuthResponse().access_token,\n                            expires_at: user.getAuthResponse().expires_at,\n                            email: user.getBasicProfile().getEmail()\n                        };\n                        setup();\n                    }.bind(this));\n                }\n            });\n        },\n        loadItems: function() {\n            return this.$promise(function(resolve) {\n                this.setupToken().then(function (token) {\n                    this.http.get('files', {params: {key: this.config.api_key, q: '\\'root\\' in parents'}});\n                }.bind(this));\n            });\n        }\n    },\n    events: {\n        'load-items': function (tree) {\n            this.setupToken().then(function (token) {\n                this.http.get(\n                    'files',\n                    {\n                        params: {\n                            key: this.config.api_key,\n                            q: '\\'' + (tree.item ? tree.item.id : 'root') + '\\' in parents and trashed = false',\n                            fields: 'files,kind'\n                        }\n                    }\n                ).then(function(response) {\n                    tree.items = this.sortItems(\n                        JSON.parse(response.data).files.map(function(item) {\n                            var type = item.mimeType === 'application/vnd.google-apps.folder' ? 'dir' : 'file';\n                            var typeLabel, googleType;\n                            if (item.mimeType.indexOf('/vnd.google-apps.') > 0) {\n                                googleType = item.mimeType.split('.').pop();\n                                typeLabel = 'Google ' + (this.t(googleType) || googleType[0].toUpperCase() + googleType.substr(1));\n                            }\n                            return this.createItem({\n                                id: item.id,\n                                name: item.name,\n                                type: type,\n                                size: item,\n                                mediaType: {\n                                    icon: item.iconLink,\n                                    iconBig: (type === 'file' && item.iconLink) ? item.iconLink.replace(/\\/icon_[0-9]+_([^_]+)_[^\\/]+/, '/mediatype/icon_1_$1_x128.png') : undefined,\n                                    label: typeLabel\n                                },\n                                links: {\n                                    download: item.webContentLink,\n                                    open: item.webViewLink\n                                },\n                                extension: item.fileExtension,\n                                thumbnail: item.thumbnailLink,\n                                data: item\n                            });\n                        }.bind(this))\n                    );\n                });\n            }.bind(this));\n        }\n    }\n};\n\n},{\"vue\":2}]},{},[3])(3)\n});\n\n","/*!\n * Vue.js v1.0.28\n * (c) 2016 Evan You\n * Released under the MIT License.\n */\n'use strict';\n\nfunction set(obj, key, val) {\n  if (hasOwn(obj, key)) {\n    obj[key] = val;\n    return;\n  }\n  if (obj._isVue) {\n    set(obj._data, key, val);\n    return;\n  }\n  var ob = obj.__ob__;\n  if (!ob) {\n    obj[key] = val;\n    return;\n  }\n  ob.convert(key, val);\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._proxy(key);\n      vm._digest();\n    }\n  }\n  return val;\n}\n\n/**\n * Delete a property and trigger change if necessary.\n *\n * @param {Object} obj\n * @param {String} key\n */\n\nfunction del(obj, key) {\n  if (!hasOwn(obj, key)) {\n    return;\n  }\n  delete obj[key];\n  var ob = obj.__ob__;\n  if (!ob) {\n    if (obj._isVue) {\n      delete obj._data[key];\n      obj._digest();\n    }\n    return;\n  }\n  ob.dep.notify();\n  if (ob.vms) {\n    var i = ob.vms.length;\n    while (i--) {\n      var vm = ob.vms[i];\n      vm._unproxy(key);\n      vm._digest();\n    }\n  }\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n/**\n * Check whether the object has the property.\n *\n * @param {Object} obj\n * @param {String} key\n * @return {Boolean}\n */\n\nfunction hasOwn(obj, key) {\n  return hasOwnProperty.call(obj, key);\n}\n\n/**\n * Check if an expression is a literal value.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nvar literalValueRE = /^\\s?(true|false|-?[\\d\\.]+|'[^']*'|\"[^\"]*\")\\s?$/;\n\nfunction isLiteral(exp) {\n  return literalValueRE.test(exp);\n}\n\n/**\n * Check if a string starts with $ or _\n *\n * @param {String} str\n * @return {Boolean}\n */\n\nfunction isReserved(str) {\n  var c = (str + '').charCodeAt(0);\n  return c === 0x24 || c === 0x5F;\n}\n\n/**\n * Guard text output, make sure undefined outputs\n * empty string\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction _toString(value) {\n  return value == null ? '' : value.toString();\n}\n\n/**\n * Check and convert possible numeric strings to numbers\n * before setting back to data\n *\n * @param {*} value\n * @return {*|Number}\n */\n\nfunction toNumber(value) {\n  if (typeof value !== 'string') {\n    return value;\n  } else {\n    var parsed = Number(value);\n    return isNaN(parsed) ? value : parsed;\n  }\n}\n\n/**\n * Convert string boolean literals into real booleans.\n *\n * @param {*} value\n * @return {*|Boolean}\n */\n\nfunction toBoolean(value) {\n  return value === 'true' ? true : value === 'false' ? false : value;\n}\n\n/**\n * Strip quotes from a string\n *\n * @param {String} str\n * @return {String | false}\n */\n\nfunction stripQuotes(str) {\n  var a = str.charCodeAt(0);\n  var b = str.charCodeAt(str.length - 1);\n  return a === b && (a === 0x22 || a === 0x27) ? str.slice(1, -1) : str;\n}\n\n/**\n * Camelize a hyphen-delimited string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar camelizeRE = /-(\\w)/g;\n\nfunction camelize(str) {\n  return str.replace(camelizeRE, toUpper);\n}\n\nfunction toUpper(_, c) {\n  return c ? c.toUpperCase() : '';\n}\n\n/**\n * Hyphenate a camelCase string.\n *\n * @param {String} str\n * @return {String}\n */\n\nvar hyphenateRE = /([^-])([A-Z])/g;\n\nfunction hyphenate(str) {\n  return str.replace(hyphenateRE, '$1-$2').replace(hyphenateRE, '$1-$2').toLowerCase();\n}\n\n/**\n * Converts hyphen/underscore/slash delimitered names into\n * camelized classNames.\n *\n * e.g. my-component => MyComponent\n *      some_else    => SomeElse\n *      some/comp    => SomeComp\n *\n * @param {String} str\n * @return {String}\n */\n\nvar classifyRE = /(?:^|[-_\\/])(\\w)/g;\n\nfunction classify(str) {\n  return str.replace(classifyRE, toUpper);\n}\n\n/**\n * Simple bind, faster than native\n *\n * @param {Function} fn\n * @param {Object} ctx\n * @return {Function}\n */\n\nfunction bind(fn, ctx) {\n  return function (a) {\n    var l = arguments.length;\n    return l ? l > 1 ? fn.apply(ctx, arguments) : fn.call(ctx, a) : fn.call(ctx);\n  };\n}\n\n/**\n * Convert an Array-like object to a real Array.\n *\n * @param {Array-like} list\n * @param {Number} [start] - start index\n * @return {Array}\n */\n\nfunction toArray(list, start) {\n  start = start || 0;\n  var i = list.length - start;\n  var ret = new Array(i);\n  while (i--) {\n    ret[i] = list[i + start];\n  }\n  return ret;\n}\n\n/**\n * Mix properties into target object.\n *\n * @param {Object} to\n * @param {Object} from\n */\n\nfunction extend(to, from) {\n  var keys = Object.keys(from);\n  var i = keys.length;\n  while (i--) {\n    to[keys[i]] = from[keys[i]];\n  }\n  return to;\n}\n\n/**\n * Quick object check - this is primarily used to tell\n * Objects from primitive values when we know the value\n * is a JSON-compliant type.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nfunction isObject(obj) {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Strict object type check. Only returns true\n * for plain JavaScript objects.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar toString = Object.prototype.toString;\nvar OBJECT_STRING = '[object Object]';\n\nfunction isPlainObject(obj) {\n  return toString.call(obj) === OBJECT_STRING;\n}\n\n/**\n * Array type check.\n *\n * @param {*} obj\n * @return {Boolean}\n */\n\nvar isArray = Array.isArray;\n\n/**\n * Define a property.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n * @param {Boolean} [enumerable]\n */\n\nfunction def(obj, key, val, enumerable) {\n  Object.defineProperty(obj, key, {\n    value: val,\n    enumerable: !!enumerable,\n    writable: true,\n    configurable: true\n  });\n}\n\n/**\n * Debounce a function so it only gets called after the\n * input stops arriving after the given wait period.\n *\n * @param {Function} func\n * @param {Number} wait\n * @return {Function} - the debounced function\n */\n\nfunction _debounce(func, wait) {\n  var timeout, args, context, timestamp, result;\n  var later = function later() {\n    var last = Date.now() - timestamp;\n    if (last < wait && last >= 0) {\n      timeout = setTimeout(later, wait - last);\n    } else {\n      timeout = null;\n      result = func.apply(context, args);\n      if (!timeout) context = args = null;\n    }\n  };\n  return function () {\n    context = this;\n    args = arguments;\n    timestamp = Date.now();\n    if (!timeout) {\n      timeout = setTimeout(later, wait);\n    }\n    return result;\n  };\n}\n\n/**\n * Manual indexOf because it's slightly faster than\n * native.\n *\n * @param {Array} arr\n * @param {*} obj\n */\n\nfunction indexOf(arr, obj) {\n  var i = arr.length;\n  while (i--) {\n    if (arr[i] === obj) return i;\n  }\n  return -1;\n}\n\n/**\n * Make a cancellable version of an async callback.\n *\n * @param {Function} fn\n * @return {Function}\n */\n\nfunction cancellable(fn) {\n  var cb = function cb() {\n    if (!cb.cancelled) {\n      return fn.apply(this, arguments);\n    }\n  };\n  cb.cancel = function () {\n    cb.cancelled = true;\n  };\n  return cb;\n}\n\n/**\n * Check if two values are loosely equal - that is,\n * if they are plain objects, do they have the same shape?\n *\n * @param {*} a\n * @param {*} b\n * @return {Boolean}\n */\n\nfunction looseEqual(a, b) {\n  /* eslint-disable eqeqeq */\n  return a == b || (isObject(a) && isObject(b) ? JSON.stringify(a) === JSON.stringify(b) : false);\n  /* eslint-enable eqeqeq */\n}\n\nvar hasProto = ('__proto__' in {});\n\n// Browser environment sniffing\nvar inBrowser = typeof window !== 'undefined' && Object.prototype.toString.call(window) !== '[object Object]';\n\n// detect devtools\nvar devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;\n\n// UA sniffing for working around browser-specific quirks\nvar UA = inBrowser && window.navigator.userAgent.toLowerCase();\nvar isIE = UA && UA.indexOf('trident') > 0;\nvar isIE9 = UA && UA.indexOf('msie 9.0') > 0;\nvar isAndroid = UA && UA.indexOf('android') > 0;\nvar isIOS = UA && /iphone|ipad|ipod|ios/.test(UA);\n\nvar transitionProp = undefined;\nvar transitionEndEvent = undefined;\nvar animationProp = undefined;\nvar animationEndEvent = undefined;\n\n// Transition property/event sniffing\nif (inBrowser && !isIE9) {\n  var isWebkitTrans = window.ontransitionend === undefined && window.onwebkittransitionend !== undefined;\n  var isWebkitAnim = window.onanimationend === undefined && window.onwebkitanimationend !== undefined;\n  transitionProp = isWebkitTrans ? 'WebkitTransition' : 'transition';\n  transitionEndEvent = isWebkitTrans ? 'webkitTransitionEnd' : 'transitionend';\n  animationProp = isWebkitAnim ? 'WebkitAnimation' : 'animation';\n  animationEndEvent = isWebkitAnim ? 'webkitAnimationEnd' : 'animationend';\n}\n\n/* istanbul ignore next */\nfunction isNative(Ctor) {\n  return (/native code/.test(Ctor.toString())\n  );\n}\n\n/**\n * Defer a task to execute it asynchronously. Ideally this\n * should be executed as a microtask, so we leverage\n * MutationObserver if it's available, and fallback to\n * setTimeout(0).\n *\n * @param {Function} cb\n * @param {Object} ctx\n */\n\nvar nextTick = (function () {\n  var callbacks = [];\n  var pending = false;\n  var timerFunc = undefined;\n\n  function nextTickHandler() {\n    pending = false;\n    var copies = callbacks.slice(0);\n    callbacks.length = 0;\n    for (var i = 0; i < copies.length; i++) {\n      copies[i]();\n    }\n  }\n\n  // the nextTick behavior leverages the microtask queue, which can be accessed\n  // via either native Promise.then or MutationObserver.\n  // MutationObserver has wider support, however it is seriously bugged in\n  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It\n  // completely stops working after triggering a few times... so, if native\n  // Promise is available, we will use it:\n  /* istanbul ignore if */\n  if (typeof Promise !== 'undefined' && isNative(Promise)) {\n    var p = Promise.resolve();\n    var noop = function noop() {};\n    timerFunc = function () {\n      p.then(nextTickHandler);\n      // in problematic UIWebViews, Promise.then doesn't completely break, but\n      // it can get stuck in a weird state where callbacks are pushed into the\n      // microtask queue but the queue isn't being flushed, until the browser\n      // needs to do some other work, e.g. handle a timer. Therefore we can\n      // \"force\" the microtask queue to be flushed by adding an empty timer.\n      if (isIOS) setTimeout(noop);\n    };\n  } else if (typeof MutationObserver !== 'undefined') {\n    // use MutationObserver where native Promise is not available,\n    // e.g. IE11, iOS7, Android 4.4\n    var counter = 1;\n    var observer = new MutationObserver(nextTickHandler);\n    var textNode = document.createTextNode(String(counter));\n    observer.observe(textNode, {\n      characterData: true\n    });\n    timerFunc = function () {\n      counter = (counter + 1) % 2;\n      textNode.data = String(counter);\n    };\n  } else {\n    // fallback to setTimeout\n    /* istanbul ignore next */\n    timerFunc = setTimeout;\n  }\n\n  return function (cb, ctx) {\n    var func = ctx ? function () {\n      cb.call(ctx);\n    } : cb;\n    callbacks.push(func);\n    if (pending) return;\n    pending = true;\n    timerFunc(nextTickHandler, 0);\n  };\n})();\n\nvar _Set = undefined;\n/* istanbul ignore if */\nif (typeof Set !== 'undefined' && isNative(Set)) {\n  // use native Set when available.\n  _Set = Set;\n} else {\n  // a non-standard Set polyfill that only works with primitive keys.\n  _Set = function () {\n    this.set = Object.create(null);\n  };\n  _Set.prototype.has = function (key) {\n    return this.set[key] !== undefined;\n  };\n  _Set.prototype.add = function (key) {\n    this.set[key] = 1;\n  };\n  _Set.prototype.clear = function () {\n    this.set = Object.create(null);\n  };\n}\n\nfunction Cache(limit) {\n  this.size = 0;\n  this.limit = limit;\n  this.head = this.tail = undefined;\n  this._keymap = Object.create(null);\n}\n\nvar p = Cache.prototype;\n\n/**\n * Put <value> into the cache associated with <key>.\n * Returns the entry which was removed to make room for\n * the new entry. Otherwise undefined is returned.\n * (i.e. if there was enough room already).\n *\n * @param {String} key\n * @param {*} value\n * @return {Entry|undefined}\n */\n\np.put = function (key, value) {\n  var removed;\n\n  var entry = this.get(key, true);\n  if (!entry) {\n    if (this.size === this.limit) {\n      removed = this.shift();\n    }\n    entry = {\n      key: key\n    };\n    this._keymap[key] = entry;\n    if (this.tail) {\n      this.tail.newer = entry;\n      entry.older = this.tail;\n    } else {\n      this.head = entry;\n    }\n    this.tail = entry;\n    this.size++;\n  }\n  entry.value = value;\n\n  return removed;\n};\n\n/**\n * Purge the least recently used (oldest) entry from the\n * cache. Returns the removed entry or undefined if the\n * cache was empty.\n */\n\np.shift = function () {\n  var entry = this.head;\n  if (entry) {\n    this.head = this.head.newer;\n    this.head.older = undefined;\n    entry.newer = entry.older = undefined;\n    this._keymap[entry.key] = undefined;\n    this.size--;\n  }\n  return entry;\n};\n\n/**\n * Get and register recent use of <key>. Returns the value\n * associated with <key> or undefined if not in cache.\n *\n * @param {String} key\n * @param {Boolean} returnEntry\n * @return {Entry|*}\n */\n\np.get = function (key, returnEntry) {\n  var entry = this._keymap[key];\n  if (entry === undefined) return;\n  if (entry === this.tail) {\n    return returnEntry ? entry : entry.value;\n  }\n  // HEAD--------------TAIL\n  //   <.older   .newer>\n  //  <--- add direction --\n  //   A  B  C  <D>  E\n  if (entry.newer) {\n    if (entry === this.head) {\n      this.head = entry.newer;\n    }\n    entry.newer.older = entry.older; // C <-- E.\n  }\n  if (entry.older) {\n    entry.older.newer = entry.newer; // C. --> E\n  }\n  entry.newer = undefined; // D --x\n  entry.older = this.tail; // D. --> E\n  if (this.tail) {\n    this.tail.newer = entry; // E. <-- D\n  }\n  this.tail = entry;\n  return returnEntry ? entry : entry.value;\n};\n\nvar cache$1 = new Cache(1000);\nvar reservedArgRE = /^in$|^-?\\d+/;\n\n/**\n * Parser state\n */\n\nvar str;\nvar dir;\nvar len;\nvar index;\nvar chr;\nvar state;\nvar startState = 0;\nvar filterState = 1;\nvar filterNameState = 2;\nvar filterArgState = 3;\n\nvar doubleChr = 0x22;\nvar singleChr = 0x27;\nvar pipeChr = 0x7C;\nvar escapeChr = 0x5C;\nvar spaceChr = 0x20;\n\nvar expStartChr = { 0x5B: 1, 0x7B: 1, 0x28: 1 };\nvar expChrPair = { 0x5B: 0x5D, 0x7B: 0x7D, 0x28: 0x29 };\n\nfunction peek() {\n  return str.charCodeAt(index + 1);\n}\n\nfunction next() {\n  return str.charCodeAt(++index);\n}\n\nfunction eof() {\n  return index >= len;\n}\n\nfunction eatSpace() {\n  while (peek() === spaceChr) {\n    next();\n  }\n}\n\nfunction isStringStart(chr) {\n  return chr === doubleChr || chr === singleChr;\n}\n\nfunction isExpStart(chr) {\n  return expStartChr[chr];\n}\n\nfunction isExpEnd(start, chr) {\n  return expChrPair[start] === chr;\n}\n\nfunction parseString() {\n  var stringQuote = next();\n  var chr;\n  while (!eof()) {\n    chr = next();\n    // escape char\n    if (chr === escapeChr) {\n      next();\n    } else if (chr === stringQuote) {\n      break;\n    }\n  }\n}\n\nfunction parseSpecialExp(chr) {\n  var inExp = 0;\n  var startChr = chr;\n\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n      continue;\n    }\n\n    if (startChr === chr) {\n      inExp++;\n    }\n    if (isExpEnd(startChr, chr)) {\n      inExp--;\n    }\n\n    next();\n\n    if (inExp === 0) {\n      break;\n    }\n  }\n}\n\n/**\n * syntax:\n * expression | filterName  [arg  arg [| filterName arg arg]]\n */\n\nfunction parseExpression() {\n  var start = index;\n  while (!eof()) {\n    chr = peek();\n    if (isStringStart(chr)) {\n      parseString();\n    } else if (isExpStart(chr)) {\n      parseSpecialExp(chr);\n    } else if (chr === pipeChr) {\n      next();\n      chr = peek();\n      if (chr === pipeChr) {\n        next();\n      } else {\n        if (state === startState || state === filterArgState) {\n          state = filterState;\n        }\n        break;\n      }\n    } else if (chr === spaceChr && (state === filterNameState || state === filterArgState)) {\n      eatSpace();\n      break;\n    } else {\n      if (state === filterState) {\n        state = filterNameState;\n      }\n      next();\n    }\n  }\n\n  return str.slice(start + 1, index) || null;\n}\n\nfunction parseFilterList() {\n  var filters = [];\n  while (!eof()) {\n    filters.push(parseFilter());\n  }\n  return filters;\n}\n\nfunction parseFilter() {\n  var filter = {};\n  var args;\n\n  state = filterState;\n  filter.name = parseExpression().trim();\n\n  state = filterArgState;\n  args = parseFilterArguments();\n\n  if (args.length) {\n    filter.args = args;\n  }\n  return filter;\n}\n\nfunction parseFilterArguments() {\n  var args = [];\n  while (!eof() && state !== filterState) {\n    var arg = parseExpression();\n    if (!arg) {\n      break;\n    }\n    args.push(processFilterArg(arg));\n  }\n\n  return args;\n}\n\n/**\n * Check if an argument is dynamic and strip quotes.\n *\n * @param {String} arg\n * @return {Object}\n */\n\nfunction processFilterArg(arg) {\n  if (reservedArgRE.test(arg)) {\n    return {\n      value: toNumber(arg),\n      dynamic: false\n    };\n  } else {\n    var stripped = stripQuotes(arg);\n    var dynamic = stripped === arg;\n    return {\n      value: dynamic ? arg : stripped,\n      dynamic: dynamic\n    };\n  }\n}\n\n/**\n * Parse a directive value and extract the expression\n * and its filters into a descriptor.\n *\n * Example:\n *\n * \"a + 1 | uppercase\" will yield:\n * {\n *   expression: 'a + 1',\n *   filters: [\n *     { name: 'uppercase', args: null }\n *   ]\n * }\n *\n * @param {String} s\n * @return {Object}\n */\n\nfunction parseDirective(s) {\n  var hit = cache$1.get(s);\n  if (hit) {\n    return hit;\n  }\n\n  // reset parser state\n  str = s;\n  dir = {};\n  len = str.length;\n  index = -1;\n  chr = '';\n  state = startState;\n\n  var filters;\n\n  if (str.indexOf('|') < 0) {\n    dir.expression = str.trim();\n  } else {\n    dir.expression = parseExpression().trim();\n    filters = parseFilterList();\n    if (filters.length) {\n      dir.filters = filters;\n    }\n  }\n\n  cache$1.put(s, dir);\n  return dir;\n}\n\nvar directive = Object.freeze({\n  parseDirective: parseDirective\n});\n\nvar regexEscapeRE = /[-.*+?^${}()|[\\]\\/\\\\]/g;\nvar cache = undefined;\nvar tagRE = undefined;\nvar htmlRE = undefined;\n/**\n * Escape a string so it can be used in a RegExp\n * constructor.\n *\n * @param {String} str\n */\n\nfunction escapeRegex(str) {\n  return str.replace(regexEscapeRE, '\\\\$&');\n}\n\nfunction compileRegex() {\n  var open = escapeRegex(config.delimiters[0]);\n  var close = escapeRegex(config.delimiters[1]);\n  var unsafeOpen = escapeRegex(config.unsafeDelimiters[0]);\n  var unsafeClose = escapeRegex(config.unsafeDelimiters[1]);\n  tagRE = new RegExp(unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '|' + open + '((?:.|\\\\n)+?)' + close, 'g');\n  htmlRE = new RegExp('^' + unsafeOpen + '((?:.|\\\\n)+?)' + unsafeClose + '$');\n  // reset cache\n  cache = new Cache(1000);\n}\n\n/**\n * Parse a template text string into an array of tokens.\n *\n * @param {String} text\n * @return {Array<Object> | null}\n *               - {String} type\n *               - {String} value\n *               - {Boolean} [html]\n *               - {Boolean} [oneTime]\n */\n\nfunction parseText(text) {\n  if (!cache) {\n    compileRegex();\n  }\n  var hit = cache.get(text);\n  if (hit) {\n    return hit;\n  }\n  if (!tagRE.test(text)) {\n    return null;\n  }\n  var tokens = [];\n  var lastIndex = tagRE.lastIndex = 0;\n  var match, index, html, value, first, oneTime;\n  /* eslint-disable no-cond-assign */\n  while (match = tagRE.exec(text)) {\n    /* eslint-enable no-cond-assign */\n    index = match.index;\n    // push text token\n    if (index > lastIndex) {\n      tokens.push({\n        value: text.slice(lastIndex, index)\n      });\n    }\n    // tag token\n    html = htmlRE.test(match[0]);\n    value = html ? match[1] : match[2];\n    first = value.charCodeAt(0);\n    oneTime = first === 42; // *\n    value = oneTime ? value.slice(1) : value;\n    tokens.push({\n      tag: true,\n      value: value.trim(),\n      html: html,\n      oneTime: oneTime\n    });\n    lastIndex = index + match[0].length;\n  }\n  if (lastIndex < text.length) {\n    tokens.push({\n      value: text.slice(lastIndex)\n    });\n  }\n  cache.put(text, tokens);\n  return tokens;\n}\n\n/**\n * Format a list of tokens into an expression.\n * e.g. tokens parsed from 'a {{b}} c' can be serialized\n * into one single expression as '\"a \" + b + \" c\"'.\n *\n * @param {Array} tokens\n * @param {Vue} [vm]\n * @return {String}\n */\n\nfunction tokensToExp(tokens, vm) {\n  if (tokens.length > 1) {\n    return tokens.map(function (token) {\n      return formatToken(token, vm);\n    }).join('+');\n  } else {\n    return formatToken(tokens[0], vm, true);\n  }\n}\n\n/**\n * Format a single token.\n *\n * @param {Object} token\n * @param {Vue} [vm]\n * @param {Boolean} [single]\n * @return {String}\n */\n\nfunction formatToken(token, vm, single) {\n  return token.tag ? token.oneTime && vm ? '\"' + vm.$eval(token.value) + '\"' : inlineFilters(token.value, single) : '\"' + token.value + '\"';\n}\n\n/**\n * For an attribute with multiple interpolation tags,\n * e.g. attr=\"some-{{thing | filter}}\", in order to combine\n * the whole thing into a single watchable expression, we\n * have to inline those filters. This function does exactly\n * that. This is a bit hacky but it avoids heavy changes\n * to directive parser and watcher mechanism.\n *\n * @param {String} exp\n * @param {Boolean} single\n * @return {String}\n */\n\nvar filterRE = /[^|]\\|[^|]/;\nfunction inlineFilters(exp, single) {\n  if (!filterRE.test(exp)) {\n    return single ? exp : '(' + exp + ')';\n  } else {\n    var dir = parseDirective(exp);\n    if (!dir.filters) {\n      return '(' + exp + ')';\n    } else {\n      return 'this._applyFilters(' + dir.expression + // value\n      ',null,' + // oldValue (null for read)\n      JSON.stringify(dir.filters) + // filter descriptors\n      ',false)'; // write?\n    }\n  }\n}\n\nvar text = Object.freeze({\n  compileRegex: compileRegex,\n  parseText: parseText,\n  tokensToExp: tokensToExp\n});\n\nvar delimiters = ['{{', '}}'];\nvar unsafeDelimiters = ['{{{', '}}}'];\n\nvar config = Object.defineProperties({\n\n  /**\n   * Whether to print debug messages.\n   * Also enables stack trace for warnings.\n   *\n   * @type {Boolean}\n   */\n\n  debug: false,\n\n  /**\n   * Whether to suppress warnings.\n   *\n   * @type {Boolean}\n   */\n\n  silent: false,\n\n  /**\n   * Whether to use async rendering.\n   */\n\n  async: true,\n\n  /**\n   * Whether to warn against errors caught when evaluating\n   * expressions.\n   */\n\n  warnExpressionErrors: true,\n\n  /**\n   * Whether to allow devtools inspection.\n   * Disabled by default in production builds.\n   */\n\n  devtools: process.env.NODE_ENV !== 'production',\n\n  /**\n   * Internal flag to indicate the delimiters have been\n   * changed.\n   *\n   * @type {Boolean}\n   */\n\n  _delimitersChanged: true,\n\n  /**\n   * List of asset types that a component can own.\n   *\n   * @type {Array}\n   */\n\n  _assetTypes: ['component', 'directive', 'elementDirective', 'filter', 'transition', 'partial'],\n\n  /**\n   * prop binding modes\n   */\n\n  _propBindingModes: {\n    ONE_WAY: 0,\n    TWO_WAY: 1,\n    ONE_TIME: 2\n  },\n\n  /**\n   * Max circular updates allowed in a batcher flush cycle.\n   */\n\n  _maxUpdateCount: 100\n\n}, {\n  delimiters: { /**\n                 * Interpolation delimiters. Changing these would trigger\n                 * the text parser to re-compile the regular expressions.\n                 *\n                 * @type {Array<String>}\n                 */\n\n    get: function get() {\n      return delimiters;\n    },\n    set: function set(val) {\n      delimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  },\n  unsafeDelimiters: {\n    get: function get() {\n      return unsafeDelimiters;\n    },\n    set: function set(val) {\n      unsafeDelimiters = val;\n      compileRegex();\n    },\n    configurable: true,\n    enumerable: true\n  }\n});\n\nvar warn = undefined;\nvar formatComponentName = undefined;\n\nif (process.env.NODE_ENV !== 'production') {\n  (function () {\n    var hasConsole = typeof console !== 'undefined';\n\n    warn = function (msg, vm) {\n      if (hasConsole && !config.silent) {\n        console.error('[Vue warn]: ' + msg + (vm ? formatComponentName(vm) : ''));\n      }\n    };\n\n    formatComponentName = function (vm) {\n      var name = vm._isVue ? vm.$options.name : vm.name;\n      return name ? ' (found in component: <' + hyphenate(name) + '>)' : '';\n    };\n  })();\n}\n\n/**\n * Append with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction appendWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    target.appendChild(el);\n  }, vm, cb);\n}\n\n/**\n * InsertBefore with transition.\n *\n * @param {Element} el\n * @param {Element} target\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction beforeWithTransition(el, target, vm, cb) {\n  applyTransition(el, 1, function () {\n    before(el, target);\n  }, vm, cb);\n}\n\n/**\n * Remove with transition.\n *\n * @param {Element} el\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction removeWithTransition(el, vm, cb) {\n  applyTransition(el, -1, function () {\n    remove(el);\n  }, vm, cb);\n}\n\n/**\n * Apply transitions with an operation callback.\n *\n * @param {Element} el\n * @param {Number} direction\n *                  1: enter\n *                 -1: leave\n * @param {Function} op - the actual DOM operation\n * @param {Vue} vm\n * @param {Function} [cb]\n */\n\nfunction applyTransition(el, direction, op, vm, cb) {\n  var transition = el.__v_trans;\n  if (!transition ||\n  // skip if there are no js hooks and CSS transition is\n  // not supported\n  !transition.hooks && !transitionEndEvent ||\n  // skip transitions for initial compile\n  !vm._isCompiled ||\n  // if the vm is being manipulated by a parent directive\n  // during the parent's compilation phase, skip the\n  // animation.\n  vm.$parent && !vm.$parent._isCompiled) {\n    op();\n    if (cb) cb();\n    return;\n  }\n  var action = direction > 0 ? 'enter' : 'leave';\n  transition[action](op, cb);\n}\n\nvar transition = Object.freeze({\n  appendWithTransition: appendWithTransition,\n  beforeWithTransition: beforeWithTransition,\n  removeWithTransition: removeWithTransition,\n  applyTransition: applyTransition\n});\n\n/**\n * Query an element selector if it's not an element already.\n *\n * @param {String|Element} el\n * @return {Element}\n */\n\nfunction query(el) {\n  if (typeof el === 'string') {\n    var selector = el;\n    el = document.querySelector(el);\n    if (!el) {\n      process.env.NODE_ENV !== 'production' && warn('Cannot find element: ' + selector);\n    }\n  }\n  return el;\n}\n\n/**\n * Check if a node is in the document.\n * Note: document.documentElement.contains should work here\n * but always returns false for comment nodes in phantomjs,\n * making unit tests difficult. This is fixed by doing the\n * contains() check on the node's parentNode instead of\n * the node itself.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction inDoc(node) {\n  if (!node) return false;\n  var doc = node.ownerDocument.documentElement;\n  var parent = node.parentNode;\n  return doc === node || doc === parent || !!(parent && parent.nodeType === 1 && doc.contains(parent));\n}\n\n/**\n * Get and remove an attribute from a node.\n *\n * @param {Node} node\n * @param {String} _attr\n */\n\nfunction getAttr(node, _attr) {\n  var val = node.getAttribute(_attr);\n  if (val !== null) {\n    node.removeAttribute(_attr);\n  }\n  return val;\n}\n\n/**\n * Get an attribute with colon or v-bind: prefix.\n *\n * @param {Node} node\n * @param {String} name\n * @return {String|null}\n */\n\nfunction getBindAttr(node, name) {\n  var val = getAttr(node, ':' + name);\n  if (val === null) {\n    val = getAttr(node, 'v-bind:' + name);\n  }\n  return val;\n}\n\n/**\n * Check the presence of a bind attribute.\n *\n * @param {Node} node\n * @param {String} name\n * @return {Boolean}\n */\n\nfunction hasBindAttr(node, name) {\n  return node.hasAttribute(name) || node.hasAttribute(':' + name) || node.hasAttribute('v-bind:' + name);\n}\n\n/**\n * Insert el before target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction before(el, target) {\n  target.parentNode.insertBefore(el, target);\n}\n\n/**\n * Insert el after target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction after(el, target) {\n  if (target.nextSibling) {\n    before(el, target.nextSibling);\n  } else {\n    target.parentNode.appendChild(el);\n  }\n}\n\n/**\n * Remove el from DOM\n *\n * @param {Element} el\n */\n\nfunction remove(el) {\n  el.parentNode.removeChild(el);\n}\n\n/**\n * Prepend el to target\n *\n * @param {Element} el\n * @param {Element} target\n */\n\nfunction prepend(el, target) {\n  if (target.firstChild) {\n    before(el, target.firstChild);\n  } else {\n    target.appendChild(el);\n  }\n}\n\n/**\n * Replace target with el\n *\n * @param {Element} target\n * @param {Element} el\n */\n\nfunction replace(target, el) {\n  var parent = target.parentNode;\n  if (parent) {\n    parent.replaceChild(el, target);\n  }\n}\n\n/**\n * Add event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n * @param {Boolean} [useCapture]\n */\n\nfunction on(el, event, cb, useCapture) {\n  el.addEventListener(event, cb, useCapture);\n}\n\n/**\n * Remove event listener shorthand.\n *\n * @param {Element} el\n * @param {String} event\n * @param {Function} cb\n */\n\nfunction off(el, event, cb) {\n  el.removeEventListener(event, cb);\n}\n\n/**\n * For IE9 compat: when both class and :class are present\n * getAttribute('class') returns wrong value...\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getClass(el) {\n  var classname = el.className;\n  if (typeof classname === 'object') {\n    classname = classname.baseVal || '';\n  }\n  return classname;\n}\n\n/**\n * In IE9, setAttribute('class') will result in empty class\n * if the element also has the :class attribute; However in\n * PhantomJS, setting `className` does not work on SVG elements...\n * So we have to do a conditional check here.\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction setClass(el, cls) {\n  /* istanbul ignore if */\n  if (isIE9 && !/svg$/.test(el.namespaceURI)) {\n    el.className = cls;\n  } else {\n    el.setAttribute('class', cls);\n  }\n}\n\n/**\n * Add class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction addClass(el, cls) {\n  if (el.classList) {\n    el.classList.add(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    if (cur.indexOf(' ' + cls + ' ') < 0) {\n      setClass(el, (cur + cls).trim());\n    }\n  }\n}\n\n/**\n * Remove class with compatibility for IE & SVG\n *\n * @param {Element} el\n * @param {String} cls\n */\n\nfunction removeClass(el, cls) {\n  if (el.classList) {\n    el.classList.remove(cls);\n  } else {\n    var cur = ' ' + getClass(el) + ' ';\n    var tar = ' ' + cls + ' ';\n    while (cur.indexOf(tar) >= 0) {\n      cur = cur.replace(tar, ' ');\n    }\n    setClass(el, cur.trim());\n  }\n  if (!el.className) {\n    el.removeAttribute('class');\n  }\n}\n\n/**\n * Extract raw content inside an element into a temporary\n * container div\n *\n * @param {Element} el\n * @param {Boolean} asFragment\n * @return {Element|DocumentFragment}\n */\n\nfunction extractContent(el, asFragment) {\n  var child;\n  var rawContent;\n  /* istanbul ignore if */\n  if (isTemplate(el) && isFragment(el.content)) {\n    el = el.content;\n  }\n  if (el.hasChildNodes()) {\n    trimNode(el);\n    rawContent = asFragment ? document.createDocumentFragment() : document.createElement('div');\n    /* eslint-disable no-cond-assign */\n    while (child = el.firstChild) {\n      /* eslint-enable no-cond-assign */\n      rawContent.appendChild(child);\n    }\n  }\n  return rawContent;\n}\n\n/**\n * Trim possible empty head/tail text and comment\n * nodes inside a parent.\n *\n * @param {Node} node\n */\n\nfunction trimNode(node) {\n  var child;\n  /* eslint-disable no-sequences */\n  while ((child = node.firstChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  while ((child = node.lastChild, isTrimmable(child))) {\n    node.removeChild(child);\n  }\n  /* eslint-enable no-sequences */\n}\n\nfunction isTrimmable(node) {\n  return node && (node.nodeType === 3 && !node.data.trim() || node.nodeType === 8);\n}\n\n/**\n * Check if an element is a template tag.\n * Note if the template appears inside an SVG its tagName\n * will be in lowercase.\n *\n * @param {Element} el\n */\n\nfunction isTemplate(el) {\n  return el.tagName && el.tagName.toLowerCase() === 'template';\n}\n\n/**\n * Create an \"anchor\" for performing dom insertion/removals.\n * This is used in a number of scenarios:\n * - fragment instance\n * - v-html\n * - v-if\n * - v-for\n * - component\n *\n * @param {String} content\n * @param {Boolean} persist - IE trashes empty textNodes on\n *                            cloneNode(true), so in certain\n *                            cases the anchor needs to be\n *                            non-empty to be persisted in\n *                            templates.\n * @return {Comment|Text}\n */\n\nfunction createAnchor(content, persist) {\n  var anchor = config.debug ? document.createComment(content) : document.createTextNode(persist ? ' ' : '');\n  anchor.__v_anchor = true;\n  return anchor;\n}\n\n/**\n * Find a component ref attribute that starts with $.\n *\n * @param {Element} node\n * @return {String|undefined}\n */\n\nvar refRE = /^v-ref:/;\n\nfunction findRef(node) {\n  if (node.hasAttributes()) {\n    var attrs = node.attributes;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      var name = attrs[i].name;\n      if (refRE.test(name)) {\n        return camelize(name.replace(refRE, ''));\n      }\n    }\n  }\n}\n\n/**\n * Map a function to a range of nodes .\n *\n * @param {Node} node\n * @param {Node} end\n * @param {Function} op\n */\n\nfunction mapNodeRange(node, end, op) {\n  var next;\n  while (node !== end) {\n    next = node.nextSibling;\n    op(node);\n    node = next;\n  }\n  op(end);\n}\n\n/**\n * Remove a range of nodes with transition, store\n * the nodes in a fragment with correct ordering,\n * and call callback when done.\n *\n * @param {Node} start\n * @param {Node} end\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Function} cb\n */\n\nfunction removeNodeRange(start, end, vm, frag, cb) {\n  var done = false;\n  var removed = 0;\n  var nodes = [];\n  mapNodeRange(start, end, function (node) {\n    if (node === end) done = true;\n    nodes.push(node);\n    removeWithTransition(node, vm, onRemoved);\n  });\n  function onRemoved() {\n    removed++;\n    if (done && removed >= nodes.length) {\n      for (var i = 0; i < nodes.length; i++) {\n        frag.appendChild(nodes[i]);\n      }\n      cb && cb();\n    }\n  }\n}\n\n/**\n * Check if a node is a DocumentFragment.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isFragment(node) {\n  return node && node.nodeType === 11;\n}\n\n/**\n * Get outerHTML of elements, taking care\n * of SVG elements in IE as well.\n *\n * @param {Element} el\n * @return {String}\n */\n\nfunction getOuterHTML(el) {\n  if (el.outerHTML) {\n    return el.outerHTML;\n  } else {\n    var container = document.createElement('div');\n    container.appendChild(el.cloneNode(true));\n    return container.innerHTML;\n  }\n}\n\nvar commonTagRE = /^(div|p|span|img|a|b|i|br|ul|ol|li|h1|h2|h3|h4|h5|h6|code|pre|table|th|td|tr|form|label|input|select|option|nav|article|section|header|footer)$/i;\nvar reservedTagRE = /^(slot|partial|component)$/i;\n\nvar isUnknownElement = undefined;\nif (process.env.NODE_ENV !== 'production') {\n  isUnknownElement = function (el, tag) {\n    if (tag.indexOf('-') > -1) {\n      // http://stackoverflow.com/a/28210364/1070244\n      return el.constructor === window.HTMLUnknownElement || el.constructor === window.HTMLElement;\n    } else {\n      return (/HTMLUnknownElement/.test(el.toString()) &&\n        // Chrome returns unknown for several HTML5 elements.\n        // https://code.google.com/p/chromium/issues/detail?id=540526\n        // Firefox returns unknown for some \"Interactive elements.\"\n        !/^(data|time|rtc|rb|details|dialog|summary)$/.test(tag)\n      );\n    }\n  };\n}\n\n/**\n * Check if an element is a component, if yes return its\n * component id.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction checkComponentAttr(el, options) {\n  var tag = el.tagName.toLowerCase();\n  var hasAttrs = el.hasAttributes();\n  if (!commonTagRE.test(tag) && !reservedTagRE.test(tag)) {\n    if (resolveAsset(options, 'components', tag)) {\n      return { id: tag };\n    } else {\n      var is = hasAttrs && getIsBinding(el, options);\n      if (is) {\n        return is;\n      } else if (process.env.NODE_ENV !== 'production') {\n        var expectedTag = options._componentNameMap && options._componentNameMap[tag];\n        if (expectedTag) {\n          warn('Unknown custom element: <' + tag + '> - ' + 'did you mean <' + expectedTag + '>? ' + 'HTML is case-insensitive, remember to use kebab-case in templates.');\n        } else if (isUnknownElement(el, tag)) {\n          warn('Unknown custom element: <' + tag + '> - did you ' + 'register the component correctly? For recursive components, ' + 'make sure to provide the \"name\" option.');\n        }\n      }\n    }\n  } else if (hasAttrs) {\n    return getIsBinding(el, options);\n  }\n}\n\n/**\n * Get \"is\" binding from an element.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Object|undefined}\n */\n\nfunction getIsBinding(el, options) {\n  // dynamic syntax\n  var exp = el.getAttribute('is');\n  if (exp != null) {\n    if (resolveAsset(options, 'components', exp)) {\n      el.removeAttribute('is');\n      return { id: exp };\n    }\n  } else {\n    exp = getBindAttr(el, 'is');\n    if (exp != null) {\n      return { id: exp, dynamic: true };\n    }\n  }\n}\n\n/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n *\n * All strategy functions follow the same signature:\n *\n * @param {*} parentVal\n * @param {*} childVal\n * @param {Vue} [vm]\n */\n\nvar strats = config.optionMergeStrategies = Object.create(null);\n\n/**\n * Helper that recursively merges two data objects together.\n */\n\nfunction mergeData(to, from) {\n  var key, toVal, fromVal;\n  for (key in from) {\n    toVal = to[key];\n    fromVal = from[key];\n    if (!hasOwn(to, key)) {\n      set(to, key, fromVal);\n    } else if (isObject(toVal) && isObject(fromVal)) {\n      mergeData(toVal, fromVal);\n    }\n  }\n  return to;\n}\n\n/**\n * Data\n */\n\nstrats.data = function (parentVal, childVal, vm) {\n  if (!vm) {\n    // in a Vue.extend merge, both should be functions\n    if (!childVal) {\n      return parentVal;\n    }\n    if (typeof childVal !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('The \"data\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n      return parentVal;\n    }\n    if (!parentVal) {\n      return childVal;\n    }\n    // when parentVal & childVal are both present,\n    // we need to return a function that returns the\n    // merged result of both functions... no need to\n    // check if parentVal is a function here because\n    // it has to be a function to pass previous merges.\n    return function mergedDataFn() {\n      return mergeData(childVal.call(this), parentVal.call(this));\n    };\n  } else if (parentVal || childVal) {\n    return function mergedInstanceDataFn() {\n      // instance merge\n      var instanceData = typeof childVal === 'function' ? childVal.call(vm) : childVal;\n      var defaultData = typeof parentVal === 'function' ? parentVal.call(vm) : undefined;\n      if (instanceData) {\n        return mergeData(instanceData, defaultData);\n      } else {\n        return defaultData;\n      }\n    };\n  }\n};\n\n/**\n * El\n */\n\nstrats.el = function (parentVal, childVal, vm) {\n  if (!vm && childVal && typeof childVal !== 'function') {\n    process.env.NODE_ENV !== 'production' && warn('The \"el\" option should be a function ' + 'that returns a per-instance value in component ' + 'definitions.', vm);\n    return;\n  }\n  var ret = childVal || parentVal;\n  // invoke the element factory if this is instance merge\n  return vm && typeof ret === 'function' ? ret.call(vm) : ret;\n};\n\n/**\n * Hooks and param attributes are merged as arrays.\n */\n\nstrats.init = strats.created = strats.ready = strats.attached = strats.detached = strats.beforeCompile = strats.compiled = strats.beforeDestroy = strats.destroyed = strats.activate = function (parentVal, childVal) {\n  return childVal ? parentVal ? parentVal.concat(childVal) : isArray(childVal) ? childVal : [childVal] : parentVal;\n};\n\n/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */\n\nfunction mergeAssets(parentVal, childVal) {\n  var res = Object.create(parentVal || null);\n  return childVal ? extend(res, guardArrayAssets(childVal)) : res;\n}\n\nconfig._assetTypes.forEach(function (type) {\n  strats[type + 's'] = mergeAssets;\n});\n\n/**\n * Events & Watchers.\n *\n * Events & watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */\n\nstrats.watch = strats.events = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = {};\n  extend(ret, parentVal);\n  for (var key in childVal) {\n    var parent = ret[key];\n    var child = childVal[key];\n    if (parent && !isArray(parent)) {\n      parent = [parent];\n    }\n    ret[key] = parent ? parent.concat(child) : [child];\n  }\n  return ret;\n};\n\n/**\n * Other object hashes.\n */\n\nstrats.props = strats.methods = strats.computed = function (parentVal, childVal) {\n  if (!childVal) return parentVal;\n  if (!parentVal) return childVal;\n  var ret = Object.create(null);\n  extend(ret, parentVal);\n  extend(ret, childVal);\n  return ret;\n};\n\n/**\n * Default strategy.\n */\n\nvar defaultStrat = function defaultStrat(parentVal, childVal) {\n  return childVal === undefined ? parentVal : childVal;\n};\n\n/**\n * Make sure component options get converted to actual\n * constructors.\n *\n * @param {Object} options\n */\n\nfunction guardComponents(options) {\n  if (options.components) {\n    var components = options.components = guardArrayAssets(options.components);\n    var ids = Object.keys(components);\n    var def;\n    if (process.env.NODE_ENV !== 'production') {\n      var map = options._componentNameMap = {};\n    }\n    for (var i = 0, l = ids.length; i < l; i++) {\n      var key = ids[i];\n      if (commonTagRE.test(key) || reservedTagRE.test(key)) {\n        process.env.NODE_ENV !== 'production' && warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + key);\n        continue;\n      }\n      // record a all lowercase <-> kebab-case mapping for\n      // possible custom element case error warning\n      if (process.env.NODE_ENV !== 'production') {\n        map[key.replace(/-/g, '').toLowerCase()] = hyphenate(key);\n      }\n      def = components[key];\n      if (isPlainObject(def)) {\n        components[key] = Vue.extend(def);\n      }\n    }\n  }\n}\n\n/**\n * Ensure all props option syntax are normalized into the\n * Object-based format.\n *\n * @param {Object} options\n */\n\nfunction guardProps(options) {\n  var props = options.props;\n  var i, val;\n  if (isArray(props)) {\n    options.props = {};\n    i = props.length;\n    while (i--) {\n      val = props[i];\n      if (typeof val === 'string') {\n        options.props[val] = null;\n      } else if (val.name) {\n        options.props[val.name] = val;\n      }\n    }\n  } else if (isPlainObject(props)) {\n    var keys = Object.keys(props);\n    i = keys.length;\n    while (i--) {\n      val = props[keys[i]];\n      if (typeof val === 'function') {\n        props[keys[i]] = { type: val };\n      }\n    }\n  }\n}\n\n/**\n * Guard an Array-format assets option and converted it\n * into the key-value Object format.\n *\n * @param {Object|Array} assets\n * @return {Object}\n */\n\nfunction guardArrayAssets(assets) {\n  if (isArray(assets)) {\n    var res = {};\n    var i = assets.length;\n    var asset;\n    while (i--) {\n      asset = assets[i];\n      var id = typeof asset === 'function' ? asset.options && asset.options.name || asset.id : asset.name || asset.id;\n      if (!id) {\n        process.env.NODE_ENV !== 'production' && warn('Array-syntax assets must provide a \"name\" or \"id\" field.');\n      } else {\n        res[id] = asset;\n      }\n    }\n    return res;\n  }\n  return assets;\n}\n\n/**\n * Merge two option objects into a new one.\n * Core utility used in both instantiation and inheritance.\n *\n * @param {Object} parent\n * @param {Object} child\n * @param {Vue} [vm] - if vm is present, indicates this is\n *                     an instantiation merge.\n */\n\nfunction mergeOptions(parent, child, vm) {\n  guardComponents(child);\n  guardProps(child);\n  if (process.env.NODE_ENV !== 'production') {\n    if (child.propsData && !vm) {\n      warn('propsData can only be used as an instantiation option.');\n    }\n  }\n  var options = {};\n  var key;\n  if (child['extends']) {\n    parent = typeof child['extends'] === 'function' ? mergeOptions(parent, child['extends'].options, vm) : mergeOptions(parent, child['extends'], vm);\n  }\n  if (child.mixins) {\n    for (var i = 0, l = child.mixins.length; i < l; i++) {\n      var mixin = child.mixins[i];\n      var mixinOptions = mixin.prototype instanceof Vue ? mixin.options : mixin;\n      parent = mergeOptions(parent, mixinOptions, vm);\n    }\n  }\n  for (key in parent) {\n    mergeField(key);\n  }\n  for (key in child) {\n    if (!hasOwn(parent, key)) {\n      mergeField(key);\n    }\n  }\n  function mergeField(key) {\n    var strat = strats[key] || defaultStrat;\n    options[key] = strat(parent[key], child[key], vm, key);\n  }\n  return options;\n}\n\n/**\n * Resolve an asset.\n * This function is used because child instances need access\n * to assets defined in its ancestor chain.\n *\n * @param {Object} options\n * @param {String} type\n * @param {String} id\n * @param {Boolean} warnMissing\n * @return {Object|Function}\n */\n\nfunction resolveAsset(options, type, id, warnMissing) {\n  /* istanbul ignore if */\n  if (typeof id !== 'string') {\n    return;\n  }\n  var assets = options[type];\n  var camelizedId;\n  var res = assets[id] ||\n  // camelCase ID\n  assets[camelizedId = camelize(id)] ||\n  // Pascal Case ID\n  assets[camelizedId.charAt(0).toUpperCase() + camelizedId.slice(1)];\n  if (process.env.NODE_ENV !== 'production' && warnMissing && !res) {\n    warn('Failed to resolve ' + type.slice(0, -1) + ': ' + id, options);\n  }\n  return res;\n}\n\nvar uid$1 = 0;\n\n/**\n * A dep is an observable that can have multiple\n * directives subscribing to it.\n *\n * @constructor\n */\nfunction Dep() {\n  this.id = uid$1++;\n  this.subs = [];\n}\n\n// the current target watcher being evaluated.\n// this is globally unique because there could be only one\n// watcher being evaluated at any time.\nDep.target = null;\n\n/**\n * Add a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.addSub = function (sub) {\n  this.subs.push(sub);\n};\n\n/**\n * Remove a directive subscriber.\n *\n * @param {Directive} sub\n */\n\nDep.prototype.removeSub = function (sub) {\n  this.subs.$remove(sub);\n};\n\n/**\n * Add self as a dependency to the target watcher.\n */\n\nDep.prototype.depend = function () {\n  Dep.target.addDep(this);\n};\n\n/**\n * Notify all subscribers of a new value.\n */\n\nDep.prototype.notify = function () {\n  // stablize the subscriber list first\n  var subs = toArray(this.subs);\n  for (var i = 0, l = subs.length; i < l; i++) {\n    subs[i].update();\n  }\n};\n\nvar arrayProto = Array.prototype;\nvar arrayMethods = Object.create(arrayProto)\n\n/**\n * Intercept mutating methods and emit events\n */\n\n;['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'].forEach(function (method) {\n  // cache original method\n  var original = arrayProto[method];\n  def(arrayMethods, method, function mutator() {\n    // avoid leaking arguments:\n    // http://jsperf.com/closure-with-arguments\n    var i = arguments.length;\n    var args = new Array(i);\n    while (i--) {\n      args[i] = arguments[i];\n    }\n    var result = original.apply(this, args);\n    var ob = this.__ob__;\n    var inserted;\n    switch (method) {\n      case 'push':\n        inserted = args;\n        break;\n      case 'unshift':\n        inserted = args;\n        break;\n      case 'splice':\n        inserted = args.slice(2);\n        break;\n    }\n    if (inserted) ob.observeArray(inserted);\n    // notify change\n    ob.dep.notify();\n    return result;\n  });\n});\n\n/**\n * Swap the element at the given index with a new value\n * and emits corresponding event.\n *\n * @param {Number} index\n * @param {*} val\n * @return {*} - replaced element\n */\n\ndef(arrayProto, '$set', function $set(index, val) {\n  if (index >= this.length) {\n    this.length = Number(index) + 1;\n  }\n  return this.splice(index, 1, val)[0];\n});\n\n/**\n * Convenience method to remove the element at given index or target element reference.\n *\n * @param {*} item\n */\n\ndef(arrayProto, '$remove', function $remove(item) {\n  /* istanbul ignore if */\n  if (!this.length) return;\n  var index = indexOf(this, item);\n  if (index > -1) {\n    return this.splice(index, 1);\n  }\n});\n\nvar arrayKeys = Object.getOwnPropertyNames(arrayMethods);\n\n/**\n * By default, when a reactive property is set, the new value is\n * also converted to become reactive. However in certain cases, e.g.\n * v-for scope alias and props, we don't want to force conversion\n * because the value may be a nested value under a frozen data structure.\n *\n * So whenever we want to set a reactive property without forcing\n * conversion on the new value, we wrap that call inside this function.\n */\n\nvar shouldConvert = true;\n\nfunction withoutConversion(fn) {\n  shouldConvert = false;\n  fn();\n  shouldConvert = true;\n}\n\n/**\n * Observer class that are attached to each observed\n * object. Once attached, the observer converts target\n * object's property keys into getter/setters that\n * collect dependencies and dispatches updates.\n *\n * @param {Array|Object} value\n * @constructor\n */\n\nfunction Observer(value) {\n  this.value = value;\n  this.dep = new Dep();\n  def(value, '__ob__', this);\n  if (isArray(value)) {\n    var augment = hasProto ? protoAugment : copyAugment;\n    augment(value, arrayMethods, arrayKeys);\n    this.observeArray(value);\n  } else {\n    this.walk(value);\n  }\n}\n\n// Instance methods\n\n/**\n * Walk through each property and convert them into\n * getter/setters. This method should only be called when\n * value type is Object.\n *\n * @param {Object} obj\n */\n\nObserver.prototype.walk = function (obj) {\n  var keys = Object.keys(obj);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    this.convert(keys[i], obj[keys[i]]);\n  }\n};\n\n/**\n * Observe a list of Array items.\n *\n * @param {Array} items\n */\n\nObserver.prototype.observeArray = function (items) {\n  for (var i = 0, l = items.length; i < l; i++) {\n    observe(items[i]);\n  }\n};\n\n/**\n * Convert a property into getter/setter so we can emit\n * the events when the property is accessed/changed.\n *\n * @param {String} key\n * @param {*} val\n */\n\nObserver.prototype.convert = function (key, val) {\n  defineReactive(this.value, key, val);\n};\n\n/**\n * Add an owner vm, so that when $set/$delete mutations\n * happen we can notify owner vms to proxy the keys and\n * digest the watchers. This is only called when the object\n * is observed as an instance's root $data.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.addVm = function (vm) {\n  (this.vms || (this.vms = [])).push(vm);\n};\n\n/**\n * Remove an owner vm. This is called when the object is\n * swapped out as an instance's $data object.\n *\n * @param {Vue} vm\n */\n\nObserver.prototype.removeVm = function (vm) {\n  this.vms.$remove(vm);\n};\n\n// helpers\n\n/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n *\n * @param {Object|Array} target\n * @param {Object} src\n */\n\nfunction protoAugment(target, src) {\n  /* eslint-disable no-proto */\n  target.__proto__ = src;\n  /* eslint-enable no-proto */\n}\n\n/**\n * Augment an target Object or Array by defining\n * hidden properties.\n *\n * @param {Object|Array} target\n * @param {Object} proto\n */\n\nfunction copyAugment(target, src, keys) {\n  for (var i = 0, l = keys.length; i < l; i++) {\n    var key = keys[i];\n    def(target, key, src[key]);\n  }\n}\n\n/**\n * Attempt to create an observer instance for a value,\n * returns the new observer if successfully observed,\n * or the existing observer if the value already has one.\n *\n * @param {*} value\n * @param {Vue} [vm]\n * @return {Observer|undefined}\n * @static\n */\n\nfunction observe(value, vm) {\n  if (!value || typeof value !== 'object') {\n    return;\n  }\n  var ob;\n  if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {\n    ob = value.__ob__;\n  } else if (shouldConvert && (isArray(value) || isPlainObject(value)) && Object.isExtensible(value) && !value._isVue) {\n    ob = new Observer(value);\n  }\n  if (ob && vm) {\n    ob.addVm(vm);\n  }\n  return ob;\n}\n\n/**\n * Define a reactive property on an Object.\n *\n * @param {Object} obj\n * @param {String} key\n * @param {*} val\n */\n\nfunction defineReactive(obj, key, val) {\n  var dep = new Dep();\n\n  var property = Object.getOwnPropertyDescriptor(obj, key);\n  if (property && property.configurable === false) {\n    return;\n  }\n\n  // cater for pre-defined getter/setters\n  var getter = property && property.get;\n  var setter = property && property.set;\n\n  var childOb = observe(val);\n  Object.defineProperty(obj, key, {\n    enumerable: true,\n    configurable: true,\n    get: function reactiveGetter() {\n      var value = getter ? getter.call(obj) : val;\n      if (Dep.target) {\n        dep.depend();\n        if (childOb) {\n          childOb.dep.depend();\n        }\n        if (isArray(value)) {\n          for (var e, i = 0, l = value.length; i < l; i++) {\n            e = value[i];\n            e && e.__ob__ && e.__ob__.dep.depend();\n          }\n        }\n      }\n      return value;\n    },\n    set: function reactiveSetter(newVal) {\n      var value = getter ? getter.call(obj) : val;\n      if (newVal === value) {\n        return;\n      }\n      if (setter) {\n        setter.call(obj, newVal);\n      } else {\n        val = newVal;\n      }\n      childOb = observe(newVal);\n      dep.notify();\n    }\n  });\n}\n\n\n\nvar util = Object.freeze({\n\tdefineReactive: defineReactive,\n\tset: set,\n\tdel: del,\n\thasOwn: hasOwn,\n\tisLiteral: isLiteral,\n\tisReserved: isReserved,\n\t_toString: _toString,\n\ttoNumber: toNumber,\n\ttoBoolean: toBoolean,\n\tstripQuotes: stripQuotes,\n\tcamelize: camelize,\n\thyphenate: hyphenate,\n\tclassify: classify,\n\tbind: bind,\n\ttoArray: toArray,\n\textend: extend,\n\tisObject: isObject,\n\tisPlainObject: isPlainObject,\n\tdef: def,\n\tdebounce: _debounce,\n\tindexOf: indexOf,\n\tcancellable: cancellable,\n\tlooseEqual: looseEqual,\n\tisArray: isArray,\n\thasProto: hasProto,\n\tinBrowser: inBrowser,\n\tdevtools: devtools,\n\tisIE: isIE,\n\tisIE9: isIE9,\n\tisAndroid: isAndroid,\n\tisIOS: isIOS,\n\tget transitionProp () { return transitionProp; },\n\tget transitionEndEvent () { return transitionEndEvent; },\n\tget animationProp () { return animationProp; },\n\tget animationEndEvent () { return animationEndEvent; },\n\tnextTick: nextTick,\n\tget _Set () { return _Set; },\n\tquery: query,\n\tinDoc: inDoc,\n\tgetAttr: getAttr,\n\tgetBindAttr: getBindAttr,\n\thasBindAttr: hasBindAttr,\n\tbefore: before,\n\tafter: after,\n\tremove: remove,\n\tprepend: prepend,\n\treplace: replace,\n\ton: on,\n\toff: off,\n\tsetClass: setClass,\n\taddClass: addClass,\n\tremoveClass: removeClass,\n\textractContent: extractContent,\n\ttrimNode: trimNode,\n\tisTemplate: isTemplate,\n\tcreateAnchor: createAnchor,\n\tfindRef: findRef,\n\tmapNodeRange: mapNodeRange,\n\tremoveNodeRange: removeNodeRange,\n\tisFragment: isFragment,\n\tgetOuterHTML: getOuterHTML,\n\tmergeOptions: mergeOptions,\n\tresolveAsset: resolveAsset,\n\tcheckComponentAttr: checkComponentAttr,\n\tcommonTagRE: commonTagRE,\n\treservedTagRE: reservedTagRE,\n\tget warn () { return warn; }\n});\n\nvar uid = 0;\n\nfunction initMixin (Vue) {\n  /**\n   * The main init sequence. This is called for every\n   * instance, including ones that are created from extended\n   * constructors.\n   *\n   * @param {Object} options - this options object should be\n   *                           the result of merging class\n   *                           options and the options passed\n   *                           in to the constructor.\n   */\n\n  Vue.prototype._init = function (options) {\n    options = options || {};\n\n    this.$el = null;\n    this.$parent = options.parent;\n    this.$root = this.$parent ? this.$parent.$root : this;\n    this.$children = [];\n    this.$refs = {}; // child vm references\n    this.$els = {}; // element references\n    this._watchers = []; // all watchers as an array\n    this._directives = []; // all directives\n\n    // a uid\n    this._uid = uid++;\n\n    // a flag to avoid this being observed\n    this._isVue = true;\n\n    // events bookkeeping\n    this._events = {}; // registered callbacks\n    this._eventsCount = {}; // for $broadcast optimization\n\n    // fragment instance properties\n    this._isFragment = false;\n    this._fragment = // @type {DocumentFragment}\n    this._fragmentStart = // @type {Text|Comment}\n    this._fragmentEnd = null; // @type {Text|Comment}\n\n    // lifecycle state\n    this._isCompiled = this._isDestroyed = this._isReady = this._isAttached = this._isBeingDestroyed = this._vForRemoving = false;\n    this._unlinkFn = null;\n\n    // context:\n    // if this is a transcluded component, context\n    // will be the common parent vm of this instance\n    // and its host.\n    this._context = options._context || this.$parent;\n\n    // scope:\n    // if this is inside an inline v-for, the scope\n    // will be the intermediate scope created for this\n    // repeat fragment. this is used for linking props\n    // and container directives.\n    this._scope = options._scope;\n\n    // fragment:\n    // if this instance is compiled inside a Fragment, it\n    // needs to register itself as a child of that fragment\n    // for attach/detach to work properly.\n    this._frag = options._frag;\n    if (this._frag) {\n      this._frag.children.push(this);\n    }\n\n    // push self into parent / transclusion host\n    if (this.$parent) {\n      this.$parent.$children.push(this);\n    }\n\n    // merge options.\n    options = this.$options = mergeOptions(this.constructor.options, options, this);\n\n    // set ref\n    this._updateRef();\n\n    // initialize data as empty object.\n    // it will be filled up in _initData().\n    this._data = {};\n\n    // call init hook\n    this._callHook('init');\n\n    // initialize data observation and scope inheritance.\n    this._initState();\n\n    // setup event system and option events.\n    this._initEvents();\n\n    // call created hook\n    this._callHook('created');\n\n    // if `el` option is passed, start compilation.\n    if (options.el) {\n      this.$mount(options.el);\n    }\n  };\n}\n\nvar pathCache = new Cache(1000);\n\n// actions\nvar APPEND = 0;\nvar PUSH = 1;\nvar INC_SUB_PATH_DEPTH = 2;\nvar PUSH_SUB_PATH = 3;\n\n// states\nvar BEFORE_PATH = 0;\nvar IN_PATH = 1;\nvar BEFORE_IDENT = 2;\nvar IN_IDENT = 3;\nvar IN_SUB_PATH = 4;\nvar IN_SINGLE_QUOTE = 5;\nvar IN_DOUBLE_QUOTE = 6;\nvar AFTER_PATH = 7;\nvar ERROR = 8;\n\nvar pathStateMachine = [];\n\npathStateMachine[BEFORE_PATH] = {\n  'ws': [BEFORE_PATH],\n  'ident': [IN_IDENT, APPEND],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[IN_PATH] = {\n  'ws': [IN_PATH],\n  '.': [BEFORE_IDENT],\n  '[': [IN_SUB_PATH],\n  'eof': [AFTER_PATH]\n};\n\npathStateMachine[BEFORE_IDENT] = {\n  'ws': [BEFORE_IDENT],\n  'ident': [IN_IDENT, APPEND]\n};\n\npathStateMachine[IN_IDENT] = {\n  'ident': [IN_IDENT, APPEND],\n  '0': [IN_IDENT, APPEND],\n  'number': [IN_IDENT, APPEND],\n  'ws': [IN_PATH, PUSH],\n  '.': [BEFORE_IDENT, PUSH],\n  '[': [IN_SUB_PATH, PUSH],\n  'eof': [AFTER_PATH, PUSH]\n};\n\npathStateMachine[IN_SUB_PATH] = {\n  \"'\": [IN_SINGLE_QUOTE, APPEND],\n  '\"': [IN_DOUBLE_QUOTE, APPEND],\n  '[': [IN_SUB_PATH, INC_SUB_PATH_DEPTH],\n  ']': [IN_PATH, PUSH_SUB_PATH],\n  'eof': ERROR,\n  'else': [IN_SUB_PATH, APPEND]\n};\n\npathStateMachine[IN_SINGLE_QUOTE] = {\n  \"'\": [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_SINGLE_QUOTE, APPEND]\n};\n\npathStateMachine[IN_DOUBLE_QUOTE] = {\n  '\"': [IN_SUB_PATH, APPEND],\n  'eof': ERROR,\n  'else': [IN_DOUBLE_QUOTE, APPEND]\n};\n\n/**\n * Determine the type of a character in a keypath.\n *\n * @param {Char} ch\n * @return {String} type\n */\n\nfunction getPathCharType(ch) {\n  if (ch === undefined) {\n    return 'eof';\n  }\n\n  var code = ch.charCodeAt(0);\n\n  switch (code) {\n    case 0x5B: // [\n    case 0x5D: // ]\n    case 0x2E: // .\n    case 0x22: // \"\n    case 0x27: // '\n    case 0x30:\n      // 0\n      return ch;\n\n    case 0x5F: // _\n    case 0x24:\n      // $\n      return 'ident';\n\n    case 0x20: // Space\n    case 0x09: // Tab\n    case 0x0A: // Newline\n    case 0x0D: // Return\n    case 0xA0: // No-break space\n    case 0xFEFF: // Byte Order Mark\n    case 0x2028: // Line Separator\n    case 0x2029:\n      // Paragraph Separator\n      return 'ws';\n  }\n\n  // a-z, A-Z\n  if (code >= 0x61 && code <= 0x7A || code >= 0x41 && code <= 0x5A) {\n    return 'ident';\n  }\n\n  // 1-9\n  if (code >= 0x31 && code <= 0x39) {\n    return 'number';\n  }\n\n  return 'else';\n}\n\n/**\n * Format a subPath, return its plain form if it is\n * a literal string or number. Otherwise prepend the\n * dynamic indicator (*).\n *\n * @param {String} path\n * @return {String}\n */\n\nfunction formatSubPath(path) {\n  var trimmed = path.trim();\n  // invalid leading 0\n  if (path.charAt(0) === '0' && isNaN(path)) {\n    return false;\n  }\n  return isLiteral(trimmed) ? stripQuotes(trimmed) : '*' + trimmed;\n}\n\n/**\n * Parse a string path into an array of segments\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parse(path) {\n  var keys = [];\n  var index = -1;\n  var mode = BEFORE_PATH;\n  var subPathDepth = 0;\n  var c, newChar, key, type, transition, action, typeMap;\n\n  var actions = [];\n\n  actions[PUSH] = function () {\n    if (key !== undefined) {\n      keys.push(key);\n      key = undefined;\n    }\n  };\n\n  actions[APPEND] = function () {\n    if (key === undefined) {\n      key = newChar;\n    } else {\n      key += newChar;\n    }\n  };\n\n  actions[INC_SUB_PATH_DEPTH] = function () {\n    actions[APPEND]();\n    subPathDepth++;\n  };\n\n  actions[PUSH_SUB_PATH] = function () {\n    if (subPathDepth > 0) {\n      subPathDepth--;\n      mode = IN_SUB_PATH;\n      actions[APPEND]();\n    } else {\n      subPathDepth = 0;\n      key = formatSubPath(key);\n      if (key === false) {\n        return false;\n      } else {\n        actions[PUSH]();\n      }\n    }\n  };\n\n  function maybeUnescapeQuote() {\n    var nextChar = path[index + 1];\n    if (mode === IN_SINGLE_QUOTE && nextChar === \"'\" || mode === IN_DOUBLE_QUOTE && nextChar === '\"') {\n      index++;\n      newChar = '\\\\' + nextChar;\n      actions[APPEND]();\n      return true;\n    }\n  }\n\n  while (mode != null) {\n    index++;\n    c = path[index];\n\n    if (c === '\\\\' && maybeUnescapeQuote()) {\n      continue;\n    }\n\n    type = getPathCharType(c);\n    typeMap = pathStateMachine[mode];\n    transition = typeMap[type] || typeMap['else'] || ERROR;\n\n    if (transition === ERROR) {\n      return; // parse error\n    }\n\n    mode = transition[0];\n    action = actions[transition[1]];\n    if (action) {\n      newChar = transition[2];\n      newChar = newChar === undefined ? c : newChar;\n      if (action() === false) {\n        return;\n      }\n    }\n\n    if (mode === AFTER_PATH) {\n      keys.raw = path;\n      return keys;\n    }\n  }\n}\n\n/**\n * External parse that check for a cache hit first\n *\n * @param {String} path\n * @return {Array|undefined}\n */\n\nfunction parsePath(path) {\n  var hit = pathCache.get(path);\n  if (!hit) {\n    hit = parse(path);\n    if (hit) {\n      pathCache.put(path, hit);\n    }\n  }\n  return hit;\n}\n\n/**\n * Get from an object from a path string\n *\n * @param {Object} obj\n * @param {String} path\n */\n\nfunction getPath(obj, path) {\n  return parseExpression$1(path).get(obj);\n}\n\n/**\n * Warn against setting non-existent root path on a vm.\n */\n\nvar warnNonExistent;\nif (process.env.NODE_ENV !== 'production') {\n  warnNonExistent = function (path, vm) {\n    warn('You are setting a non-existent path \"' + path.raw + '\" ' + 'on a vm instance. Consider pre-initializing the property ' + 'with the \"data\" option for more reliable reactivity ' + 'and better performance.', vm);\n  };\n}\n\n/**\n * Set on an object from a path\n *\n * @param {Object} obj\n * @param {String | Array} path\n * @param {*} val\n */\n\nfunction setPath(obj, path, val) {\n  var original = obj;\n  if (typeof path === 'string') {\n    path = parse(path);\n  }\n  if (!path || !isObject(obj)) {\n    return false;\n  }\n  var last, key;\n  for (var i = 0, l = path.length; i < l; i++) {\n    last = obj;\n    key = path[i];\n    if (key.charAt(0) === '*') {\n      key = parseExpression$1(key.slice(1)).get.call(original, original);\n    }\n    if (i < l - 1) {\n      obj = obj[key];\n      if (!isObject(obj)) {\n        obj = {};\n        if (process.env.NODE_ENV !== 'production' && last._isVue) {\n          warnNonExistent(path, last);\n        }\n        set(last, key, obj);\n      }\n    } else {\n      if (isArray(obj)) {\n        obj.$set(key, val);\n      } else if (key in obj) {\n        obj[key] = val;\n      } else {\n        if (process.env.NODE_ENV !== 'production' && obj._isVue) {\n          warnNonExistent(path, obj);\n        }\n        set(obj, key, val);\n      }\n    }\n  }\n  return true;\n}\n\nvar path = Object.freeze({\n  parsePath: parsePath,\n  getPath: getPath,\n  setPath: setPath\n});\n\nvar expressionCache = new Cache(1000);\n\nvar allowedKeywords = 'Math,Date,this,true,false,null,undefined,Infinity,NaN,' + 'isNaN,isFinite,decodeURI,decodeURIComponent,encodeURI,' + 'encodeURIComponent,parseInt,parseFloat';\nvar allowedKeywordsRE = new RegExp('^(' + allowedKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\n// keywords that don't make sense inside expressions\nvar improperKeywords = 'break,case,class,catch,const,continue,debugger,default,' + 'delete,do,else,export,extends,finally,for,function,if,' + 'import,in,instanceof,let,return,super,switch,throw,try,' + 'var,while,with,yield,enum,await,implements,package,' + 'protected,static,interface,private,public';\nvar improperKeywordsRE = new RegExp('^(' + improperKeywords.replace(/,/g, '\\\\b|') + '\\\\b)');\n\nvar wsRE = /\\s/g;\nvar newlineRE = /\\n/g;\nvar saveRE = /[\\{,]\\s*[\\w\\$_]+\\s*:|('(?:[^'\\\\]|\\\\.)*'|\"(?:[^\"\\\\]|\\\\.)*\"|`(?:[^`\\\\]|\\\\.)*\\$\\{|\\}(?:[^`\\\\\"']|\\\\.)*`|`(?:[^`\\\\]|\\\\.)*`)|new |typeof |void /g;\nvar restoreRE = /\"(\\d+)\"/g;\nvar pathTestRE = /^[A-Za-z_$][\\w$]*(?:\\.[A-Za-z_$][\\w$]*|\\['.*?'\\]|\\[\".*?\"\\]|\\[\\d+\\]|\\[[A-Za-z_$][\\w$]*\\])*$/;\nvar identRE = /[^\\w$\\.](?:[A-Za-z_$][\\w$]*)/g;\nvar literalValueRE$1 = /^(?:true|false|null|undefined|Infinity|NaN)$/;\n\nfunction noop() {}\n\n/**\n * Save / Rewrite / Restore\n *\n * When rewriting paths found in an expression, it is\n * possible for the same letter sequences to be found in\n * strings and Object literal property keys. Therefore we\n * remove and store these parts in a temporary array, and\n * restore them after the path rewrite.\n */\n\nvar saved = [];\n\n/**\n * Save replacer\n *\n * The save regex can match two possible cases:\n * 1. An opening object literal\n * 2. A string\n * If matched as a plain string, we need to escape its\n * newlines, since the string needs to be preserved when\n * generating the function body.\n *\n * @param {String} str\n * @param {String} isString - str if matched as a string\n * @return {String} - placeholder with index\n */\n\nfunction save(str, isString) {\n  var i = saved.length;\n  saved[i] = isString ? str.replace(newlineRE, '\\\\n') : str;\n  return '\"' + i + '\"';\n}\n\n/**\n * Path rewrite replacer\n *\n * @param {String} raw\n * @return {String}\n */\n\nfunction rewrite(raw) {\n  var c = raw.charAt(0);\n  var path = raw.slice(1);\n  if (allowedKeywordsRE.test(path)) {\n    return raw;\n  } else {\n    path = path.indexOf('\"') > -1 ? path.replace(restoreRE, restore) : path;\n    return c + 'scope.' + path;\n  }\n}\n\n/**\n * Restore replacer\n *\n * @param {String} str\n * @param {String} i - matched save index\n * @return {String}\n */\n\nfunction restore(str, i) {\n  return saved[i];\n}\n\n/**\n * Rewrite an expression, prefixing all path accessors with\n * `scope.` and generate getter/setter functions.\n *\n * @param {String} exp\n * @return {Function}\n */\n\nfunction compileGetter(exp) {\n  if (improperKeywordsRE.test(exp)) {\n    process.env.NODE_ENV !== 'production' && warn('Avoid using reserved keywords in expression: ' + exp);\n  }\n  // reset state\n  saved.length = 0;\n  // save strings and object literal keys\n  var body = exp.replace(saveRE, save).replace(wsRE, '');\n  // rewrite all paths\n  // pad 1 space here because the regex matches 1 extra char\n  body = (' ' + body).replace(identRE, rewrite).replace(restoreRE, restore);\n  return makeGetterFn(body);\n}\n\n/**\n * Build a getter function. Requires eval.\n *\n * We isolate the try/catch so it doesn't affect the\n * optimization of the parse function when it is not called.\n *\n * @param {String} body\n * @return {Function|undefined}\n */\n\nfunction makeGetterFn(body) {\n  try {\n    /* eslint-disable no-new-func */\n    return new Function('scope', 'return ' + body + ';');\n    /* eslint-enable no-new-func */\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      /* istanbul ignore if */\n      if (e.toString().match(/unsafe-eval|CSP/)) {\n        warn('It seems you are using the default build of Vue.js in an environment ' + 'with Content Security Policy that prohibits unsafe-eval. ' + 'Use the CSP-compliant build instead: ' + 'http://vuejs.org/guide/installation.html#CSP-compliant-build');\n      } else {\n        warn('Invalid expression. ' + 'Generated function body: ' + body);\n      }\n    }\n    return noop;\n  }\n}\n\n/**\n * Compile a setter function for the expression.\n *\n * @param {String} exp\n * @return {Function|undefined}\n */\n\nfunction compileSetter(exp) {\n  var path = parsePath(exp);\n  if (path) {\n    return function (scope, val) {\n      setPath(scope, path, val);\n    };\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid setter expression: ' + exp);\n  }\n}\n\n/**\n * Parse an expression into re-written getter/setters.\n *\n * @param {String} exp\n * @param {Boolean} needSet\n * @return {Function}\n */\n\nfunction parseExpression$1(exp, needSet) {\n  exp = exp.trim();\n  // try cache\n  var hit = expressionCache.get(exp);\n  if (hit) {\n    if (needSet && !hit.set) {\n      hit.set = compileSetter(hit.exp);\n    }\n    return hit;\n  }\n  var res = { exp: exp };\n  res.get = isSimplePath(exp) && exp.indexOf('[') < 0\n  // optimized super simple getter\n  ? makeGetterFn('scope.' + exp)\n  // dynamic getter\n  : compileGetter(exp);\n  if (needSet) {\n    res.set = compileSetter(exp);\n  }\n  expressionCache.put(exp, res);\n  return res;\n}\n\n/**\n * Check if an expression is a simple path.\n *\n * @param {String} exp\n * @return {Boolean}\n */\n\nfunction isSimplePath(exp) {\n  return pathTestRE.test(exp) &&\n  // don't treat literal values as paths\n  !literalValueRE$1.test(exp) &&\n  // Math constants e.g. Math.PI, Math.E etc.\n  exp.slice(0, 5) !== 'Math.';\n}\n\nvar expression = Object.freeze({\n  parseExpression: parseExpression$1,\n  isSimplePath: isSimplePath\n});\n\n// we have two separate queues: one for directive updates\n// and one for user watcher registered via $watch().\n// we want to guarantee directive updates to be called\n// before user watchers so that when user watchers are\n// triggered, the DOM would have already been in updated\n// state.\n\nvar queue = [];\nvar userQueue = [];\nvar has = {};\nvar circular = {};\nvar waiting = false;\n\n/**\n * Reset the batcher's state.\n */\n\nfunction resetBatcherState() {\n  queue.length = 0;\n  userQueue.length = 0;\n  has = {};\n  circular = {};\n  waiting = false;\n}\n\n/**\n * Flush both queues and run the watchers.\n */\n\nfunction flushBatcherQueue() {\n  var _again = true;\n\n  _function: while (_again) {\n    _again = false;\n\n    runBatcherQueue(queue);\n    runBatcherQueue(userQueue);\n    // user watchers triggered more watchers,\n    // keep flushing until it depletes\n    if (queue.length) {\n      _again = true;\n      continue _function;\n    }\n    // dev tool hook\n    /* istanbul ignore if */\n    if (devtools && config.devtools) {\n      devtools.emit('flush');\n    }\n    resetBatcherState();\n  }\n}\n\n/**\n * Run the watchers in a single queue.\n *\n * @param {Array} queue\n */\n\nfunction runBatcherQueue(queue) {\n  // do not cache length because more watchers might be pushed\n  // as we run existing watchers\n  for (var i = 0; i < queue.length; i++) {\n    var watcher = queue[i];\n    var id = watcher.id;\n    has[id] = null;\n    watcher.run();\n    // in dev build, check and stop circular updates.\n    if (process.env.NODE_ENV !== 'production' && has[id] != null) {\n      circular[id] = (circular[id] || 0) + 1;\n      if (circular[id] > config._maxUpdateCount) {\n        warn('You may have an infinite update loop for watcher ' + 'with expression \"' + watcher.expression + '\"', watcher.vm);\n        break;\n      }\n    }\n  }\n  queue.length = 0;\n}\n\n/**\n * Push a watcher into the watcher queue.\n * Jobs with duplicate IDs will be skipped unless it's\n * pushed when the queue is being flushed.\n *\n * @param {Watcher} watcher\n *   properties:\n *   - {Number} id\n *   - {Function} run\n */\n\nfunction pushWatcher(watcher) {\n  var id = watcher.id;\n  if (has[id] == null) {\n    // push watcher into appropriate queue\n    var q = watcher.user ? userQueue : queue;\n    has[id] = q.length;\n    q.push(watcher);\n    // queue the flush\n    if (!waiting) {\n      waiting = true;\n      nextTick(flushBatcherQueue);\n    }\n  }\n}\n\nvar uid$2 = 0;\n\n/**\n * A watcher parses an expression, collects dependencies,\n * and fires callback when the expression value changes.\n * This is used for both the $watch() api and directives.\n *\n * @param {Vue} vm\n * @param {String|Function} expOrFn\n * @param {Function} cb\n * @param {Object} options\n *                 - {Array} filters\n *                 - {Boolean} twoWay\n *                 - {Boolean} deep\n *                 - {Boolean} user\n *                 - {Boolean} sync\n *                 - {Boolean} lazy\n *                 - {Function} [preProcess]\n *                 - {Function} [postProcess]\n * @constructor\n */\nfunction Watcher(vm, expOrFn, cb, options) {\n  // mix in options\n  if (options) {\n    extend(this, options);\n  }\n  var isFn = typeof expOrFn === 'function';\n  this.vm = vm;\n  vm._watchers.push(this);\n  this.expression = expOrFn;\n  this.cb = cb;\n  this.id = ++uid$2; // uid for batching\n  this.active = true;\n  this.dirty = this.lazy; // for lazy watchers\n  this.deps = [];\n  this.newDeps = [];\n  this.depIds = new _Set();\n  this.newDepIds = new _Set();\n  this.prevError = null; // for async error stacks\n  // parse expression for getter/setter\n  if (isFn) {\n    this.getter = expOrFn;\n    this.setter = undefined;\n  } else {\n    var res = parseExpression$1(expOrFn, this.twoWay);\n    this.getter = res.get;\n    this.setter = res.set;\n  }\n  this.value = this.lazy ? undefined : this.get();\n  // state for avoiding false triggers for deep and Array\n  // watchers during vm._digest()\n  this.queued = this.shallow = false;\n}\n\n/**\n * Evaluate the getter, and re-collect dependencies.\n */\n\nWatcher.prototype.get = function () {\n  this.beforeGet();\n  var scope = this.scope || this.vm;\n  var value;\n  try {\n    value = this.getter.call(scope, scope);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating expression ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // \"touch\" every property so they are all tracked as\n  // dependencies for deep watching\n  if (this.deep) {\n    traverse(value);\n  }\n  if (this.preProcess) {\n    value = this.preProcess(value);\n  }\n  if (this.filters) {\n    value = scope._applyFilters(value, null, this.filters, false);\n  }\n  if (this.postProcess) {\n    value = this.postProcess(value);\n  }\n  this.afterGet();\n  return value;\n};\n\n/**\n * Set the corresponding value with the setter.\n *\n * @param {*} value\n */\n\nWatcher.prototype.set = function (value) {\n  var scope = this.scope || this.vm;\n  if (this.filters) {\n    value = scope._applyFilters(value, this.value, this.filters, true);\n  }\n  try {\n    this.setter.call(scope, scope, value);\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production' && config.warnExpressionErrors) {\n      warn('Error when evaluating setter ' + '\"' + this.expression + '\": ' + e.toString(), this.vm);\n    }\n  }\n  // two-way sync for v-for alias\n  var forContext = scope.$forContext;\n  if (forContext && forContext.alias === this.expression) {\n    if (forContext.filters) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using two-way binding on ' + 'a v-for alias (' + this.expression + '), and the ' + 'v-for has filters. This will not work properly. ' + 'Either remove the filters or use an array of ' + 'objects and bind to object properties instead.', this.vm);\n      return;\n    }\n    forContext._withLock(function () {\n      if (scope.$key) {\n        // original is an object\n        forContext.rawValue[scope.$key] = value;\n      } else {\n        forContext.rawValue.$set(scope.$index, value);\n      }\n    });\n  }\n};\n\n/**\n * Prepare for dependency collection.\n */\n\nWatcher.prototype.beforeGet = function () {\n  Dep.target = this;\n};\n\n/**\n * Add a dependency to this directive.\n *\n * @param {Dep} dep\n */\n\nWatcher.prototype.addDep = function (dep) {\n  var id = dep.id;\n  if (!this.newDepIds.has(id)) {\n    this.newDepIds.add(id);\n    this.newDeps.push(dep);\n    if (!this.depIds.has(id)) {\n      dep.addSub(this);\n    }\n  }\n};\n\n/**\n * Clean up for dependency collection.\n */\n\nWatcher.prototype.afterGet = function () {\n  Dep.target = null;\n  var i = this.deps.length;\n  while (i--) {\n    var dep = this.deps[i];\n    if (!this.newDepIds.has(dep.id)) {\n      dep.removeSub(this);\n    }\n  }\n  var tmp = this.depIds;\n  this.depIds = this.newDepIds;\n  this.newDepIds = tmp;\n  this.newDepIds.clear();\n  tmp = this.deps;\n  this.deps = this.newDeps;\n  this.newDeps = tmp;\n  this.newDeps.length = 0;\n};\n\n/**\n * Subscriber interface.\n * Will be called when a dependency changes.\n *\n * @param {Boolean} shallow\n */\n\nWatcher.prototype.update = function (shallow) {\n  if (this.lazy) {\n    this.dirty = true;\n  } else if (this.sync || !config.async) {\n    this.run();\n  } else {\n    // if queued, only overwrite shallow with non-shallow,\n    // but not the other way around.\n    this.shallow = this.queued ? shallow ? this.shallow : false : !!shallow;\n    this.queued = true;\n    // record before-push error stack in debug mode\n    /* istanbul ignore if */\n    if (process.env.NODE_ENV !== 'production' && config.debug) {\n      this.prevError = new Error('[vue] async stack trace');\n    }\n    pushWatcher(this);\n  }\n};\n\n/**\n * Batcher job interface.\n * Will be called by the batcher.\n */\n\nWatcher.prototype.run = function () {\n  if (this.active) {\n    var value = this.get();\n    if (value !== this.value ||\n    // Deep watchers and watchers on Object/Arrays should fire even\n    // when the value is the same, because the value may\n    // have mutated; but only do so if this is a\n    // non-shallow update (caused by a vm digest).\n    (isObject(value) || this.deep) && !this.shallow) {\n      // set new value\n      var oldValue = this.value;\n      this.value = value;\n      // in debug + async mode, when a watcher callbacks\n      // throws, we also throw the saved before-push error\n      // so the full cross-tick stack trace is available.\n      var prevError = this.prevError;\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && config.debug && prevError) {\n        this.prevError = null;\n        try {\n          this.cb.call(this.vm, value, oldValue);\n        } catch (e) {\n          nextTick(function () {\n            throw prevError;\n          }, 0);\n          throw e;\n        }\n      } else {\n        this.cb.call(this.vm, value, oldValue);\n      }\n    }\n    this.queued = this.shallow = false;\n  }\n};\n\n/**\n * Evaluate the value of the watcher.\n * This only gets called for lazy watchers.\n */\n\nWatcher.prototype.evaluate = function () {\n  // avoid overwriting another watcher that is being\n  // collected.\n  var current = Dep.target;\n  this.value = this.get();\n  this.dirty = false;\n  Dep.target = current;\n};\n\n/**\n * Depend on all deps collected by this watcher.\n */\n\nWatcher.prototype.depend = function () {\n  var i = this.deps.length;\n  while (i--) {\n    this.deps[i].depend();\n  }\n};\n\n/**\n * Remove self from all dependencies' subcriber list.\n */\n\nWatcher.prototype.teardown = function () {\n  if (this.active) {\n    // remove self from vm's watcher list\n    // this is a somewhat expensive operation so we skip it\n    // if the vm is being destroyed or is performing a v-for\n    // re-render (the watcher list is then filtered by v-for).\n    if (!this.vm._isBeingDestroyed && !this.vm._vForRemoving) {\n      this.vm._watchers.$remove(this);\n    }\n    var i = this.deps.length;\n    while (i--) {\n      this.deps[i].removeSub(this);\n    }\n    this.active = false;\n    this.vm = this.cb = this.value = null;\n  }\n};\n\n/**\n * Recrusively traverse an object to evoke all converted\n * getters, so that every nested property inside the object\n * is collected as a \"deep\" dependency.\n *\n * @param {*} val\n */\n\nvar seenObjects = new _Set();\nfunction traverse(val, seen) {\n  var i = undefined,\n      keys = undefined;\n  if (!seen) {\n    seen = seenObjects;\n    seen.clear();\n  }\n  var isA = isArray(val);\n  var isO = isObject(val);\n  if ((isA || isO) && Object.isExtensible(val)) {\n    if (val.__ob__) {\n      var depId = val.__ob__.dep.id;\n      if (seen.has(depId)) {\n        return;\n      } else {\n        seen.add(depId);\n      }\n    }\n    if (isA) {\n      i = val.length;\n      while (i--) traverse(val[i], seen);\n    } else if (isO) {\n      keys = Object.keys(val);\n      i = keys.length;\n      while (i--) traverse(val[keys[i]], seen);\n    }\n  }\n}\n\nvar text$1 = {\n\n  bind: function bind() {\n    this.attr = this.el.nodeType === 3 ? 'data' : 'textContent';\n  },\n\n  update: function update(value) {\n    this.el[this.attr] = _toString(value);\n  }\n};\n\nvar templateCache = new Cache(1000);\nvar idSelectorCache = new Cache(1000);\n\nvar map = {\n  efault: [0, '', ''],\n  legend: [1, '<fieldset>', '</fieldset>'],\n  tr: [2, '<table><tbody>', '</tbody></table>'],\n  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>']\n};\n\nmap.td = map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];\n\nmap.option = map.optgroup = [1, '<select multiple=\"multiple\">', '</select>'];\n\nmap.thead = map.tbody = map.colgroup = map.caption = map.tfoot = [1, '<table>', '</table>'];\n\nmap.g = map.defs = map.symbol = map.use = map.image = map.text = map.circle = map.ellipse = map.line = map.path = map.polygon = map.polyline = map.rect = [1, '<svg ' + 'xmlns=\"http://www.w3.org/2000/svg\" ' + 'xmlns:xlink=\"http://www.w3.org/1999/xlink\" ' + 'xmlns:ev=\"http://www.w3.org/2001/xml-events\"' + 'version=\"1.1\">', '</svg>'];\n\n/**\n * Check if a node is a supported template node with a\n * DocumentFragment content.\n *\n * @param {Node} node\n * @return {Boolean}\n */\n\nfunction isRealTemplate(node) {\n  return isTemplate(node) && isFragment(node.content);\n}\n\nvar tagRE$1 = /<([\\w:-]+)/;\nvar entityRE = /&#?\\w+?;/;\nvar commentRE = /<!--/;\n\n/**\n * Convert a string template to a DocumentFragment.\n * Determines correct wrapping by tag types. Wrapping\n * strategy found in jQuery & component/domify.\n *\n * @param {String} templateString\n * @param {Boolean} raw\n * @return {DocumentFragment}\n */\n\nfunction stringToFragment(templateString, raw) {\n  // try a cache hit first\n  var cacheKey = raw ? templateString : templateString.trim();\n  var hit = templateCache.get(cacheKey);\n  if (hit) {\n    return hit;\n  }\n\n  var frag = document.createDocumentFragment();\n  var tagMatch = templateString.match(tagRE$1);\n  var entityMatch = entityRE.test(templateString);\n  var commentMatch = commentRE.test(templateString);\n\n  if (!tagMatch && !entityMatch && !commentMatch) {\n    // text only, return a single text node.\n    frag.appendChild(document.createTextNode(templateString));\n  } else {\n    var tag = tagMatch && tagMatch[1];\n    var wrap = map[tag] || map.efault;\n    var depth = wrap[0];\n    var prefix = wrap[1];\n    var suffix = wrap[2];\n    var node = document.createElement('div');\n\n    node.innerHTML = prefix + templateString + suffix;\n    while (depth--) {\n      node = node.lastChild;\n    }\n\n    var child;\n    /* eslint-disable no-cond-assign */\n    while (child = node.firstChild) {\n      /* eslint-enable no-cond-assign */\n      frag.appendChild(child);\n    }\n  }\n  if (!raw) {\n    trimNode(frag);\n  }\n  templateCache.put(cacheKey, frag);\n  return frag;\n}\n\n/**\n * Convert a template node to a DocumentFragment.\n *\n * @param {Node} node\n * @return {DocumentFragment}\n */\n\nfunction nodeToFragment(node) {\n  // if its a template tag and the browser supports it,\n  // its content is already a document fragment. However, iOS Safari has\n  // bug when using directly cloned template content with touch\n  // events and can cause crashes when the nodes are removed from DOM, so we\n  // have to treat template elements as string templates. (#2805)\n  /* istanbul ignore if */\n  if (isRealTemplate(node)) {\n    return stringToFragment(node.innerHTML);\n  }\n  // script template\n  if (node.tagName === 'SCRIPT') {\n    return stringToFragment(node.textContent);\n  }\n  // normal node, clone it to avoid mutating the original\n  var clonedNode = cloneNode(node);\n  var frag = document.createDocumentFragment();\n  var child;\n  /* eslint-disable no-cond-assign */\n  while (child = clonedNode.firstChild) {\n    /* eslint-enable no-cond-assign */\n    frag.appendChild(child);\n  }\n  trimNode(frag);\n  return frag;\n}\n\n// Test for the presence of the Safari template cloning bug\n// https://bugs.webkit.org/showug.cgi?id=137755\nvar hasBrokenTemplate = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var a = document.createElement('div');\n    a.innerHTML = '<template>1</template>';\n    return !a.cloneNode(true).firstChild.innerHTML;\n  } else {\n    return false;\n  }\n})();\n\n// Test for IE10/11 textarea placeholder clone bug\nvar hasTextareaCloneBug = (function () {\n  /* istanbul ignore else */\n  if (inBrowser) {\n    var t = document.createElement('textarea');\n    t.placeholder = 't';\n    return t.cloneNode(true).value === 't';\n  } else {\n    return false;\n  }\n})();\n\n/**\n * 1. Deal with Safari cloning nested <template> bug by\n *    manually cloning all template instances.\n * 2. Deal with IE10/11 textarea placeholder bug by setting\n *    the correct value after cloning.\n *\n * @param {Element|DocumentFragment} node\n * @return {Element|DocumentFragment}\n */\n\nfunction cloneNode(node) {\n  /* istanbul ignore if */\n  if (!node.querySelectorAll) {\n    return node.cloneNode();\n  }\n  var res = node.cloneNode(true);\n  var i, original, cloned;\n  /* istanbul ignore if */\n  if (hasBrokenTemplate) {\n    var tempClone = res;\n    if (isRealTemplate(node)) {\n      node = node.content;\n      tempClone = res.content;\n    }\n    original = node.querySelectorAll('template');\n    if (original.length) {\n      cloned = tempClone.querySelectorAll('template');\n      i = cloned.length;\n      while (i--) {\n        cloned[i].parentNode.replaceChild(cloneNode(original[i]), cloned[i]);\n      }\n    }\n  }\n  /* istanbul ignore if */\n  if (hasTextareaCloneBug) {\n    if (node.tagName === 'TEXTAREA') {\n      res.value = node.value;\n    } else {\n      original = node.querySelectorAll('textarea');\n      if (original.length) {\n        cloned = res.querySelectorAll('textarea');\n        i = cloned.length;\n        while (i--) {\n          cloned[i].value = original[i].value;\n        }\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Process the template option and normalizes it into a\n * a DocumentFragment that can be used as a partial or a\n * instance template.\n *\n * @param {*} template\n *        Possible values include:\n *        - DocumentFragment object\n *        - Node object of type Template\n *        - id selector: '#some-template-id'\n *        - template string: '<div><span>{{msg}}</span></div>'\n * @param {Boolean} shouldClone\n * @param {Boolean} raw\n *        inline HTML interpolation. Do not check for id\n *        selector and keep whitespace in the string.\n * @return {DocumentFragment|undefined}\n */\n\nfunction parseTemplate(template, shouldClone, raw) {\n  var node, frag;\n\n  // if the template is already a document fragment,\n  // do nothing\n  if (isFragment(template)) {\n    trimNode(template);\n    return shouldClone ? cloneNode(template) : template;\n  }\n\n  if (typeof template === 'string') {\n    // id selector\n    if (!raw && template.charAt(0) === '#') {\n      // id selector can be cached too\n      frag = idSelectorCache.get(template);\n      if (!frag) {\n        node = document.getElementById(template.slice(1));\n        if (node) {\n          frag = nodeToFragment(node);\n          // save selector to cache\n          idSelectorCache.put(template, frag);\n        }\n      }\n    } else {\n      // normal string template\n      frag = stringToFragment(template, raw);\n    }\n  } else if (template.nodeType) {\n    // a direct node\n    frag = nodeToFragment(template);\n  }\n\n  return frag && shouldClone ? cloneNode(frag) : frag;\n}\n\nvar template = Object.freeze({\n  cloneNode: cloneNode,\n  parseTemplate: parseTemplate\n});\n\nvar html = {\n\n  bind: function bind() {\n    // a comment node means this is a binding for\n    // {{{ inline unescaped html }}}\n    if (this.el.nodeType === 8) {\n      // hold nodes\n      this.nodes = [];\n      // replace the placeholder with proper anchor\n      this.anchor = createAnchor('v-html');\n      replace(this.el, this.anchor);\n    }\n  },\n\n  update: function update(value) {\n    value = _toString(value);\n    if (this.nodes) {\n      this.swap(value);\n    } else {\n      this.el.innerHTML = value;\n    }\n  },\n\n  swap: function swap(value) {\n    // remove old nodes\n    var i = this.nodes.length;\n    while (i--) {\n      remove(this.nodes[i]);\n    }\n    // convert new value to a fragment\n    // do not attempt to retrieve from id selector\n    var frag = parseTemplate(value, true, true);\n    // save a reference to these nodes so we can remove later\n    this.nodes = toArray(frag.childNodes);\n    before(frag, this.anchor);\n  }\n};\n\n/**\n * Abstraction for a partially-compiled fragment.\n * Can optionally compile content with a child scope.\n *\n * @param {Function} linker\n * @param {Vue} vm\n * @param {DocumentFragment} frag\n * @param {Vue} [host]\n * @param {Object} [scope]\n * @param {Fragment} [parentFrag]\n */\nfunction Fragment(linker, vm, frag, host, scope, parentFrag) {\n  this.children = [];\n  this.childFrags = [];\n  this.vm = vm;\n  this.scope = scope;\n  this.inserted = false;\n  this.parentFrag = parentFrag;\n  if (parentFrag) {\n    parentFrag.childFrags.push(this);\n  }\n  this.unlink = linker(vm, frag, host, scope, this);\n  var single = this.single = frag.childNodes.length === 1 &&\n  // do not go single mode if the only node is an anchor\n  !frag.childNodes[0].__v_anchor;\n  if (single) {\n    this.node = frag.childNodes[0];\n    this.before = singleBefore;\n    this.remove = singleRemove;\n  } else {\n    this.node = createAnchor('fragment-start');\n    this.end = createAnchor('fragment-end');\n    this.frag = frag;\n    prepend(this.node, frag);\n    frag.appendChild(this.end);\n    this.before = multiBefore;\n    this.remove = multiRemove;\n  }\n  this.node.__v_frag = this;\n}\n\n/**\n * Call attach/detach for all components contained within\n * this fragment. Also do so recursively for all child\n * fragments.\n *\n * @param {Function} hook\n */\n\nFragment.prototype.callHook = function (hook) {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    this.childFrags[i].callHook(hook);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    hook(this.children[i]);\n  }\n};\n\n/**\n * Insert fragment before target, single node version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction singleBefore(target, withTransition) {\n  this.inserted = true;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  method(this.node, target, this.vm);\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, single node version\n */\n\nfunction singleRemove() {\n  this.inserted = false;\n  var shouldCallRemove = inDoc(this.node);\n  var self = this;\n  this.beforeRemove();\n  removeWithTransition(this.node, this.vm, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Insert fragment before target, multi-nodes version\n *\n * @param {Node} target\n * @param {Boolean} withTransition\n */\n\nfunction multiBefore(target, withTransition) {\n  this.inserted = true;\n  var vm = this.vm;\n  var method = withTransition !== false ? beforeWithTransition : before;\n  mapNodeRange(this.node, this.end, function (node) {\n    method(node, target, vm);\n  });\n  if (inDoc(this.node)) {\n    this.callHook(attach);\n  }\n}\n\n/**\n * Remove fragment, multi-nodes version\n */\n\nfunction multiRemove() {\n  this.inserted = false;\n  var self = this;\n  var shouldCallRemove = inDoc(this.node);\n  this.beforeRemove();\n  removeNodeRange(this.node, this.end, this.vm, this.frag, function () {\n    if (shouldCallRemove) {\n      self.callHook(detach);\n    }\n    self.destroy();\n  });\n}\n\n/**\n * Prepare the fragment for removal.\n */\n\nFragment.prototype.beforeRemove = function () {\n  var i, l;\n  for (i = 0, l = this.childFrags.length; i < l; i++) {\n    // call the same method recursively on child\n    // fragments, depth-first\n    this.childFrags[i].beforeRemove(false);\n  }\n  for (i = 0, l = this.children.length; i < l; i++) {\n    // Call destroy for all contained instances,\n    // with remove:false and defer:true.\n    // Defer is necessary because we need to\n    // keep the children to call detach hooks\n    // on them.\n    this.children[i].$destroy(false, true);\n  }\n  var dirs = this.unlink.dirs;\n  for (i = 0, l = dirs.length; i < l; i++) {\n    // disable the watchers on all the directives\n    // so that the rendered content stays the same\n    // during removal.\n    dirs[i]._watcher && dirs[i]._watcher.teardown();\n  }\n};\n\n/**\n * Destroy the fragment.\n */\n\nFragment.prototype.destroy = function () {\n  if (this.parentFrag) {\n    this.parentFrag.childFrags.$remove(this);\n  }\n  this.node.__v_frag = null;\n  this.unlink();\n};\n\n/**\n * Call attach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction attach(child) {\n  if (!child._isAttached && inDoc(child.$el)) {\n    child._callHook('attached');\n  }\n}\n\n/**\n * Call detach hook for a Vue instance.\n *\n * @param {Vue} child\n */\n\nfunction detach(child) {\n  if (child._isAttached && !inDoc(child.$el)) {\n    child._callHook('detached');\n  }\n}\n\nvar linkerCache = new Cache(5000);\n\n/**\n * A factory that can be used to create instances of a\n * fragment. Caches the compiled linker if possible.\n *\n * @param {Vue} vm\n * @param {Element|String} el\n */\nfunction FragmentFactory(vm, el) {\n  this.vm = vm;\n  var template;\n  var isString = typeof el === 'string';\n  if (isString || isTemplate(el) && !el.hasAttribute('v-if')) {\n    template = parseTemplate(el, true);\n  } else {\n    template = document.createDocumentFragment();\n    template.appendChild(el);\n  }\n  this.template = template;\n  // linker can be cached, but only for components\n  var linker;\n  var cid = vm.constructor.cid;\n  if (cid > 0) {\n    var cacheId = cid + (isString ? el : getOuterHTML(el));\n    linker = linkerCache.get(cacheId);\n    if (!linker) {\n      linker = compile(template, vm.$options, true);\n      linkerCache.put(cacheId, linker);\n    }\n  } else {\n    linker = compile(template, vm.$options, true);\n  }\n  this.linker = linker;\n}\n\n/**\n * Create a fragment instance with given host and scope.\n *\n * @param {Vue} host\n * @param {Object} scope\n * @param {Fragment} parentFrag\n */\n\nFragmentFactory.prototype.create = function (host, scope, parentFrag) {\n  var frag = cloneNode(this.template);\n  return new Fragment(this.linker, this.vm, frag, host, scope, parentFrag);\n};\n\nvar ON = 700;\nvar MODEL = 800;\nvar BIND = 850;\nvar TRANSITION = 1100;\nvar EL = 1500;\nvar COMPONENT = 1500;\nvar PARTIAL = 1750;\nvar IF = 2100;\nvar FOR = 2200;\nvar SLOT = 2300;\n\nvar uid$3 = 0;\n\nvar vFor = {\n\n  priority: FOR,\n  terminal: true,\n\n  params: ['track-by', 'stagger', 'enter-stagger', 'leave-stagger'],\n\n  bind: function bind() {\n    if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('v-if')) {\n      warn('<' + this.el.tagName.toLowerCase() + ' v-for=\"' + this.expression + '\" v-if=\"' + this.el.getAttribute('v-if') + '\">: ' + 'Using v-if and v-for on the same element is not recommended - ' + 'consider filtering the source Array instead.', this.vm);\n    }\n\n    // support \"item in/of items\" syntax\n    var inMatch = this.expression.match(/(.*) (?:in|of) (.*)/);\n    if (inMatch) {\n      var itMatch = inMatch[1].match(/\\((.*),(.*)\\)/);\n      if (itMatch) {\n        this.iterator = itMatch[1].trim();\n        this.alias = itMatch[2].trim();\n      } else {\n        this.alias = inMatch[1].trim();\n      }\n      this.expression = inMatch[2];\n    }\n\n    if (!this.alias) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid v-for expression \"' + this.descriptor.raw + '\": ' + 'alias is required.', this.vm);\n      return;\n    }\n\n    // uid as a cache identifier\n    this.id = '__v-for__' + ++uid$3;\n\n    // check if this is an option list,\n    // so that we know if we need to update the <select>'s\n    // v-model when the option list has changed.\n    // because v-model has a lower priority than v-for,\n    // the v-model is not bound here yet, so we have to\n    // retrive it in the actual updateModel() function.\n    var tag = this.el.tagName;\n    this.isOption = (tag === 'OPTION' || tag === 'OPTGROUP') && this.el.parentNode.tagName === 'SELECT';\n\n    // setup anchor nodes\n    this.start = createAnchor('v-for-start');\n    this.end = createAnchor('v-for-end');\n    replace(this.el, this.end);\n    before(this.start, this.end);\n\n    // cache\n    this.cache = Object.create(null);\n\n    // fragment factory\n    this.factory = new FragmentFactory(this.vm, this.el);\n  },\n\n  update: function update(data) {\n    this.diff(data);\n    this.updateRef();\n    this.updateModel();\n  },\n\n  /**\n   * Diff, based on new data and old data, determine the\n   * minimum amount of DOM manipulations needed to make the\n   * DOM reflect the new data Array.\n   *\n   * The algorithm diffs the new data Array by storing a\n   * hidden reference to an owner vm instance on previously\n   * seen data. This allows us to achieve O(n) which is\n   * better than a levenshtein distance based algorithm,\n   * which is O(m * n).\n   *\n   * @param {Array} data\n   */\n\n  diff: function diff(data) {\n    // check if the Array was converted from an Object\n    var item = data[0];\n    var convertedFromObject = this.fromObject = isObject(item) && hasOwn(item, '$key') && hasOwn(item, '$value');\n\n    var trackByKey = this.params.trackBy;\n    var oldFrags = this.frags;\n    var frags = this.frags = new Array(data.length);\n    var alias = this.alias;\n    var iterator = this.iterator;\n    var start = this.start;\n    var end = this.end;\n    var inDocument = inDoc(start);\n    var init = !oldFrags;\n    var i, l, frag, key, value, primitive;\n\n    // First pass, go through the new Array and fill up\n    // the new frags array. If a piece of data has a cached\n    // instance for it, we reuse it. Otherwise build a new\n    // instance.\n    for (i = 0, l = data.length; i < l; i++) {\n      item = data[i];\n      key = convertedFromObject ? item.$key : null;\n      value = convertedFromObject ? item.$value : item;\n      primitive = !isObject(value);\n      frag = !init && this.getCachedFrag(value, i, key);\n      if (frag) {\n        // reusable fragment\n        frag.reused = true;\n        // update $index\n        frag.scope.$index = i;\n        // update $key\n        if (key) {\n          frag.scope.$key = key;\n        }\n        // update iterator\n        if (iterator) {\n          frag.scope[iterator] = key !== null ? key : i;\n        }\n        // update data for track-by, object repeat &\n        // primitive values.\n        if (trackByKey || convertedFromObject || primitive) {\n          withoutConversion(function () {\n            frag.scope[alias] = value;\n          });\n        }\n      } else {\n        // new instance\n        frag = this.create(value, alias, i, key);\n        frag.fresh = !init;\n      }\n      frags[i] = frag;\n      if (init) {\n        frag.before(end);\n      }\n    }\n\n    // we're done for the initial render.\n    if (init) {\n      return;\n    }\n\n    // Second pass, go through the old fragments and\n    // destroy those who are not reused (and remove them\n    // from cache)\n    var removalIndex = 0;\n    var totalRemoved = oldFrags.length - frags.length;\n    // when removing a large number of fragments, watcher removal\n    // turns out to be a perf bottleneck, so we batch the watcher\n    // removals into a single filter call!\n    this.vm._vForRemoving = true;\n    for (i = 0, l = oldFrags.length; i < l; i++) {\n      frag = oldFrags[i];\n      if (!frag.reused) {\n        this.deleteCachedFrag(frag);\n        this.remove(frag, removalIndex++, totalRemoved, inDocument);\n      }\n    }\n    this.vm._vForRemoving = false;\n    if (removalIndex) {\n      this.vm._watchers = this.vm._watchers.filter(function (w) {\n        return w.active;\n      });\n    }\n\n    // Final pass, move/insert new fragments into the\n    // right place.\n    var targetPrev, prevEl, currentPrev;\n    var insertionIndex = 0;\n    for (i = 0, l = frags.length; i < l; i++) {\n      frag = frags[i];\n      // this is the frag that we should be after\n      targetPrev = frags[i - 1];\n      prevEl = targetPrev ? targetPrev.staggerCb ? targetPrev.staggerAnchor : targetPrev.end || targetPrev.node : start;\n      if (frag.reused && !frag.staggerCb) {\n        currentPrev = findPrevFrag(frag, start, this.id);\n        if (currentPrev !== targetPrev && (!currentPrev ||\n        // optimization for moving a single item.\n        // thanks to suggestions by @livoras in #1807\n        findPrevFrag(currentPrev, start, this.id) !== targetPrev)) {\n          this.move(frag, prevEl);\n        }\n      } else {\n        // new instance, or still in stagger.\n        // insert with updated stagger index.\n        this.insert(frag, insertionIndex++, prevEl, inDocument);\n      }\n      frag.reused = frag.fresh = false;\n    }\n  },\n\n  /**\n   * Create a new fragment instance.\n   *\n   * @param {*} value\n   * @param {String} alias\n   * @param {Number} index\n   * @param {String} [key]\n   * @return {Fragment}\n   */\n\n  create: function create(value, alias, index, key) {\n    var host = this._host;\n    // create iteration scope\n    var parentScope = this._scope || this.vm;\n    var scope = Object.create(parentScope);\n    // ref holder for the scope\n    scope.$refs = Object.create(parentScope.$refs);\n    scope.$els = Object.create(parentScope.$els);\n    // make sure point $parent to parent scope\n    scope.$parent = parentScope;\n    // for two-way binding on alias\n    scope.$forContext = this;\n    // define scope properties\n    // important: define the scope alias without forced conversion\n    // so that frozen data structures remain non-reactive.\n    withoutConversion(function () {\n      defineReactive(scope, alias, value);\n    });\n    defineReactive(scope, '$index', index);\n    if (key) {\n      defineReactive(scope, '$key', key);\n    } else if (scope.$key) {\n      // avoid accidental fallback\n      def(scope, '$key', null);\n    }\n    if (this.iterator) {\n      defineReactive(scope, this.iterator, key !== null ? key : index);\n    }\n    var frag = this.factory.create(host, scope, this._frag);\n    frag.forId = this.id;\n    this.cacheFrag(value, frag, index, key);\n    return frag;\n  },\n\n  /**\n   * Update the v-ref on owner vm.\n   */\n\n  updateRef: function updateRef() {\n    var ref = this.descriptor.ref;\n    if (!ref) return;\n    var hash = (this._scope || this.vm).$refs;\n    var refs;\n    if (!this.fromObject) {\n      refs = this.frags.map(findVmFromFrag);\n    } else {\n      refs = {};\n      this.frags.forEach(function (frag) {\n        refs[frag.scope.$key] = findVmFromFrag(frag);\n      });\n    }\n    hash[ref] = refs;\n  },\n\n  /**\n   * For option lists, update the containing v-model on\n   * parent <select>.\n   */\n\n  updateModel: function updateModel() {\n    if (this.isOption) {\n      var parent = this.start.parentNode;\n      var model = parent && parent.__v_model;\n      if (model) {\n        model.forceUpdate();\n      }\n    }\n  },\n\n  /**\n   * Insert a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Node} prevEl\n   * @param {Boolean} inDocument\n   */\n\n  insert: function insert(frag, index, prevEl, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n    }\n    var staggerAmount = this.getStagger(frag, index, null, 'enter');\n    if (inDocument && staggerAmount) {\n      // create an anchor and insert it synchronously,\n      // so that we can resolve the correct order without\n      // worrying about some elements not inserted yet\n      var anchor = frag.staggerAnchor;\n      if (!anchor) {\n        anchor = frag.staggerAnchor = createAnchor('stagger-anchor');\n        anchor.__v_frag = frag;\n      }\n      after(anchor, prevEl);\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.before(anchor);\n        remove(anchor);\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      var target = prevEl.nextSibling;\n      /* istanbul ignore if */\n      if (!target) {\n        // reset end anchor position in case the position was messed up\n        // by an external drag-n-drop library.\n        after(this.end, prevEl);\n        target = this.end;\n      }\n      frag.before(target);\n    }\n  },\n\n  /**\n   * Remove a fragment. Handles staggering.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {Boolean} inDocument\n   */\n\n  remove: function remove(frag, index, total, inDocument) {\n    if (frag.staggerCb) {\n      frag.staggerCb.cancel();\n      frag.staggerCb = null;\n      // it's not possible for the same frag to be removed\n      // twice, so if we have a pending stagger callback,\n      // it means this frag is queued for enter but removed\n      // before its transition started. Since it is already\n      // destroyed, we can just leave it in detached state.\n      return;\n    }\n    var staggerAmount = this.getStagger(frag, index, total, 'leave');\n    if (inDocument && staggerAmount) {\n      var op = frag.staggerCb = cancellable(function () {\n        frag.staggerCb = null;\n        frag.remove();\n      });\n      setTimeout(op, staggerAmount);\n    } else {\n      frag.remove();\n    }\n  },\n\n  /**\n   * Move a fragment to a new position.\n   * Force no transition.\n   *\n   * @param {Fragment} frag\n   * @param {Node} prevEl\n   */\n\n  move: function move(frag, prevEl) {\n    // fix a common issue with Sortable:\n    // if prevEl doesn't have nextSibling, this means it's\n    // been dragged after the end anchor. Just re-position\n    // the end anchor to the end of the container.\n    /* istanbul ignore if */\n    if (!prevEl.nextSibling) {\n      this.end.parentNode.appendChild(this.end);\n    }\n    frag.before(prevEl.nextSibling, false);\n  },\n\n  /**\n   * Cache a fragment using track-by or the object key.\n   *\n   * @param {*} value\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {String} [key]\n   */\n\n  cacheFrag: function cacheFrag(value, frag, index, key) {\n    var trackByKey = this.params.trackBy;\n    var cache = this.cache;\n    var primitive = !isObject(value);\n    var id;\n    if (key || trackByKey || primitive) {\n      id = getTrackByKey(index, key, value, trackByKey);\n      if (!cache[id]) {\n        cache[id] = frag;\n      } else if (trackByKey !== '$index') {\n        process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n      }\n    } else {\n      id = this.id;\n      if (hasOwn(value, id)) {\n        if (value[id] === null) {\n          value[id] = frag;\n        } else {\n          process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n        }\n      } else if (Object.isExtensible(value)) {\n        def(value, id, frag);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Frozen v-for objects cannot be automatically tracked, make sure to ' + 'provide a track-by key.');\n      }\n    }\n    frag.raw = value;\n  },\n\n  /**\n   * Get a cached fragment from the value/index/key\n   *\n   * @param {*} value\n   * @param {Number} index\n   * @param {String} key\n   * @return {Fragment}\n   */\n\n  getCachedFrag: function getCachedFrag(value, index, key) {\n    var trackByKey = this.params.trackBy;\n    var primitive = !isObject(value);\n    var frag;\n    if (key || trackByKey || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      frag = this.cache[id];\n    } else {\n      frag = value[this.id];\n    }\n    if (frag && (frag.reused || frag.fresh)) {\n      process.env.NODE_ENV !== 'production' && this.warnDuplicate(value);\n    }\n    return frag;\n  },\n\n  /**\n   * Delete a fragment from cache.\n   *\n   * @param {Fragment} frag\n   */\n\n  deleteCachedFrag: function deleteCachedFrag(frag) {\n    var value = frag.raw;\n    var trackByKey = this.params.trackBy;\n    var scope = frag.scope;\n    var index = scope.$index;\n    // fix #948: avoid accidentally fall through to\n    // a parent repeater which happens to have $key.\n    var key = hasOwn(scope, '$key') && scope.$key;\n    var primitive = !isObject(value);\n    if (trackByKey || key || primitive) {\n      var id = getTrackByKey(index, key, value, trackByKey);\n      this.cache[id] = null;\n    } else {\n      value[this.id] = null;\n      frag.raw = null;\n    }\n  },\n\n  /**\n   * Get the stagger amount for an insertion/removal.\n   *\n   * @param {Fragment} frag\n   * @param {Number} index\n   * @param {Number} total\n   * @param {String} type\n   */\n\n  getStagger: function getStagger(frag, index, total, type) {\n    type = type + 'Stagger';\n    var trans = frag.node.__v_trans;\n    var hooks = trans && trans.hooks;\n    var hook = hooks && (hooks[type] || hooks.stagger);\n    return hook ? hook.call(frag, index, total) : index * parseInt(this.params[type] || this.params.stagger, 10);\n  },\n\n  /**\n   * Pre-process the value before piping it through the\n   * filters. This is passed to and called by the watcher.\n   */\n\n  _preProcess: function _preProcess(value) {\n    // regardless of type, store the un-filtered raw value.\n    this.rawValue = value;\n    return value;\n  },\n\n  /**\n   * Post-process the value after it has been piped through\n   * the filters. This is passed to and called by the watcher.\n   *\n   * It is necessary for this to be called during the\n   * watcher's dependency collection phase because we want\n   * the v-for to update when the source Object is mutated.\n   */\n\n  _postProcess: function _postProcess(value) {\n    if (isArray(value)) {\n      return value;\n    } else if (isPlainObject(value)) {\n      // convert plain object to array.\n      var keys = Object.keys(value);\n      var i = keys.length;\n      var res = new Array(i);\n      var key;\n      while (i--) {\n        key = keys[i];\n        res[i] = {\n          $key: key,\n          $value: value[key]\n        };\n      }\n      return res;\n    } else {\n      if (typeof value === 'number' && !isNaN(value)) {\n        value = range(value);\n      }\n      return value || [];\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.descriptor.ref) {\n      (this._scope || this.vm).$refs[this.descriptor.ref] = null;\n    }\n    if (this.frags) {\n      var i = this.frags.length;\n      var frag;\n      while (i--) {\n        frag = this.frags[i];\n        this.deleteCachedFrag(frag);\n        frag.destroy();\n      }\n    }\n  }\n};\n\n/**\n * Helper to find the previous element that is a fragment\n * anchor. This is necessary because a destroyed frag's\n * element could still be lingering in the DOM before its\n * leaving transition finishes, but its inserted flag\n * should have been set to false so we can skip them.\n *\n * If this is a block repeat, we want to make sure we only\n * return frag that is bound to this v-for. (see #929)\n *\n * @param {Fragment} frag\n * @param {Comment|Text} anchor\n * @param {String} id\n * @return {Fragment}\n */\n\nfunction findPrevFrag(frag, anchor, id) {\n  var el = frag.node.previousSibling;\n  /* istanbul ignore if */\n  if (!el) return;\n  frag = el.__v_frag;\n  while ((!frag || frag.forId !== id || !frag.inserted) && el !== anchor) {\n    el = el.previousSibling;\n    /* istanbul ignore if */\n    if (!el) return;\n    frag = el.__v_frag;\n  }\n  return frag;\n}\n\n/**\n * Create a range array from given number.\n *\n * @param {Number} n\n * @return {Array}\n */\n\nfunction range(n) {\n  var i = -1;\n  var ret = new Array(Math.floor(n));\n  while (++i < n) {\n    ret[i] = i;\n  }\n  return ret;\n}\n\n/**\n * Get the track by key for an item.\n *\n * @param {Number} index\n * @param {String} key\n * @param {*} value\n * @param {String} [trackByKey]\n */\n\nfunction getTrackByKey(index, key, value, trackByKey) {\n  return trackByKey ? trackByKey === '$index' ? index : trackByKey.charAt(0).match(/\\w/) ? getPath(value, trackByKey) : value[trackByKey] : key || value;\n}\n\nif (process.env.NODE_ENV !== 'production') {\n  vFor.warnDuplicate = function (value) {\n    warn('Duplicate value found in v-for=\"' + this.descriptor.raw + '\": ' + JSON.stringify(value) + '. Use track-by=\"$index\" if ' + 'you are expecting duplicate values.', this.vm);\n  };\n}\n\n/**\n * Find a vm from a fragment.\n *\n * @param {Fragment} frag\n * @return {Vue|undefined}\n */\n\nfunction findVmFromFrag(frag) {\n  var node = frag.node;\n  // handle multi-node frag\n  if (frag.end) {\n    while (!node.__vue__ && node !== frag.end && node.nextSibling) {\n      node = node.nextSibling;\n    }\n  }\n  return node.__vue__;\n}\n\nvar vIf = {\n\n  priority: IF,\n  terminal: true,\n\n  bind: function bind() {\n    var el = this.el;\n    if (!el.__vue__) {\n      // check else block\n      var next = el.nextElementSibling;\n      if (next && getAttr(next, 'v-else') !== null) {\n        remove(next);\n        this.elseEl = next;\n      }\n      // check main block\n      this.anchor = createAnchor('v-if');\n      replace(el, this.anchor);\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-if=\"' + this.expression + '\" cannot be ' + 'used on an instance root element.', this.vm);\n      this.invalid = true;\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) return;\n    if (value) {\n      if (!this.frag) {\n        this.insert();\n      }\n    } else {\n      this.remove();\n    }\n  },\n\n  insert: function insert() {\n    if (this.elseFrag) {\n      this.elseFrag.remove();\n      this.elseFrag = null;\n    }\n    // lazy init factory\n    if (!this.factory) {\n      this.factory = new FragmentFactory(this.vm, this.el);\n    }\n    this.frag = this.factory.create(this._host, this._scope, this._frag);\n    this.frag.before(this.anchor);\n  },\n\n  remove: function remove() {\n    if (this.frag) {\n      this.frag.remove();\n      this.frag = null;\n    }\n    if (this.elseEl && !this.elseFrag) {\n      if (!this.elseFactory) {\n        this.elseFactory = new FragmentFactory(this.elseEl._context || this.vm, this.elseEl);\n      }\n      this.elseFrag = this.elseFactory.create(this._host, this._scope, this._frag);\n      this.elseFrag.before(this.anchor);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n    if (this.elseFrag) {\n      this.elseFrag.destroy();\n    }\n  }\n};\n\nvar show = {\n\n  bind: function bind() {\n    // check else block\n    var next = this.el.nextElementSibling;\n    if (next && getAttr(next, 'v-else') !== null) {\n      this.elseEl = next;\n    }\n  },\n\n  update: function update(value) {\n    this.apply(this.el, value);\n    if (this.elseEl) {\n      this.apply(this.elseEl, !value);\n    }\n  },\n\n  apply: function apply(el, value) {\n    if (inDoc(el)) {\n      applyTransition(el, value ? 1 : -1, toggle, this.vm);\n    } else {\n      toggle();\n    }\n    function toggle() {\n      el.style.display = value ? '' : 'none';\n    }\n  }\n};\n\nvar text$2 = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n    var isRange = el.type === 'range';\n    var lazy = this.params.lazy;\n    var number = this.params.number;\n    var debounce = this.params.debounce;\n\n    // handle composition events.\n    //   http://blog.evanyou.me/2014/01/03/composition-event/\n    // skip this for Android because it handles composition\n    // events quite differently. Android doesn't trigger\n    // composition events for language input methods e.g.\n    // Chinese, but instead triggers them for spelling\n    // suggestions... (see Discussion/#162)\n    var composing = false;\n    if (!isAndroid && !isRange) {\n      this.on('compositionstart', function () {\n        composing = true;\n      });\n      this.on('compositionend', function () {\n        composing = false;\n        // in IE11 the \"compositionend\" event fires AFTER\n        // the \"input\" event, so the input handler is blocked\n        // at the end... have to call it here.\n        //\n        // #1327: in lazy mode this is unecessary.\n        if (!lazy) {\n          self.listener();\n        }\n      });\n    }\n\n    // prevent messing with the input when user is typing,\n    // and force update on blur.\n    this.focused = false;\n    if (!isRange && !lazy) {\n      this.on('focus', function () {\n        self.focused = true;\n      });\n      this.on('blur', function () {\n        self.focused = false;\n        // do not sync value after fragment removal (#2017)\n        if (!self._frag || self._frag.inserted) {\n          self.rawListener();\n        }\n      });\n    }\n\n    // Now attach the main listener\n    this.listener = this.rawListener = function () {\n      if (composing || !self._bound) {\n        return;\n      }\n      var val = number || isRange ? toNumber(el.value) : el.value;\n      self.set(val);\n      // force update on next tick to avoid lock & same value\n      // also only update when user is not typing\n      nextTick(function () {\n        if (self._bound && !self.focused) {\n          self.update(self._watcher.value);\n        }\n      });\n    };\n\n    // apply debounce\n    if (debounce) {\n      this.listener = _debounce(this.listener, debounce);\n    }\n\n    // Support jQuery events, since jQuery.trigger() doesn't\n    // trigger native events in some cases and some plugins\n    // rely on $.trigger()\n    //\n    // We want to make sure if a listener is attached using\n    // jQuery, it is also removed with jQuery, that's why\n    // we do the check for each directive instance and\n    // store that check result on itself. This also allows\n    // easier test coverage control by unsetting the global\n    // jQuery variable in tests.\n    this.hasjQuery = typeof jQuery === 'function';\n    if (this.hasjQuery) {\n      var method = jQuery.fn.on ? 'on' : 'bind';\n      jQuery(el)[method]('change', this.rawListener);\n      if (!lazy) {\n        jQuery(el)[method]('input', this.listener);\n      }\n    } else {\n      this.on('change', this.rawListener);\n      if (!lazy) {\n        this.on('input', this.listener);\n      }\n    }\n\n    // IE9 doesn't fire input event on backspace/del/cut\n    if (!lazy && isIE9) {\n      this.on('cut', function () {\n        nextTick(self.listener);\n      });\n      this.on('keyup', function (e) {\n        if (e.keyCode === 46 || e.keyCode === 8) {\n          self.listener();\n        }\n      });\n    }\n\n    // set initial value if present\n    if (el.hasAttribute('value') || el.tagName === 'TEXTAREA' && el.value.trim()) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    // #3029 only update when the value changes. This prevent\n    // browsers from overwriting values like selectionStart\n    value = _toString(value);\n    if (value !== this.el.value) this.el.value = value;\n  },\n\n  unbind: function unbind() {\n    var el = this.el;\n    if (this.hasjQuery) {\n      var method = jQuery.fn.off ? 'off' : 'unbind';\n      jQuery(el)[method]('change', this.listener);\n      jQuery(el)[method]('input', this.listener);\n    }\n  }\n};\n\nvar radio = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      // value overwrite via v-bind:value\n      if (el.hasOwnProperty('_value')) {\n        return el._value;\n      }\n      var val = el.value;\n      if (self.params.number) {\n        val = toNumber(val);\n      }\n      return val;\n    };\n\n    this.listener = function () {\n      self.set(self.getValue());\n    };\n    this.on('change', this.listener);\n\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    this.el.checked = looseEqual(value, this.getValue());\n  }\n};\n\nvar select = {\n\n  bind: function bind() {\n    var _this = this;\n\n    var self = this;\n    var el = this.el;\n\n    // method to force update DOM using latest value.\n    this.forceUpdate = function () {\n      if (self._watcher) {\n        self.update(self._watcher.get());\n      }\n    };\n\n    // check if this is a multiple select\n    var multiple = this.multiple = el.hasAttribute('multiple');\n\n    // attach listener\n    this.listener = function () {\n      var value = getValue(el, multiple);\n      value = self.params.number ? isArray(value) ? value.map(toNumber) : toNumber(value) : value;\n      self.set(value);\n    };\n    this.on('change', this.listener);\n\n    // if has initial value, set afterBind\n    var initValue = getValue(el, multiple, true);\n    if (multiple && initValue.length || !multiple && initValue !== null) {\n      this.afterBind = this.listener;\n    }\n\n    // All major browsers except Firefox resets\n    // selectedIndex with value -1 to 0 when the element\n    // is appended to a new parent, therefore we have to\n    // force a DOM update whenever that happens...\n    this.vm.$on('hook:attached', function () {\n      nextTick(_this.forceUpdate);\n    });\n    if (!inDoc(el)) {\n      nextTick(this.forceUpdate);\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    el.selectedIndex = -1;\n    var multi = this.multiple && isArray(value);\n    var options = el.options;\n    var i = options.length;\n    var op, val;\n    while (i--) {\n      op = options[i];\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      /* eslint-disable eqeqeq */\n      op.selected = multi ? indexOf$1(value, val) > -1 : looseEqual(value, val);\n      /* eslint-enable eqeqeq */\n    }\n  },\n\n  unbind: function unbind() {\n    /* istanbul ignore next */\n    this.vm.$off('hook:attached', this.forceUpdate);\n  }\n};\n\n/**\n * Get select value\n *\n * @param {SelectElement} el\n * @param {Boolean} multi\n * @param {Boolean} init\n * @return {Array|*}\n */\n\nfunction getValue(el, multi, init) {\n  var res = multi ? [] : null;\n  var op, val, selected;\n  for (var i = 0, l = el.options.length; i < l; i++) {\n    op = el.options[i];\n    selected = init ? op.hasAttribute('selected') : op.selected;\n    if (selected) {\n      val = op.hasOwnProperty('_value') ? op._value : op.value;\n      if (multi) {\n        res.push(val);\n      } else {\n        return val;\n      }\n    }\n  }\n  return res;\n}\n\n/**\n * Native Array.indexOf uses strict equal, but in this\n * case we need to match string/numbers with custom equal.\n *\n * @param {Array} arr\n * @param {*} val\n */\n\nfunction indexOf$1(arr, val) {\n  var i = arr.length;\n  while (i--) {\n    if (looseEqual(arr[i], val)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nvar checkbox = {\n\n  bind: function bind() {\n    var self = this;\n    var el = this.el;\n\n    this.getValue = function () {\n      return el.hasOwnProperty('_value') ? el._value : self.params.number ? toNumber(el.value) : el.value;\n    };\n\n    function getBooleanValue() {\n      var val = el.checked;\n      if (val && el.hasOwnProperty('_trueValue')) {\n        return el._trueValue;\n      }\n      if (!val && el.hasOwnProperty('_falseValue')) {\n        return el._falseValue;\n      }\n      return val;\n    }\n\n    this.listener = function () {\n      var model = self._watcher.get();\n      if (isArray(model)) {\n        var val = self.getValue();\n        var i = indexOf(model, val);\n        if (el.checked) {\n          if (i < 0) {\n            self.set(model.concat(val));\n          }\n        } else if (i > -1) {\n          self.set(model.slice(0, i).concat(model.slice(i + 1)));\n        }\n      } else {\n        self.set(getBooleanValue());\n      }\n    };\n\n    this.on('change', this.listener);\n    if (el.hasAttribute('checked')) {\n      this.afterBind = this.listener;\n    }\n  },\n\n  update: function update(value) {\n    var el = this.el;\n    if (isArray(value)) {\n      el.checked = indexOf(value, this.getValue()) > -1;\n    } else {\n      if (el.hasOwnProperty('_trueValue')) {\n        el.checked = looseEqual(value, el._trueValue);\n      } else {\n        el.checked = !!value;\n      }\n    }\n  }\n};\n\nvar handlers = {\n  text: text$2,\n  radio: radio,\n  select: select,\n  checkbox: checkbox\n};\n\nvar model = {\n\n  priority: MODEL,\n  twoWay: true,\n  handlers: handlers,\n  params: ['lazy', 'number', 'debounce'],\n\n  /**\n   * Possible elements:\n   *   <select>\n   *   <textarea>\n   *   <input type=\"*\">\n   *     - text\n   *     - checkbox\n   *     - radio\n   *     - number\n   */\n\n  bind: function bind() {\n    // friendly warning...\n    this.checkFilters();\n    if (this.hasRead && !this.hasWrite) {\n      process.env.NODE_ENV !== 'production' && warn('It seems you are using a read-only filter with ' + 'v-model=\"' + this.descriptor.raw + '\". ' + 'You might want to use a two-way filter to ensure correct behavior.', this.vm);\n    }\n    var el = this.el;\n    var tag = el.tagName;\n    var handler;\n    if (tag === 'INPUT') {\n      handler = handlers[el.type] || handlers.text;\n    } else if (tag === 'SELECT') {\n      handler = handlers.select;\n    } else if (tag === 'TEXTAREA') {\n      handler = handlers.text;\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('v-model does not support element type: ' + tag, this.vm);\n      return;\n    }\n    el.__v_model = this;\n    handler.bind.call(this);\n    this.update = handler.update;\n    this._unbind = handler.unbind;\n  },\n\n  /**\n   * Check read/write filter stats.\n   */\n\n  checkFilters: function checkFilters() {\n    var filters = this.filters;\n    if (!filters) return;\n    var i = filters.length;\n    while (i--) {\n      var filter = resolveAsset(this.vm.$options, 'filters', filters[i].name);\n      if (typeof filter === 'function' || filter.read) {\n        this.hasRead = true;\n      }\n      if (filter.write) {\n        this.hasWrite = true;\n      }\n    }\n  },\n\n  unbind: function unbind() {\n    this.el.__v_model = null;\n    this._unbind && this._unbind();\n  }\n};\n\n// keyCode aliases\nvar keyCodes = {\n  esc: 27,\n  tab: 9,\n  enter: 13,\n  space: 32,\n  'delete': [8, 46],\n  up: 38,\n  left: 37,\n  right: 39,\n  down: 40\n};\n\nfunction keyFilter(handler, keys) {\n  var codes = keys.map(function (key) {\n    var charCode = key.charCodeAt(0);\n    if (charCode > 47 && charCode < 58) {\n      return parseInt(key, 10);\n    }\n    if (key.length === 1) {\n      charCode = key.toUpperCase().charCodeAt(0);\n      if (charCode > 64 && charCode < 91) {\n        return charCode;\n      }\n    }\n    return keyCodes[key];\n  });\n  codes = [].concat.apply([], codes);\n  return function keyHandler(e) {\n    if (codes.indexOf(e.keyCode) > -1) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nfunction stopFilter(handler) {\n  return function stopHandler(e) {\n    e.stopPropagation();\n    return handler.call(this, e);\n  };\n}\n\nfunction preventFilter(handler) {\n  return function preventHandler(e) {\n    e.preventDefault();\n    return handler.call(this, e);\n  };\n}\n\nfunction selfFilter(handler) {\n  return function selfHandler(e) {\n    if (e.target === e.currentTarget) {\n      return handler.call(this, e);\n    }\n  };\n}\n\nvar on$1 = {\n\n  priority: ON,\n  acceptStatement: true,\n  keyCodes: keyCodes,\n\n  bind: function bind() {\n    // deal with iframes\n    if (this.el.tagName === 'IFRAME' && this.arg !== 'load') {\n      var self = this;\n      this.iframeBind = function () {\n        on(self.el.contentWindow, self.arg, self.handler, self.modifiers.capture);\n      };\n      this.on('load', this.iframeBind);\n    }\n  },\n\n  update: function update(handler) {\n    // stub a noop for v-on with no value,\n    // e.g. @mousedown.prevent\n    if (!this.descriptor.raw) {\n      handler = function () {};\n    }\n\n    if (typeof handler !== 'function') {\n      process.env.NODE_ENV !== 'production' && warn('v-on:' + this.arg + '=\"' + this.expression + '\" expects a function value, ' + 'got ' + handler, this.vm);\n      return;\n    }\n\n    // apply modifiers\n    if (this.modifiers.stop) {\n      handler = stopFilter(handler);\n    }\n    if (this.modifiers.prevent) {\n      handler = preventFilter(handler);\n    }\n    if (this.modifiers.self) {\n      handler = selfFilter(handler);\n    }\n    // key filter\n    var keys = Object.keys(this.modifiers).filter(function (key) {\n      return key !== 'stop' && key !== 'prevent' && key !== 'self' && key !== 'capture';\n    });\n    if (keys.length) {\n      handler = keyFilter(handler, keys);\n    }\n\n    this.reset();\n    this.handler = handler;\n\n    if (this.iframeBind) {\n      this.iframeBind();\n    } else {\n      on(this.el, this.arg, this.handler, this.modifiers.capture);\n    }\n  },\n\n  reset: function reset() {\n    var el = this.iframeBind ? this.el.contentWindow : this.el;\n    if (this.handler) {\n      off(el, this.arg, this.handler);\n    }\n  },\n\n  unbind: function unbind() {\n    this.reset();\n  }\n};\n\nvar prefixes = ['-webkit-', '-moz-', '-ms-'];\nvar camelPrefixes = ['Webkit', 'Moz', 'ms'];\nvar importantRE = /!important;?$/;\nvar propCache = Object.create(null);\n\nvar testEl = null;\n\nvar style = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (typeof value === 'string') {\n      this.el.style.cssText = value;\n    } else if (isArray(value)) {\n      this.handleObject(value.reduce(extend, {}));\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  handleObject: function handleObject(value) {\n    // cache object styles so that only changed props\n    // are actually updated.\n    var cache = this.cache || (this.cache = {});\n    var name, val;\n    for (name in cache) {\n      if (!(name in value)) {\n        this.handleSingle(name, null);\n        delete cache[name];\n      }\n    }\n    for (name in value) {\n      val = value[name];\n      if (val !== cache[name]) {\n        cache[name] = val;\n        this.handleSingle(name, val);\n      }\n    }\n  },\n\n  handleSingle: function handleSingle(prop, value) {\n    prop = normalize(prop);\n    if (!prop) return; // unsupported prop\n    // cast possible numbers/booleans into strings\n    if (value != null) value += '';\n    if (value) {\n      var isImportant = importantRE.test(value) ? 'important' : '';\n      if (isImportant) {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          warn('It\\'s probably a bad idea to use !important with inline rules. ' + 'This feature will be deprecated in a future version of Vue.');\n        }\n        value = value.replace(importantRE, '').trim();\n        this.el.style.setProperty(prop.kebab, value, isImportant);\n      } else {\n        this.el.style[prop.camel] = value;\n      }\n    } else {\n      this.el.style[prop.camel] = '';\n    }\n  }\n\n};\n\n/**\n * Normalize a CSS property name.\n * - cache result\n * - auto prefix\n * - camelCase -> dash-case\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction normalize(prop) {\n  if (propCache[prop]) {\n    return propCache[prop];\n  }\n  var res = prefix(prop);\n  propCache[prop] = propCache[res] = res;\n  return res;\n}\n\n/**\n * Auto detect the appropriate prefix for a CSS property.\n * https://gist.github.com/paulirish/523692\n *\n * @param {String} prop\n * @return {String}\n */\n\nfunction prefix(prop) {\n  prop = hyphenate(prop);\n  var camel = camelize(prop);\n  var upper = camel.charAt(0).toUpperCase() + camel.slice(1);\n  if (!testEl) {\n    testEl = document.createElement('div');\n  }\n  var i = prefixes.length;\n  var prefixed;\n  if (camel !== 'filter' && camel in testEl.style) {\n    return {\n      kebab: prop,\n      camel: camel\n    };\n  }\n  while (i--) {\n    prefixed = camelPrefixes[i] + upper;\n    if (prefixed in testEl.style) {\n      return {\n        kebab: prefixes[i] + prop,\n        camel: prefixed\n      };\n    }\n  }\n}\n\n// xlink\nvar xlinkNS = 'http://www.w3.org/1999/xlink';\nvar xlinkRE = /^xlink:/;\n\n// check for attributes that prohibit interpolations\nvar disallowedInterpAttrRE = /^v-|^:|^@|^(?:is|transition|transition-mode|debounce|track-by|stagger|enter-stagger|leave-stagger)$/;\n// these attributes should also set their corresponding properties\n// because they only affect the initial state of the element\nvar attrWithPropsRE = /^(?:value|checked|selected|muted)$/;\n// these attributes expect enumrated values of \"true\" or \"false\"\n// but are not boolean attributes\nvar enumeratedAttrRE = /^(?:draggable|contenteditable|spellcheck)$/;\n\n// these attributes should set a hidden property for\n// binding v-model to object values\nvar modelProps = {\n  value: '_value',\n  'true-value': '_trueValue',\n  'false-value': '_falseValue'\n};\n\nvar bind$1 = {\n\n  priority: BIND,\n\n  bind: function bind() {\n    var attr = this.arg;\n    var tag = this.el.tagName;\n    // should be deep watch on object mode\n    if (!attr) {\n      this.deep = true;\n    }\n    // handle interpolation bindings\n    var descriptor = this.descriptor;\n    var tokens = descriptor.interp;\n    if (tokens) {\n      // handle interpolations with one-time tokens\n      if (descriptor.hasOneTime) {\n        this.expression = tokensToExp(tokens, this._scope || this.vm);\n      }\n\n      // only allow binding on native attributes\n      if (disallowedInterpAttrRE.test(attr) || attr === 'name' && (tag === 'PARTIAL' || tag === 'SLOT')) {\n        process.env.NODE_ENV !== 'production' && warn(attr + '=\"' + descriptor.raw + '\": ' + 'attribute interpolation is not allowed in Vue.js ' + 'directives and special attributes.', this.vm);\n        this.el.removeAttribute(attr);\n        this.invalid = true;\n      }\n\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production') {\n        var raw = attr + '=\"' + descriptor.raw + '\": ';\n        // warn src\n        if (attr === 'src') {\n          warn(raw + 'interpolation in \"src\" attribute will cause ' + 'a 404 request. Use v-bind:src instead.', this.vm);\n        }\n\n        // warn style\n        if (attr === 'style') {\n          warn(raw + 'interpolation in \"style\" attribute will cause ' + 'the attribute to be discarded in Internet Explorer. ' + 'Use v-bind:style instead.', this.vm);\n        }\n      }\n    }\n  },\n\n  update: function update(value) {\n    if (this.invalid) {\n      return;\n    }\n    var attr = this.arg;\n    if (this.arg) {\n      this.handleSingle(attr, value);\n    } else {\n      this.handleObject(value || {});\n    }\n  },\n\n  // share object handler with v-bind:class\n  handleObject: style.handleObject,\n\n  handleSingle: function handleSingle(attr, value) {\n    var el = this.el;\n    var interp = this.descriptor.interp;\n    if (this.modifiers.camel) {\n      attr = camelize(attr);\n    }\n    if (!interp && attrWithPropsRE.test(attr) && attr in el) {\n      var attrValue = attr === 'value' ? value == null // IE9 will set input.value to \"null\" for null...\n      ? '' : value : value;\n\n      if (el[attr] !== attrValue) {\n        el[attr] = attrValue;\n      }\n    }\n    // set model props\n    var modelProp = modelProps[attr];\n    if (!interp && modelProp) {\n      el[modelProp] = value;\n      // update v-model if present\n      var model = el.__v_model;\n      if (model) {\n        model.listener();\n      }\n    }\n    // do not set value attribute for textarea\n    if (attr === 'value' && el.tagName === 'TEXTAREA') {\n      el.removeAttribute(attr);\n      return;\n    }\n    // update attribute\n    if (enumeratedAttrRE.test(attr)) {\n      el.setAttribute(attr, value ? 'true' : 'false');\n    } else if (value != null && value !== false) {\n      if (attr === 'class') {\n        // handle edge case #1960:\n        // class interpolation should not overwrite Vue transition class\n        if (el.__v_trans) {\n          value += ' ' + el.__v_trans.id + '-transition';\n        }\n        setClass(el, value);\n      } else if (xlinkRE.test(attr)) {\n        el.setAttributeNS(xlinkNS, attr, value === true ? '' : value);\n      } else {\n        el.setAttribute(attr, value === true ? '' : value);\n      }\n    } else {\n      el.removeAttribute(attr);\n    }\n  }\n};\n\nvar el = {\n\n  priority: EL,\n\n  bind: function bind() {\n    /* istanbul ignore if */\n    if (!this.arg) {\n      return;\n    }\n    var id = this.id = camelize(this.arg);\n    var refs = (this._scope || this.vm).$els;\n    if (hasOwn(refs, id)) {\n      refs[id] = this.el;\n    } else {\n      defineReactive(refs, id, this.el);\n    }\n  },\n\n  unbind: function unbind() {\n    var refs = (this._scope || this.vm).$els;\n    if (refs[this.id] === this.el) {\n      refs[this.id] = null;\n    }\n  }\n};\n\nvar ref = {\n  bind: function bind() {\n    process.env.NODE_ENV !== 'production' && warn('v-ref:' + this.arg + ' must be used on a child ' + 'component. Found on <' + this.el.tagName.toLowerCase() + '>.', this.vm);\n  }\n};\n\nvar cloak = {\n  bind: function bind() {\n    var el = this.el;\n    this.vm.$once('pre-hook:compiled', function () {\n      el.removeAttribute('v-cloak');\n    });\n  }\n};\n\n// logic control\n// two-way binding\n// event handling\n// attributes\n// ref & el\n// cloak\n// must export plain object\nvar directives = {\n  text: text$1,\n  html: html,\n  'for': vFor,\n  'if': vIf,\n  show: show,\n  model: model,\n  on: on$1,\n  bind: bind$1,\n  el: el,\n  ref: ref,\n  cloak: cloak\n};\n\nvar vClass = {\n\n  deep: true,\n\n  update: function update(value) {\n    if (!value) {\n      this.cleanup();\n    } else if (typeof value === 'string') {\n      this.setClass(value.trim().split(/\\s+/));\n    } else {\n      this.setClass(normalize$1(value));\n    }\n  },\n\n  setClass: function setClass(value) {\n    this.cleanup(value);\n    for (var i = 0, l = value.length; i < l; i++) {\n      var val = value[i];\n      if (val) {\n        apply(this.el, val, addClass);\n      }\n    }\n    this.prevKeys = value;\n  },\n\n  cleanup: function cleanup(value) {\n    var prevKeys = this.prevKeys;\n    if (!prevKeys) return;\n    var i = prevKeys.length;\n    while (i--) {\n      var key = prevKeys[i];\n      if (!value || value.indexOf(key) < 0) {\n        apply(this.el, key, removeClass);\n      }\n    }\n  }\n};\n\n/**\n * Normalize objects and arrays (potentially containing objects)\n * into array of strings.\n *\n * @param {Object|Array<String|Object>} value\n * @return {Array<String>}\n */\n\nfunction normalize$1(value) {\n  var res = [];\n  if (isArray(value)) {\n    for (var i = 0, l = value.length; i < l; i++) {\n      var _key = value[i];\n      if (_key) {\n        if (typeof _key === 'string') {\n          res.push(_key);\n        } else {\n          for (var k in _key) {\n            if (_key[k]) res.push(k);\n          }\n        }\n      }\n    }\n  } else if (isObject(value)) {\n    for (var key in value) {\n      if (value[key]) res.push(key);\n    }\n  }\n  return res;\n}\n\n/**\n * Add or remove a class/classes on an element\n *\n * @param {Element} el\n * @param {String} key The class name. This may or may not\n *                     contain a space character, in such a\n *                     case we'll deal with multiple class\n *                     names at once.\n * @param {Function} fn\n */\n\nfunction apply(el, key, fn) {\n  key = key.trim();\n  if (key.indexOf(' ') === -1) {\n    fn(el, key);\n    return;\n  }\n  // The key contains one or more space characters.\n  // Since a class name doesn't accept such characters, we\n  // treat it as multiple classes.\n  var keys = key.split(/\\s+/);\n  for (var i = 0, l = keys.length; i < l; i++) {\n    fn(el, keys[i]);\n  }\n}\n\nvar component = {\n\n  priority: COMPONENT,\n\n  params: ['keep-alive', 'transition-mode', 'inline-template'],\n\n  /**\n   * Setup. Two possible usages:\n   *\n   * - static:\n   *   <comp> or <div v-component=\"comp\">\n   *\n   * - dynamic:\n   *   <component :is=\"view\">\n   */\n\n  bind: function bind() {\n    if (!this.el.__vue__) {\n      // keep-alive cache\n      this.keepAlive = this.params.keepAlive;\n      if (this.keepAlive) {\n        this.cache = {};\n      }\n      // check inline-template\n      if (this.params.inlineTemplate) {\n        // extract inline template as a DocumentFragment\n        this.inlineTemplate = extractContent(this.el, true);\n      }\n      // component resolution related state\n      this.pendingComponentCb = this.Component = null;\n      // transition related state\n      this.pendingRemovals = 0;\n      this.pendingRemovalCb = null;\n      // create a ref anchor\n      this.anchor = createAnchor('v-component');\n      replace(this.el, this.anchor);\n      // remove is attribute.\n      // this is removed during compilation, but because compilation is\n      // cached, when the component is used elsewhere this attribute\n      // will remain at link time.\n      this.el.removeAttribute('is');\n      this.el.removeAttribute(':is');\n      // remove ref, same as above\n      if (this.descriptor.ref) {\n        this.el.removeAttribute('v-ref:' + hyphenate(this.descriptor.ref));\n      }\n      // if static, build right now.\n      if (this.literal) {\n        this.setComponent(this.expression);\n      }\n    } else {\n      process.env.NODE_ENV !== 'production' && warn('cannot mount component \"' + this.expression + '\" ' + 'on already mounted element: ' + this.el);\n    }\n  },\n\n  /**\n   * Public update, called by the watcher in the dynamic\n   * literal scenario, e.g. <component :is=\"view\">\n   */\n\n  update: function update(value) {\n    if (!this.literal) {\n      this.setComponent(value);\n    }\n  },\n\n  /**\n   * Switch dynamic components. May resolve the component\n   * asynchronously, and perform transition based on\n   * specified transition mode. Accepts a few additional\n   * arguments specifically for vue-router.\n   *\n   * The callback is called when the full transition is\n   * finished.\n   *\n   * @param {String} value\n   * @param {Function} [cb]\n   */\n\n  setComponent: function setComponent(value, cb) {\n    this.invalidatePending();\n    if (!value) {\n      // just remove current\n      this.unbuild(true);\n      this.remove(this.childVM, cb);\n      this.childVM = null;\n    } else {\n      var self = this;\n      this.resolveComponent(value, function () {\n        self.mountComponent(cb);\n      });\n    }\n  },\n\n  /**\n   * Resolve the component constructor to use when creating\n   * the child vm.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  resolveComponent: function resolveComponent(value, cb) {\n    var self = this;\n    this.pendingComponentCb = cancellable(function (Component) {\n      self.ComponentName = Component.options.name || (typeof value === 'string' ? value : null);\n      self.Component = Component;\n      cb();\n    });\n    this.vm._resolveComponent(value, this.pendingComponentCb);\n  },\n\n  /**\n   * Create a new instance using the current constructor and\n   * replace the existing instance. This method doesn't care\n   * whether the new component and the old one are actually\n   * the same.\n   *\n   * @param {Function} [cb]\n   */\n\n  mountComponent: function mountComponent(cb) {\n    // actual mount\n    this.unbuild(true);\n    var self = this;\n    var activateHooks = this.Component.options.activate;\n    var cached = this.getCached();\n    var newComponent = this.build();\n    if (activateHooks && !cached) {\n      this.waitingFor = newComponent;\n      callActivateHooks(activateHooks, newComponent, function () {\n        if (self.waitingFor !== newComponent) {\n          return;\n        }\n        self.waitingFor = null;\n        self.transition(newComponent, cb);\n      });\n    } else {\n      // update ref for kept-alive component\n      if (cached) {\n        newComponent._updateRef();\n      }\n      this.transition(newComponent, cb);\n    }\n  },\n\n  /**\n   * When the component changes or unbinds before an async\n   * constructor is resolved, we need to invalidate its\n   * pending callback.\n   */\n\n  invalidatePending: function invalidatePending() {\n    if (this.pendingComponentCb) {\n      this.pendingComponentCb.cancel();\n      this.pendingComponentCb = null;\n    }\n  },\n\n  /**\n   * Instantiate/insert a new child vm.\n   * If keep alive and has cached instance, insert that\n   * instance; otherwise build a new one and cache it.\n   *\n   * @param {Object} [extraOptions]\n   * @return {Vue} - the created instance\n   */\n\n  build: function build(extraOptions) {\n    var cached = this.getCached();\n    if (cached) {\n      return cached;\n    }\n    if (this.Component) {\n      // default options\n      var options = {\n        name: this.ComponentName,\n        el: cloneNode(this.el),\n        template: this.inlineTemplate,\n        // make sure to add the child with correct parent\n        // if this is a transcluded component, its parent\n        // should be the transclusion host.\n        parent: this._host || this.vm,\n        // if no inline-template, then the compiled\n        // linker can be cached for better performance.\n        _linkerCachable: !this.inlineTemplate,\n        _ref: this.descriptor.ref,\n        _asComponent: true,\n        _isRouterView: this._isRouterView,\n        // if this is a transcluded component, context\n        // will be the common parent vm of this instance\n        // and its host.\n        _context: this.vm,\n        // if this is inside an inline v-for, the scope\n        // will be the intermediate scope created for this\n        // repeat fragment. this is used for linking props\n        // and container directives.\n        _scope: this._scope,\n        // pass in the owner fragment of this component.\n        // this is necessary so that the fragment can keep\n        // track of its contained components in order to\n        // call attach/detach hooks for them.\n        _frag: this._frag\n      };\n      // extra options\n      // in 1.0.0 this is used by vue-router only\n      /* istanbul ignore if */\n      if (extraOptions) {\n        extend(options, extraOptions);\n      }\n      var child = new this.Component(options);\n      if (this.keepAlive) {\n        this.cache[this.Component.cid] = child;\n      }\n      /* istanbul ignore if */\n      if (process.env.NODE_ENV !== 'production' && this.el.hasAttribute('transition') && child._isFragment) {\n        warn('Transitions will not work on a fragment instance. ' + 'Template: ' + child.$options.template, child);\n      }\n      return child;\n    }\n  },\n\n  /**\n   * Try to get a cached instance of the current component.\n   *\n   * @return {Vue|undefined}\n   */\n\n  getCached: function getCached() {\n    return this.keepAlive && this.cache[this.Component.cid];\n  },\n\n  /**\n   * Teardown the current child, but defers cleanup so\n   * that we can separate the destroy and removal steps.\n   *\n   * @param {Boolean} defer\n   */\n\n  unbuild: function unbuild(defer) {\n    if (this.waitingFor) {\n      if (!this.keepAlive) {\n        this.waitingFor.$destroy();\n      }\n      this.waitingFor = null;\n    }\n    var child = this.childVM;\n    if (!child || this.keepAlive) {\n      if (child) {\n        // remove ref\n        child._inactive = true;\n        child._updateRef(true);\n      }\n      return;\n    }\n    // the sole purpose of `deferCleanup` is so that we can\n    // \"deactivate\" the vm right now and perform DOM removal\n    // later.\n    child.$destroy(false, defer);\n  },\n\n  /**\n   * Remove current destroyed child and manually do\n   * the cleanup after removal.\n   *\n   * @param {Function} cb\n   */\n\n  remove: function remove(child, cb) {\n    var keepAlive = this.keepAlive;\n    if (child) {\n      // we may have a component switch when a previous\n      // component is still being transitioned out.\n      // we want to trigger only one lastest insertion cb\n      // when the existing transition finishes. (#1119)\n      this.pendingRemovals++;\n      this.pendingRemovalCb = cb;\n      var self = this;\n      child.$remove(function () {\n        self.pendingRemovals--;\n        if (!keepAlive) child._cleanup();\n        if (!self.pendingRemovals && self.pendingRemovalCb) {\n          self.pendingRemovalCb();\n          self.pendingRemovalCb = null;\n        }\n      });\n    } else if (cb) {\n      cb();\n    }\n  },\n\n  /**\n   * Actually swap the components, depending on the\n   * transition mode. Defaults to simultaneous.\n   *\n   * @param {Vue} target\n   * @param {Function} [cb]\n   */\n\n  transition: function transition(target, cb) {\n    var self = this;\n    var current = this.childVM;\n    // for devtool inspection\n    if (current) current._inactive = true;\n    target._inactive = false;\n    this.childVM = target;\n    switch (self.params.transitionMode) {\n      case 'in-out':\n        target.$before(self.anchor, function () {\n          self.remove(current, cb);\n        });\n        break;\n      case 'out-in':\n        self.remove(current, function () {\n          target.$before(self.anchor, cb);\n        });\n        break;\n      default:\n        self.remove(current);\n        target.$before(self.anchor, cb);\n    }\n  },\n\n  /**\n   * Unbind.\n   */\n\n  unbind: function unbind() {\n    this.invalidatePending();\n    // Do not defer cleanup when unbinding\n    this.unbuild();\n    // destroy all keep-alive cached instances\n    if (this.cache) {\n      for (var key in this.cache) {\n        this.cache[key].$destroy();\n      }\n      this.cache = null;\n    }\n  }\n};\n\n/**\n * Call activate hooks in order (asynchronous)\n *\n * @param {Array} hooks\n * @param {Vue} vm\n * @param {Function} cb\n */\n\nfunction callActivateHooks(hooks, vm, cb) {\n  var total = hooks.length;\n  var called = 0;\n  hooks[0].call(vm, next);\n  function next() {\n    if (++called >= total) {\n      cb();\n    } else {\n      hooks[called].call(vm, next);\n    }\n  }\n}\n\nvar propBindingModes = config._propBindingModes;\nvar empty = {};\n\n// regexes\nvar identRE$1 = /^[$_a-zA-Z]+[\\w$]*$/;\nvar settablePathRE = /^[A-Za-z_$][\\w$]*(\\.[A-Za-z_$][\\w$]*|\\[[^\\[\\]]+\\])*$/;\n\n/**\n * Compile props on a root element and return\n * a props link function.\n *\n * @param {Element|DocumentFragment} el\n * @param {Array} propOptions\n * @param {Vue} vm\n * @return {Function} propsLinkFn\n */\n\nfunction compileProps(el, propOptions, vm) {\n  var props = [];\n  var propsData = vm.$options.propsData;\n  var names = Object.keys(propOptions);\n  var i = names.length;\n  var options, name, attr, value, path, parsed, prop;\n  while (i--) {\n    name = names[i];\n    options = propOptions[name] || empty;\n\n    if (process.env.NODE_ENV !== 'production' && name === '$data') {\n      warn('Do not use $data as prop.', vm);\n      continue;\n    }\n\n    // props could contain dashes, which will be\n    // interpreted as minus calculations by the parser\n    // so we need to camelize the path here\n    path = camelize(name);\n    if (!identRE$1.test(path)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop key: \"' + name + '\". Prop keys ' + 'must be valid identifiers.', vm);\n      continue;\n    }\n\n    prop = {\n      name: name,\n      path: path,\n      options: options,\n      mode: propBindingModes.ONE_WAY,\n      raw: null\n    };\n\n    attr = hyphenate(name);\n    // first check dynamic version\n    if ((value = getBindAttr(el, attr)) === null) {\n      if ((value = getBindAttr(el, attr + '.sync')) !== null) {\n        prop.mode = propBindingModes.TWO_WAY;\n      } else if ((value = getBindAttr(el, attr + '.once')) !== null) {\n        prop.mode = propBindingModes.ONE_TIME;\n      }\n    }\n    if (value !== null) {\n      // has dynamic binding!\n      prop.raw = value;\n      parsed = parseDirective(value);\n      value = parsed.expression;\n      prop.filters = parsed.filters;\n      // check binding type\n      if (isLiteral(value) && !parsed.filters) {\n        // for expressions containing literal numbers and\n        // booleans, there's no need to setup a prop binding,\n        // so we can optimize them as a one-time set.\n        prop.optimizedLiteral = true;\n      } else {\n        prop.dynamic = true;\n        // check non-settable path for two-way bindings\n        if (process.env.NODE_ENV !== 'production' && prop.mode === propBindingModes.TWO_WAY && !settablePathRE.test(value)) {\n          prop.mode = propBindingModes.ONE_WAY;\n          warn('Cannot bind two-way prop with non-settable ' + 'parent path: ' + value, vm);\n        }\n      }\n      prop.parentPath = value;\n\n      // warn required two-way\n      if (process.env.NODE_ENV !== 'production' && options.twoWay && prop.mode !== propBindingModes.TWO_WAY) {\n        warn('Prop \"' + name + '\" expects a two-way binding type.', vm);\n      }\n    } else if ((value = getAttr(el, attr)) !== null) {\n      // has literal binding!\n      prop.raw = value;\n    } else if (propsData && (value = propsData[name] || propsData[path]) !== null) {\n      // has propsData\n      prop.raw = value;\n    } else if (process.env.NODE_ENV !== 'production') {\n      // check possible camelCase prop usage\n      var lowerCaseName = path.toLowerCase();\n      value = /[A-Z\\-]/.test(name) && (el.getAttribute(lowerCaseName) || el.getAttribute(':' + lowerCaseName) || el.getAttribute('v-bind:' + lowerCaseName) || el.getAttribute(':' + lowerCaseName + '.once') || el.getAttribute('v-bind:' + lowerCaseName + '.once') || el.getAttribute(':' + lowerCaseName + '.sync') || el.getAttribute('v-bind:' + lowerCaseName + '.sync'));\n      if (value) {\n        warn('Possible usage error for prop `' + lowerCaseName + '` - ' + 'did you mean `' + attr + '`? HTML is case-insensitive, remember to use ' + 'kebab-case for props in templates.', vm);\n      } else if (options.required && (!propsData || !(name in propsData) && !(path in propsData))) {\n        // warn missing required\n        warn('Missing required prop: ' + name, vm);\n      }\n    }\n    // push prop\n    props.push(prop);\n  }\n  return makePropsLinkFn(props);\n}\n\n/**\n * Build a function that applies props to a vm.\n *\n * @param {Array} props\n * @return {Function} propsLinkFn\n */\n\nfunction makePropsLinkFn(props) {\n  return function propsLinkFn(vm, scope) {\n    // store resolved props info\n    vm._props = {};\n    var inlineProps = vm.$options.propsData;\n    var i = props.length;\n    var prop, path, options, value, raw;\n    while (i--) {\n      prop = props[i];\n      raw = prop.raw;\n      path = prop.path;\n      options = prop.options;\n      vm._props[path] = prop;\n      if (inlineProps && hasOwn(inlineProps, path)) {\n        initProp(vm, prop, inlineProps[path]);\n      }if (raw === null) {\n        // initialize absent prop\n        initProp(vm, prop, undefined);\n      } else if (prop.dynamic) {\n        // dynamic prop\n        if (prop.mode === propBindingModes.ONE_TIME) {\n          // one time binding\n          value = (scope || vm._context || vm).$get(prop.parentPath);\n          initProp(vm, prop, value);\n        } else {\n          if (vm._context) {\n            // dynamic binding\n            vm._bindDir({\n              name: 'prop',\n              def: propDef,\n              prop: prop\n            }, null, null, scope); // el, host, scope\n          } else {\n              // root instance\n              initProp(vm, prop, vm.$get(prop.parentPath));\n            }\n        }\n      } else if (prop.optimizedLiteral) {\n        // optimized literal, cast it and just set once\n        var stripped = stripQuotes(raw);\n        value = stripped === raw ? toBoolean(toNumber(raw)) : stripped;\n        initProp(vm, prop, value);\n      } else {\n        // string literal, but we need to cater for\n        // Boolean props with no value, or with same\n        // literal value (e.g. disabled=\"disabled\")\n        // see https://github.com/vuejs/vue-loader/issues/182\n        value = options.type === Boolean && (raw === '' || raw === hyphenate(prop.name)) ? true : raw;\n        initProp(vm, prop, value);\n      }\n    }\n  };\n}\n\n/**\n * Process a prop with a rawValue, applying necessary coersions,\n * default values & assertions and call the given callback with\n * processed value.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} rawValue\n * @param {Function} fn\n */\n\nfunction processPropValue(vm, prop, rawValue, fn) {\n  var isSimple = prop.dynamic && isSimplePath(prop.parentPath);\n  var value = rawValue;\n  if (value === undefined) {\n    value = getPropDefaultValue(vm, prop);\n  }\n  value = coerceProp(prop, value, vm);\n  var coerced = value !== rawValue;\n  if (!assertProp(prop, value, vm)) {\n    value = undefined;\n  }\n  if (isSimple && !coerced) {\n    withoutConversion(function () {\n      fn(value);\n    });\n  } else {\n    fn(value);\n  }\n}\n\n/**\n * Set a prop's initial value on a vm and its data object.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction initProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    defineReactive(vm, prop.path, value);\n  });\n}\n\n/**\n * Update a prop's value on a vm.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @param {*} value\n */\n\nfunction updateProp(vm, prop, value) {\n  processPropValue(vm, prop, value, function (value) {\n    vm[prop.path] = value;\n  });\n}\n\n/**\n * Get the default value of a prop.\n *\n * @param {Vue} vm\n * @param {Object} prop\n * @return {*}\n */\n\nfunction getPropDefaultValue(vm, prop) {\n  // no default, return undefined\n  var options = prop.options;\n  if (!hasOwn(options, 'default')) {\n    // absent boolean value defaults to false\n    return options.type === Boolean ? false : undefined;\n  }\n  var def = options['default'];\n  // warn against non-factory defaults for Object & Array\n  if (isObject(def)) {\n    process.env.NODE_ENV !== 'production' && warn('Invalid default value for prop \"' + prop.name + '\": ' + 'Props with type Object/Array must use a factory function ' + 'to return the default value.', vm);\n  }\n  // call factory function for non-Function types\n  return typeof def === 'function' && options.type !== Function ? def.call(vm) : def;\n}\n\n/**\n * Assert whether a prop is valid.\n *\n * @param {Object} prop\n * @param {*} value\n * @param {Vue} vm\n */\n\nfunction assertProp(prop, value, vm) {\n  if (!prop.options.required && ( // non-required\n  prop.raw === null || // abscent\n  value == null) // null or undefined\n  ) {\n      return true;\n    }\n  var options = prop.options;\n  var type = options.type;\n  var valid = !type;\n  var expectedTypes = [];\n  if (type) {\n    if (!isArray(type)) {\n      type = [type];\n    }\n    for (var i = 0; i < type.length && !valid; i++) {\n      var assertedType = assertType(value, type[i]);\n      expectedTypes.push(assertedType.expectedType);\n      valid = assertedType.valid;\n    }\n  }\n  if (!valid) {\n    if (process.env.NODE_ENV !== 'production') {\n      warn('Invalid prop: type check failed for prop \"' + prop.name + '\".' + ' Expected ' + expectedTypes.map(formatType).join(', ') + ', got ' + formatValue(value) + '.', vm);\n    }\n    return false;\n  }\n  var validator = options.validator;\n  if (validator) {\n    if (!validator(value)) {\n      process.env.NODE_ENV !== 'production' && warn('Invalid prop: custom validator check failed for prop \"' + prop.name + '\".', vm);\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Force parsing value with coerce option.\n *\n * @param {*} value\n * @param {Object} options\n * @return {*}\n */\n\nfunction coerceProp(prop, value, vm) {\n  var coerce = prop.options.coerce;\n  if (!coerce) {\n    return value;\n  }\n  if (typeof coerce === 'function') {\n    return coerce(value);\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid coerce for prop \"' + prop.name + '\": expected function, got ' + typeof coerce + '.', vm);\n    return value;\n  }\n}\n\n/**\n * Assert the type of a value\n *\n * @param {*} value\n * @param {Function} type\n * @return {Object}\n */\n\nfunction assertType(value, type) {\n  var valid;\n  var expectedType;\n  if (type === String) {\n    expectedType = 'string';\n    valid = typeof value === expectedType;\n  } else if (type === Number) {\n    expectedType = 'number';\n    valid = typeof value === expectedType;\n  } else if (type === Boolean) {\n    expectedType = 'boolean';\n    valid = typeof value === expectedType;\n  } else if (type === Function) {\n    expectedType = 'function';\n    valid = typeof value === expectedType;\n  } else if (type === Object) {\n    expectedType = 'object';\n    valid = isPlainObject(value);\n  } else if (type === Array) {\n    expectedType = 'array';\n    valid = isArray(value);\n  } else {\n    valid = value instanceof type;\n  }\n  return {\n    valid: valid,\n    expectedType: expectedType\n  };\n}\n\n/**\n * Format type for output\n *\n * @param {String} type\n * @return {String}\n */\n\nfunction formatType(type) {\n  return type ? type.charAt(0).toUpperCase() + type.slice(1) : 'custom type';\n}\n\n/**\n * Format value\n *\n * @param {*} value\n * @return {String}\n */\n\nfunction formatValue(val) {\n  return Object.prototype.toString.call(val).slice(8, -1);\n}\n\nvar bindingModes = config._propBindingModes;\n\nvar propDef = {\n\n  bind: function bind() {\n    var child = this.vm;\n    var parent = child._context;\n    // passed in from compiler directly\n    var prop = this.descriptor.prop;\n    var childKey = prop.path;\n    var parentKey = prop.parentPath;\n    var twoWay = prop.mode === bindingModes.TWO_WAY;\n\n    var parentWatcher = this.parentWatcher = new Watcher(parent, parentKey, function (val) {\n      updateProp(child, prop, val);\n    }, {\n      twoWay: twoWay,\n      filters: prop.filters,\n      // important: props need to be observed on the\n      // v-for scope if present\n      scope: this._scope\n    });\n\n    // set the child initial value.\n    initProp(child, prop, parentWatcher.value);\n\n    // setup two-way binding\n    if (twoWay) {\n      // important: defer the child watcher creation until\n      // the created hook (after data observation)\n      var self = this;\n      child.$once('pre-hook:created', function () {\n        self.childWatcher = new Watcher(child, childKey, function (val) {\n          parentWatcher.set(val);\n        }, {\n          // ensure sync upward before parent sync down.\n          // this is necessary in cases e.g. the child\n          // mutates a prop array, then replaces it. (#1683)\n          sync: true\n        });\n      });\n    }\n  },\n\n  unbind: function unbind() {\n    this.parentWatcher.teardown();\n    if (this.childWatcher) {\n      this.childWatcher.teardown();\n    }\n  }\n};\n\nvar queue$1 = [];\nvar queued = false;\n\n/**\n * Push a job into the queue.\n *\n * @param {Function} job\n */\n\nfunction pushJob(job) {\n  queue$1.push(job);\n  if (!queued) {\n    queued = true;\n    nextTick(flush);\n  }\n}\n\n/**\n * Flush the queue, and do one forced reflow before\n * triggering transitions.\n */\n\nfunction flush() {\n  // Force layout\n  var f = document.documentElement.offsetHeight;\n  for (var i = 0; i < queue$1.length; i++) {\n    queue$1[i]();\n  }\n  queue$1 = [];\n  queued = false;\n  // dummy return, so js linters don't complain about\n  // unused variable f\n  return f;\n}\n\nvar TYPE_TRANSITION = 'transition';\nvar TYPE_ANIMATION = 'animation';\nvar transDurationProp = transitionProp + 'Duration';\nvar animDurationProp = animationProp + 'Duration';\n\n/**\n * If a just-entered element is applied the\n * leave class while its enter transition hasn't started yet,\n * and the transitioned property has the same value for both\n * enter/leave, then the leave transition will be skipped and\n * the transitionend event never fires. This function ensures\n * its callback to be called after a transition has started\n * by waiting for double raf.\n *\n * It falls back to setTimeout on devices that support CSS\n * transitions but not raf (e.g. Android 4.2 browser) - since\n * these environments are usually slow, we are giving it a\n * relatively large timeout.\n */\n\nvar raf = inBrowser && window.requestAnimationFrame;\nvar waitForTransitionStart = raf\n/* istanbul ignore next */\n? function (fn) {\n  raf(function () {\n    raf(fn);\n  });\n} : function (fn) {\n  setTimeout(fn, 50);\n};\n\n/**\n * A Transition object that encapsulates the state and logic\n * of the transition.\n *\n * @param {Element} el\n * @param {String} id\n * @param {Object} hooks\n * @param {Vue} vm\n */\nfunction Transition(el, id, hooks, vm) {\n  this.id = id;\n  this.el = el;\n  this.enterClass = hooks && hooks.enterClass || id + '-enter';\n  this.leaveClass = hooks && hooks.leaveClass || id + '-leave';\n  this.hooks = hooks;\n  this.vm = vm;\n  // async state\n  this.pendingCssEvent = this.pendingCssCb = this.cancel = this.pendingJsCb = this.op = this.cb = null;\n  this.justEntered = false;\n  this.entered = this.left = false;\n  this.typeCache = {};\n  // check css transition type\n  this.type = hooks && hooks.type;\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV !== 'production') {\n    if (this.type && this.type !== TYPE_TRANSITION && this.type !== TYPE_ANIMATION) {\n      warn('invalid CSS transition type for transition=\"' + this.id + '\": ' + this.type, vm);\n    }\n  }\n  // bind\n  var self = this;['enterNextTick', 'enterDone', 'leaveNextTick', 'leaveDone'].forEach(function (m) {\n    self[m] = bind(self[m], self);\n  });\n}\n\nvar p$1 = Transition.prototype;\n\n/**\n * Start an entering transition.\n *\n * 1. enter transition triggered\n * 2. call beforeEnter hook\n * 3. add enter class\n * 4. insert/show element\n * 5. call enter hook (with possible explicit js callback)\n * 6. reflow\n * 7. based on transition type:\n *    - transition:\n *        remove class now, wait for transitionend,\n *        then done if there's no explicit js callback.\n *    - animation:\n *        wait for animationend, remove class,\n *        then done if there's no explicit js callback.\n *    - no css transition:\n *        done now if there's no explicit js callback.\n * 8. wait for either done or js callback, then call\n *    afterEnter hook.\n *\n * @param {Function} op - insert/show the element\n * @param {Function} [cb]\n */\n\np$1.enter = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeEnter');\n  this.cb = cb;\n  addClass(this.el, this.enterClass);\n  op();\n  this.entered = false;\n  this.callHookWithCb('enter');\n  if (this.entered) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.enterCancelled;\n  pushJob(this.enterNextTick);\n};\n\n/**\n * The \"nextTick\" phase of an entering transition, which is\n * to be pushed into a queue and executed after a reflow so\n * that removing the class can trigger a CSS transition.\n */\n\np$1.enterNextTick = function () {\n  var _this = this;\n\n  // prevent transition skipping\n  this.justEntered = true;\n  waitForTransitionStart(function () {\n    _this.justEntered = false;\n  });\n  var enterDone = this.enterDone;\n  var type = this.getCssTransitionType(this.enterClass);\n  if (!this.pendingJsCb) {\n    if (type === TYPE_TRANSITION) {\n      // trigger transition by removing enter class now\n      removeClass(this.el, this.enterClass);\n      this.setupCssCb(transitionEndEvent, enterDone);\n    } else if (type === TYPE_ANIMATION) {\n      this.setupCssCb(animationEndEvent, enterDone);\n    } else {\n      enterDone();\n    }\n  } else if (type === TYPE_TRANSITION) {\n    removeClass(this.el, this.enterClass);\n  }\n};\n\n/**\n * The \"cleanup\" phase of an entering transition.\n */\n\np$1.enterDone = function () {\n  this.entered = true;\n  this.cancel = this.pendingJsCb = null;\n  removeClass(this.el, this.enterClass);\n  this.callHook('afterEnter');\n  if (this.cb) this.cb();\n};\n\n/**\n * Start a leaving transition.\n *\n * 1. leave transition triggered.\n * 2. call beforeLeave hook\n * 3. add leave class (trigger css transition)\n * 4. call leave hook (with possible explicit js callback)\n * 5. reflow if no explicit js callback is provided\n * 6. based on transition type:\n *    - transition or animation:\n *        wait for end event, remove class, then done if\n *        there's no explicit js callback.\n *    - no css transition:\n *        done if there's no explicit js callback.\n * 7. wait for either done or js callback, then call\n *    afterLeave hook.\n *\n * @param {Function} op - remove/hide the element\n * @param {Function} [cb]\n */\n\np$1.leave = function (op, cb) {\n  this.cancelPending();\n  this.callHook('beforeLeave');\n  this.op = op;\n  this.cb = cb;\n  addClass(this.el, this.leaveClass);\n  this.left = false;\n  this.callHookWithCb('leave');\n  if (this.left) {\n    return; // user called done synchronously.\n  }\n  this.cancel = this.hooks && this.hooks.leaveCancelled;\n  // only need to handle leaveDone if\n  // 1. the transition is already done (synchronously called\n  //    by the user, which causes this.op set to null)\n  // 2. there's no explicit js callback\n  if (this.op && !this.pendingJsCb) {\n    // if a CSS transition leaves immediately after enter,\n    // the transitionend event never fires. therefore we\n    // detect such cases and end the leave immediately.\n    if (this.justEntered) {\n      this.leaveDone();\n    } else {\n      pushJob(this.leaveNextTick);\n    }\n  }\n};\n\n/**\n * The \"nextTick\" phase of a leaving transition.\n */\n\np$1.leaveNextTick = function () {\n  var type = this.getCssTransitionType(this.leaveClass);\n  if (type) {\n    var event = type === TYPE_TRANSITION ? transitionEndEvent : animationEndEvent;\n    this.setupCssCb(event, this.leaveDone);\n  } else {\n    this.leaveDone();\n  }\n};\n\n/**\n * The \"cleanup\" phase of a leaving transition.\n */\n\np$1.leaveDone = function () {\n  this.left = true;\n  this.cancel = this.pendingJsCb = null;\n  this.op();\n  removeClass(this.el, this.leaveClass);\n  this.callHook('afterLeave');\n  if (this.cb) this.cb();\n  this.op = null;\n};\n\n/**\n * Cancel any pending callbacks from a previously running\n * but not finished transition.\n */\n\np$1.cancelPending = function () {\n  this.op = this.cb = null;\n  var hasPending = false;\n  if (this.pendingCssCb) {\n    hasPending = true;\n    off(this.el, this.pendingCssEvent, this.pendingCssCb);\n    this.pendingCssEvent = this.pendingCssCb = null;\n  }\n  if (this.pendingJsCb) {\n    hasPending = true;\n    this.pendingJsCb.cancel();\n    this.pendingJsCb = null;\n  }\n  if (hasPending) {\n    removeClass(this.el, this.enterClass);\n    removeClass(this.el, this.leaveClass);\n  }\n  if (this.cancel) {\n    this.cancel.call(this.vm, this.el);\n    this.cancel = null;\n  }\n};\n\n/**\n * Call a user-provided synchronous hook function.\n *\n * @param {String} type\n */\n\np$1.callHook = function (type) {\n  if (this.hooks && this.hooks[type]) {\n    this.hooks[type].call(this.vm, this.el);\n  }\n};\n\n/**\n * Call a user-provided, potentially-async hook function.\n * We check for the length of arguments to see if the hook\n * expects a `done` callback. If true, the transition's end\n * will be determined by when the user calls that callback;\n * otherwise, the end is determined by the CSS transition or\n * animation.\n *\n * @param {String} type\n */\n\np$1.callHookWithCb = function (type) {\n  var hook = this.hooks && this.hooks[type];\n  if (hook) {\n    if (hook.length > 1) {\n      this.pendingJsCb = cancellable(this[type + 'Done']);\n    }\n    hook.call(this.vm, this.el, this.pendingJsCb);\n  }\n};\n\n/**\n * Get an element's transition type based on the\n * calculated styles.\n *\n * @param {String} className\n * @return {Number}\n */\n\np$1.getCssTransitionType = function (className) {\n  /* istanbul ignore if */\n  if (!transitionEndEvent ||\n  // skip CSS transitions if page is not visible -\n  // this solves the issue of transitionend events not\n  // firing until the page is visible again.\n  // pageVisibility API is supported in IE10+, same as\n  // CSS transitions.\n  document.hidden ||\n  // explicit js-only transition\n  this.hooks && this.hooks.css === false ||\n  // element is hidden\n  isHidden(this.el)) {\n    return;\n  }\n  var type = this.type || this.typeCache[className];\n  if (type) return type;\n  var inlineStyles = this.el.style;\n  var computedStyles = window.getComputedStyle(this.el);\n  var transDuration = inlineStyles[transDurationProp] || computedStyles[transDurationProp];\n  if (transDuration && transDuration !== '0s') {\n    type = TYPE_TRANSITION;\n  } else {\n    var animDuration = inlineStyles[animDurationProp] || computedStyles[animDurationProp];\n    if (animDuration && animDuration !== '0s') {\n      type = TYPE_ANIMATION;\n    }\n  }\n  if (type) {\n    this.typeCache[className] = type;\n  }\n  return type;\n};\n\n/**\n * Setup a CSS transitionend/animationend callback.\n *\n * @param {String} event\n * @param {Function} cb\n */\n\np$1.setupCssCb = function (event, cb) {\n  this.pendingCssEvent = event;\n  var self = this;\n  var el = this.el;\n  var onEnd = this.pendingCssCb = function (e) {\n    if (e.target === el) {\n      off(el, event, onEnd);\n      self.pendingCssEvent = self.pendingCssCb = null;\n      if (!self.pendingJsCb && cb) {\n        cb();\n      }\n    }\n  };\n  on(el, event, onEnd);\n};\n\n/**\n * Check if an element is hidden - in that case we can just\n * skip the transition alltogether.\n *\n * @param {Element} el\n * @return {Boolean}\n */\n\nfunction isHidden(el) {\n  if (/svg$/.test(el.namespaceURI)) {\n    // SVG elements do not have offset(Width|Height)\n    // so we need to check the client rect\n    var rect = el.getBoundingClientRect();\n    return !(rect.width || rect.height);\n  } else {\n    return !(el.offsetWidth || el.offsetHeight || el.getClientRects().length);\n  }\n}\n\nvar transition$1 = {\n\n  priority: TRANSITION,\n\n  update: function update(id, oldId) {\n    var el = this.el;\n    // resolve on owner vm\n    var hooks = resolveAsset(this.vm.$options, 'transitions', id);\n    id = id || 'v';\n    oldId = oldId || 'v';\n    el.__v_trans = new Transition(el, id, hooks, this.vm);\n    removeClass(el, oldId + '-transition');\n    addClass(el, id + '-transition');\n  }\n};\n\nvar internalDirectives = {\n  style: style,\n  'class': vClass,\n  component: component,\n  prop: propDef,\n  transition: transition$1\n};\n\n// special binding prefixes\nvar bindRE = /^v-bind:|^:/;\nvar onRE = /^v-on:|^@/;\nvar dirAttrRE = /^v-([^:]+)(?:$|:(.*)$)/;\nvar modifierRE = /\\.[^\\.]+/g;\nvar transitionRE = /^(v-bind:|:)?transition$/;\n\n// default directive priority\nvar DEFAULT_PRIORITY = 1000;\nvar DEFAULT_TERMINAL_PRIORITY = 2000;\n\n/**\n * Compile a template and return a reusable composite link\n * function, which recursively contains more link functions\n * inside. This top level compile function would normally\n * be called on instance root nodes, but can also be used\n * for partial compilation if the partial argument is true.\n *\n * The returned composite link function, when called, will\n * return an unlink function that tearsdown all directives\n * created during the linking phase.\n *\n * @param {Element|DocumentFragment} el\n * @param {Object} options\n * @param {Boolean} partial\n * @return {Function}\n */\n\nfunction compile(el, options, partial) {\n  // link function for the node itself.\n  var nodeLinkFn = partial || !options._asComponent ? compileNode(el, options) : null;\n  // link function for the childNodes\n  var childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && !isScript(el) && el.hasChildNodes() ? compileNodeList(el.childNodes, options) : null;\n\n  /**\n   * A composite linker function to be called on a already\n   * compiled piece of DOM, which instantiates all directive\n   * instances.\n   *\n   * @param {Vue} vm\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host] - host vm of transcluded content\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - link context fragment\n   * @return {Function|undefined}\n   */\n\n  return function compositeLinkFn(vm, el, host, scope, frag) {\n    // cache childNodes before linking parent, fix #657\n    var childNodes = toArray(el.childNodes);\n    // link\n    var dirs = linkAndCapture(function compositeLinkCapturer() {\n      if (nodeLinkFn) nodeLinkFn(vm, el, host, scope, frag);\n      if (childLinkFn) childLinkFn(vm, childNodes, host, scope, frag);\n    }, vm);\n    return makeUnlinkFn(vm, dirs);\n  };\n}\n\n/**\n * Apply a linker to a vm/element pair and capture the\n * directives created during the process.\n *\n * @param {Function} linker\n * @param {Vue} vm\n */\n\nfunction linkAndCapture(linker, vm) {\n  /* istanbul ignore if */\n  if (process.env.NODE_ENV === 'production') {\n    // reset directives before every capture in production\n    // mode, so that when unlinking we don't need to splice\n    // them out (which turns out to be a perf hit).\n    // they are kept in development mode because they are\n    // useful for Vue's own tests.\n    vm._directives = [];\n  }\n  var originalDirCount = vm._directives.length;\n  linker();\n  var dirs = vm._directives.slice(originalDirCount);\n  sortDirectives(dirs);\n  for (var i = 0, l = dirs.length; i < l; i++) {\n    dirs[i]._bind();\n  }\n  return dirs;\n}\n\n/**\n * sort directives by priority (stable sort)\n *\n * @param {Array} dirs\n */\nfunction sortDirectives(dirs) {\n  if (dirs.length === 0) return;\n\n  var groupedMap = {};\n  var i, j, k, l;\n  var index = 0;\n  var priorities = [];\n  for (i = 0, j = dirs.length; i < j; i++) {\n    var dir = dirs[i];\n    var priority = dir.descriptor.def.priority || DEFAULT_PRIORITY;\n    var array = groupedMap[priority];\n    if (!array) {\n      array = groupedMap[priority] = [];\n      priorities.push(priority);\n    }\n    array.push(dir);\n  }\n\n  priorities.sort(function (a, b) {\n    return a > b ? -1 : a === b ? 0 : 1;\n  });\n  for (i = 0, j = priorities.length; i < j; i++) {\n    var group = groupedMap[priorities[i]];\n    for (k = 0, l = group.length; k < l; k++) {\n      dirs[index++] = group[k];\n    }\n  }\n}\n\n/**\n * Linker functions return an unlink function that\n * tearsdown all directives instances generated during\n * the process.\n *\n * We create unlink functions with only the necessary\n * information to avoid retaining additional closures.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Vue} [context]\n * @param {Array} [contextDirs]\n * @return {Function}\n */\n\nfunction makeUnlinkFn(vm, dirs, context, contextDirs) {\n  function unlink(destroying) {\n    teardownDirs(vm, dirs, destroying);\n    if (context && contextDirs) {\n      teardownDirs(context, contextDirs);\n    }\n  }\n  // expose linked directives\n  unlink.dirs = dirs;\n  return unlink;\n}\n\n/**\n * Teardown partial linked directives.\n *\n * @param {Vue} vm\n * @param {Array} dirs\n * @param {Boolean} destroying\n */\n\nfunction teardownDirs(vm, dirs, destroying) {\n  var i = dirs.length;\n  while (i--) {\n    dirs[i]._teardown();\n    if (process.env.NODE_ENV !== 'production' && !destroying) {\n      vm._directives.$remove(dirs[i]);\n    }\n  }\n}\n\n/**\n * Compile link props on an instance.\n *\n * @param {Vue} vm\n * @param {Element} el\n * @param {Object} props\n * @param {Object} [scope]\n * @return {Function}\n */\n\nfunction compileAndLinkProps(vm, el, props, scope) {\n  var propsLinkFn = compileProps(el, props, vm);\n  var propDirs = linkAndCapture(function () {\n    propsLinkFn(vm, scope);\n  }, vm);\n  return makeUnlinkFn(vm, propDirs);\n}\n\n/**\n * Compile the root element of an instance.\n *\n * 1. attrs on context container (context scope)\n * 2. attrs on the component template root node, if\n *    replace:true (child scope)\n *\n * If this is a fragment instance, we only need to compile 1.\n *\n * @param {Element} el\n * @param {Object} options\n * @param {Object} contextOptions\n * @return {Function}\n */\n\nfunction compileRoot(el, options, contextOptions) {\n  var containerAttrs = options._containerAttrs;\n  var replacerAttrs = options._replacerAttrs;\n  var contextLinkFn, replacerLinkFn;\n\n  // only need to compile other attributes for\n  // non-fragment instances\n  if (el.nodeType !== 11) {\n    // for components, container and replacer need to be\n    // compiled separately and linked in different scopes.\n    if (options._asComponent) {\n      // 2. container attributes\n      if (containerAttrs && contextOptions) {\n        contextLinkFn = compileDirectives(containerAttrs, contextOptions);\n      }\n      if (replacerAttrs) {\n        // 3. replacer attributes\n        replacerLinkFn = compileDirectives(replacerAttrs, options);\n      }\n    } else {\n      // non-component, just compile as a normal element.\n      replacerLinkFn = compileDirectives(el.attributes, options);\n    }\n  } else if (process.env.NODE_ENV !== 'production' && containerAttrs) {\n    // warn container directives for fragment instances\n    var names = containerAttrs.filter(function (attr) {\n      // allow vue-loader/vueify scoped css attributes\n      return attr.name.indexOf('_v-') < 0 &&\n      // allow event listeners\n      !onRE.test(attr.name) &&\n      // allow slots\n      attr.name !== 'slot';\n    }).map(function (attr) {\n      return '\"' + attr.name + '\"';\n    });\n    if (names.length) {\n      var plural = names.length > 1;\n\n      var componentName = options.el.tagName.toLowerCase();\n      if (componentName === 'component' && options.name) {\n        componentName += ':' + options.name;\n      }\n\n      warn('Attribute' + (plural ? 's ' : ' ') + names.join(', ') + (plural ? ' are' : ' is') + ' ignored on component ' + '<' + componentName + '> because ' + 'the component is a fragment instance: ' + 'http://vuejs.org/guide/components.html#Fragment-Instance');\n    }\n  }\n\n  options._containerAttrs = options._replacerAttrs = null;\n  return function rootLinkFn(vm, el, scope) {\n    // link context scope dirs\n    var context = vm._context;\n    var contextDirs;\n    if (context && contextLinkFn) {\n      contextDirs = linkAndCapture(function () {\n        contextLinkFn(context, el, null, scope);\n      }, context);\n    }\n\n    // link self\n    var selfDirs = linkAndCapture(function () {\n      if (replacerLinkFn) replacerLinkFn(vm, el);\n    }, vm);\n\n    // return the unlink function that tearsdown context\n    // container directives.\n    return makeUnlinkFn(vm, selfDirs, context, contextDirs);\n  };\n}\n\n/**\n * Compile a node and return a nodeLinkFn based on the\n * node type.\n *\n * @param {Node} node\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileNode(node, options) {\n  var type = node.nodeType;\n  if (type === 1 && !isScript(node)) {\n    return compileElement(node, options);\n  } else if (type === 3 && node.data.trim()) {\n    return compileTextNode(node, options);\n  } else {\n    return null;\n  }\n}\n\n/**\n * Compile an element and return a nodeLinkFn.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|null}\n */\n\nfunction compileElement(el, options) {\n  // preprocess textareas.\n  // textarea treats its text content as the initial value.\n  // just bind it as an attr directive for value.\n  if (el.tagName === 'TEXTAREA') {\n    // a textarea which has v-pre attr should skip complie.\n    if (getAttr(el, 'v-pre') !== null) {\n      return skip;\n    }\n    var tokens = parseText(el.value);\n    if (tokens) {\n      el.setAttribute(':value', tokensToExp(tokens));\n      el.value = '';\n    }\n  }\n  var linkFn;\n  var hasAttrs = el.hasAttributes();\n  var attrs = hasAttrs && toArray(el.attributes);\n  // check terminal directives (for & if)\n  if (hasAttrs) {\n    linkFn = checkTerminalDirectives(el, attrs, options);\n  }\n  // check element directives\n  if (!linkFn) {\n    linkFn = checkElementDirectives(el, options);\n  }\n  // check component\n  if (!linkFn) {\n    linkFn = checkComponent(el, options);\n  }\n  // normal directives\n  if (!linkFn && hasAttrs) {\n    linkFn = compileDirectives(attrs, options);\n  }\n  return linkFn;\n}\n\n/**\n * Compile a textNode and return a nodeLinkFn.\n *\n * @param {TextNode} node\n * @param {Object} options\n * @return {Function|null} textNodeLinkFn\n */\n\nfunction compileTextNode(node, options) {\n  // skip marked text nodes\n  if (node._skip) {\n    return removeText;\n  }\n\n  var tokens = parseText(node.wholeText);\n  if (!tokens) {\n    return null;\n  }\n\n  // mark adjacent text nodes as skipped,\n  // because we are using node.wholeText to compile\n  // all adjacent text nodes together. This fixes\n  // issues in IE where sometimes it splits up a single\n  // text node into multiple ones.\n  var next = node.nextSibling;\n  while (next && next.nodeType === 3) {\n    next._skip = true;\n    next = next.nextSibling;\n  }\n\n  var frag = document.createDocumentFragment();\n  var el, token;\n  for (var i = 0, l = tokens.length; i < l; i++) {\n    token = tokens[i];\n    el = token.tag ? processTextToken(token, options) : document.createTextNode(token.value);\n    frag.appendChild(el);\n  }\n  return makeTextNodeLinkFn(tokens, frag, options);\n}\n\n/**\n * Linker for an skipped text node.\n *\n * @param {Vue} vm\n * @param {Text} node\n */\n\nfunction removeText(vm, node) {\n  remove(node);\n}\n\n/**\n * Process a single text token.\n *\n * @param {Object} token\n * @param {Object} options\n * @return {Node}\n */\n\nfunction processTextToken(token, options) {\n  var el;\n  if (token.oneTime) {\n    el = document.createTextNode(token.value);\n  } else {\n    if (token.html) {\n      el = document.createComment('v-html');\n      setTokenType('html');\n    } else {\n      // IE will clean up empty textNodes during\n      // frag.cloneNode(true), so we have to give it\n      // something here...\n      el = document.createTextNode(' ');\n      setTokenType('text');\n    }\n  }\n  function setTokenType(type) {\n    if (token.descriptor) return;\n    var parsed = parseDirective(token.value);\n    token.descriptor = {\n      name: type,\n      def: directives[type],\n      expression: parsed.expression,\n      filters: parsed.filters\n    };\n  }\n  return el;\n}\n\n/**\n * Build a function that processes a textNode.\n *\n * @param {Array<Object>} tokens\n * @param {DocumentFragment} frag\n */\n\nfunction makeTextNodeLinkFn(tokens, frag) {\n  return function textNodeLinkFn(vm, el, host, scope) {\n    var fragClone = frag.cloneNode(true);\n    var childNodes = toArray(fragClone.childNodes);\n    var token, value, node;\n    for (var i = 0, l = tokens.length; i < l; i++) {\n      token = tokens[i];\n      value = token.value;\n      if (token.tag) {\n        node = childNodes[i];\n        if (token.oneTime) {\n          value = (scope || vm).$eval(value);\n          if (token.html) {\n            replace(node, parseTemplate(value, true));\n          } else {\n            node.data = _toString(value);\n          }\n        } else {\n          vm._bindDir(token.descriptor, node, host, scope);\n        }\n      }\n    }\n    replace(el, fragClone);\n  };\n}\n\n/**\n * Compile a node list and return a childLinkFn.\n *\n * @param {NodeList} nodeList\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction compileNodeList(nodeList, options) {\n  var linkFns = [];\n  var nodeLinkFn, childLinkFn, node;\n  for (var i = 0, l = nodeList.length; i < l; i++) {\n    node = nodeList[i];\n    nodeLinkFn = compileNode(node, options);\n    childLinkFn = !(nodeLinkFn && nodeLinkFn.terminal) && node.tagName !== 'SCRIPT' && node.hasChildNodes() ? compileNodeList(node.childNodes, options) : null;\n    linkFns.push(nodeLinkFn, childLinkFn);\n  }\n  return linkFns.length ? makeChildLinkFn(linkFns) : null;\n}\n\n/**\n * Make a child link function for a node's childNodes.\n *\n * @param {Array<Function>} linkFns\n * @return {Function} childLinkFn\n */\n\nfunction makeChildLinkFn(linkFns) {\n  return function childLinkFn(vm, nodes, host, scope, frag) {\n    var node, nodeLinkFn, childrenLinkFn;\n    for (var i = 0, n = 0, l = linkFns.length; i < l; n++) {\n      node = nodes[n];\n      nodeLinkFn = linkFns[i++];\n      childrenLinkFn = linkFns[i++];\n      // cache childNodes before linking parent, fix #657\n      var childNodes = toArray(node.childNodes);\n      if (nodeLinkFn) {\n        nodeLinkFn(vm, node, host, scope, frag);\n      }\n      if (childrenLinkFn) {\n        childrenLinkFn(vm, childNodes, host, scope, frag);\n      }\n    }\n  };\n}\n\n/**\n * Check for element directives (custom elements that should\n * be resovled as terminal directives).\n *\n * @param {Element} el\n * @param {Object} options\n */\n\nfunction checkElementDirectives(el, options) {\n  var tag = el.tagName.toLowerCase();\n  if (commonTagRE.test(tag)) {\n    return;\n  }\n  var def = resolveAsset(options, 'elementDirectives', tag);\n  if (def) {\n    return makeTerminalNodeLinkFn(el, tag, '', options, def);\n  }\n}\n\n/**\n * Check if an element is a component. If yes, return\n * a component link function.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Function|undefined}\n */\n\nfunction checkComponent(el, options) {\n  var component = checkComponentAttr(el, options);\n  if (component) {\n    var ref = findRef(el);\n    var descriptor = {\n      name: 'component',\n      ref: ref,\n      expression: component.id,\n      def: internalDirectives.component,\n      modifiers: {\n        literal: !component.dynamic\n      }\n    };\n    var componentLinkFn = function componentLinkFn(vm, el, host, scope, frag) {\n      if (ref) {\n        defineReactive((scope || vm).$refs, ref, null);\n      }\n      vm._bindDir(descriptor, el, host, scope, frag);\n    };\n    componentLinkFn.terminal = true;\n    return componentLinkFn;\n  }\n}\n\n/**\n * Check an element for terminal directives in fixed order.\n * If it finds one, return a terminal link function.\n *\n * @param {Element} el\n * @param {Array} attrs\n * @param {Object} options\n * @return {Function} terminalLinkFn\n */\n\nfunction checkTerminalDirectives(el, attrs, options) {\n  // skip v-pre\n  if (getAttr(el, 'v-pre') !== null) {\n    return skip;\n  }\n  // skip v-else block, but only if following v-if\n  if (el.hasAttribute('v-else')) {\n    var prev = el.previousElementSibling;\n    if (prev && prev.hasAttribute('v-if')) {\n      return skip;\n    }\n  }\n\n  var attr, name, value, modifiers, matched, dirName, rawName, arg, def, termDef;\n  for (var i = 0, j = attrs.length; i < j; i++) {\n    attr = attrs[i];\n    name = attr.name.replace(modifierRE, '');\n    if (matched = name.match(dirAttrRE)) {\n      def = resolveAsset(options, 'directives', matched[1]);\n      if (def && def.terminal) {\n        if (!termDef || (def.priority || DEFAULT_TERMINAL_PRIORITY) > termDef.priority) {\n          termDef = def;\n          rawName = attr.name;\n          modifiers = parseModifiers(attr.name);\n          value = attr.value;\n          dirName = matched[1];\n          arg = matched[2];\n        }\n      }\n    }\n  }\n\n  if (termDef) {\n    return makeTerminalNodeLinkFn(el, dirName, value, options, termDef, rawName, arg, modifiers);\n  }\n}\n\nfunction skip() {}\nskip.terminal = true;\n\n/**\n * Build a node link function for a terminal directive.\n * A terminal link function terminates the current\n * compilation recursion and handles compilation of the\n * subtree in the directive.\n *\n * @param {Element} el\n * @param {String} dirName\n * @param {String} value\n * @param {Object} options\n * @param {Object} def\n * @param {String} [rawName]\n * @param {String} [arg]\n * @param {Object} [modifiers]\n * @return {Function} terminalLinkFn\n */\n\nfunction makeTerminalNodeLinkFn(el, dirName, value, options, def, rawName, arg, modifiers) {\n  var parsed = parseDirective(value);\n  var descriptor = {\n    name: dirName,\n    arg: arg,\n    expression: parsed.expression,\n    filters: parsed.filters,\n    raw: value,\n    attr: rawName,\n    modifiers: modifiers,\n    def: def\n  };\n  // check ref for v-for, v-if and router-view\n  if (dirName === 'for' || dirName === 'router-view') {\n    descriptor.ref = findRef(el);\n  }\n  var fn = function terminalNodeLinkFn(vm, el, host, scope, frag) {\n    if (descriptor.ref) {\n      defineReactive((scope || vm).$refs, descriptor.ref, null);\n    }\n    vm._bindDir(descriptor, el, host, scope, frag);\n  };\n  fn.terminal = true;\n  return fn;\n}\n\n/**\n * Compile the directives on an element and return a linker.\n *\n * @param {Array|NamedNodeMap} attrs\n * @param {Object} options\n * @return {Function}\n */\n\nfunction compileDirectives(attrs, options) {\n  var i = attrs.length;\n  var dirs = [];\n  var attr, name, value, rawName, rawValue, dirName, arg, modifiers, dirDef, tokens, matched;\n  while (i--) {\n    attr = attrs[i];\n    name = rawName = attr.name;\n    value = rawValue = attr.value;\n    tokens = parseText(value);\n    // reset arg\n    arg = null;\n    // check modifiers\n    modifiers = parseModifiers(name);\n    name = name.replace(modifierRE, '');\n\n    // attribute interpolations\n    if (tokens) {\n      value = tokensToExp(tokens);\n      arg = name;\n      pushDir('bind', directives.bind, tokens);\n      // warn against mixing mustaches with v-bind\n      if (process.env.NODE_ENV !== 'production') {\n        if (name === 'class' && Array.prototype.some.call(attrs, function (attr) {\n          return attr.name === ':class' || attr.name === 'v-bind:class';\n        })) {\n          warn('class=\"' + rawValue + '\": Do not mix mustache interpolation ' + 'and v-bind for \"class\" on the same element. Use one or the other.', options);\n        }\n      }\n    } else\n\n      // special attribute: transition\n      if (transitionRE.test(name)) {\n        modifiers.literal = !bindRE.test(name);\n        pushDir('transition', internalDirectives.transition);\n      } else\n\n        // event handlers\n        if (onRE.test(name)) {\n          arg = name.replace(onRE, '');\n          pushDir('on', directives.on);\n        } else\n\n          // attribute bindings\n          if (bindRE.test(name)) {\n            dirName = name.replace(bindRE, '');\n            if (dirName === 'style' || dirName === 'class') {\n              pushDir(dirName, internalDirectives[dirName]);\n            } else {\n              arg = dirName;\n              pushDir('bind', directives.bind);\n            }\n          } else\n\n            // normal directives\n            if (matched = name.match(dirAttrRE)) {\n              dirName = matched[1];\n              arg = matched[2];\n\n              // skip v-else (when used with v-show)\n              if (dirName === 'else') {\n                continue;\n              }\n\n              dirDef = resolveAsset(options, 'directives', dirName, true);\n              if (dirDef) {\n                pushDir(dirName, dirDef);\n              }\n            }\n  }\n\n  /**\n   * Push a directive.\n   *\n   * @param {String} dirName\n   * @param {Object|Function} def\n   * @param {Array} [interpTokens]\n   */\n\n  function pushDir(dirName, def, interpTokens) {\n    var hasOneTimeToken = interpTokens && hasOneTime(interpTokens);\n    var parsed = !hasOneTimeToken && parseDirective(value);\n    dirs.push({\n      name: dirName,\n      attr: rawName,\n      raw: rawValue,\n      def: def,\n      arg: arg,\n      modifiers: modifiers,\n      // conversion from interpolation strings with one-time token\n      // to expression is differed until directive bind time so that we\n      // have access to the actual vm context for one-time bindings.\n      expression: parsed && parsed.expression,\n      filters: parsed && parsed.filters,\n      interp: interpTokens,\n      hasOneTime: hasOneTimeToken\n    });\n  }\n\n  if (dirs.length) {\n    return makeNodeLinkFn(dirs);\n  }\n}\n\n/**\n * Parse modifiers from directive attribute name.\n *\n * @param {String} name\n * @return {Object}\n */\n\nfunction parseModifiers(name) {\n  var res = Object.create(null);\n  var match = name.match(modifierRE);\n  if (match) {\n    var i = match.length;\n    while (i--) {\n      res[match[i].slice(1)] = true;\n    }\n  }\n  return res;\n}\n\n/**\n * Build a link function for all directives on a single node.\n *\n * @param {Array} directives\n * @return {Function} directivesLinkFn\n */\n\nfunction makeNodeLinkFn(directives) {\n  return function nodeLinkFn(vm, el, host, scope, frag) {\n    // reverse apply because it's sorted low to high\n    var i = directives.length;\n    while (i--) {\n      vm._bindDir(directives[i], el, host, scope, frag);\n    }\n  };\n}\n\n/**\n * Check if an interpolation string contains one-time tokens.\n *\n * @param {Array} tokens\n * @return {Boolean}\n */\n\nfunction hasOneTime(tokens) {\n  var i = tokens.length;\n  while (i--) {\n    if (tokens[i].oneTime) return true;\n  }\n}\n\nfunction isScript(el) {\n  return el.tagName === 'SCRIPT' && (!el.hasAttribute('type') || el.getAttribute('type') === 'text/javascript');\n}\n\nvar specialCharRE = /[^\\w\\-:\\.]/;\n\n/**\n * Process an element or a DocumentFragment based on a\n * instance option object. This allows us to transclude\n * a template node/fragment before the instance is created,\n * so the processed fragment can then be cloned and reused\n * in v-for.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transclude(el, options) {\n  // extract container attributes to pass them down\n  // to compiler, because they need to be compiled in\n  // parent scope. we are mutating the options object here\n  // assuming the same object will be used for compile\n  // right after this.\n  if (options) {\n    options._containerAttrs = extractAttrs(el);\n  }\n  // for template tags, what we want is its content as\n  // a documentFragment (for fragment instances)\n  if (isTemplate(el)) {\n    el = parseTemplate(el);\n  }\n  if (options) {\n    if (options._asComponent && !options.template) {\n      options.template = '<slot></slot>';\n    }\n    if (options.template) {\n      options._content = extractContent(el);\n      el = transcludeTemplate(el, options);\n    }\n  }\n  if (isFragment(el)) {\n    // anchors for fragment instance\n    // passing in `persist: true` to avoid them being\n    // discarded by IE during template cloning\n    prepend(createAnchor('v-start', true), el);\n    el.appendChild(createAnchor('v-end', true));\n  }\n  return el;\n}\n\n/**\n * Process the template option.\n * If the replace option is true this will swap the $el.\n *\n * @param {Element} el\n * @param {Object} options\n * @return {Element|DocumentFragment}\n */\n\nfunction transcludeTemplate(el, options) {\n  var template = options.template;\n  var frag = parseTemplate(template, true);\n  if (frag) {\n    var replacer = frag.firstChild;\n    if (!replacer) {\n      return frag;\n    }\n    var tag = replacer.tagName && replacer.tagName.toLowerCase();\n    if (options.replace) {\n      /* istanbul ignore if */\n      if (el === document.body) {\n        process.env.NODE_ENV !== 'production' && warn('You are mounting an instance with a template to ' + '<body>. This will replace <body> entirely. You ' + 'should probably use `replace: false` here.');\n      }\n      // there are many cases where the instance must\n      // become a fragment instance: basically anything that\n      // can create more than 1 root nodes.\n      if (\n      // multi-children template\n      frag.childNodes.length > 1 ||\n      // non-element template\n      replacer.nodeType !== 1 ||\n      // single nested component\n      tag === 'component' || resolveAsset(options, 'components', tag) || hasBindAttr(replacer, 'is') ||\n      // element directive\n      resolveAsset(options, 'elementDirectives', tag) ||\n      // for block\n      replacer.hasAttribute('v-for') ||\n      // if block\n      replacer.hasAttribute('v-if')) {\n        return frag;\n      } else {\n        options._replacerAttrs = extractAttrs(replacer);\n        mergeAttrs(el, replacer);\n        return replacer;\n      }\n    } else {\n      el.appendChild(frag);\n      return el;\n    }\n  } else {\n    process.env.NODE_ENV !== 'production' && warn('Invalid template option: ' + template);\n  }\n}\n\n/**\n * Helper to extract a component container's attributes\n * into a plain object array.\n *\n * @param {Element} el\n * @return {Array}\n */\n\nfunction extractAttrs(el) {\n  if (el.nodeType === 1 && el.hasAttributes()) {\n    return toArray(el.attributes);\n  }\n}\n\n/**\n * Merge the attributes of two elements, and make sure\n * the class names are merged properly.\n *\n * @param {Element} from\n * @param {Element} to\n */\n\nfunction mergeAttrs(from, to) {\n  var attrs = from.attributes;\n  var i = attrs.length;\n  var name, value;\n  while (i--) {\n    name = attrs[i].name;\n    value = attrs[i].value;\n    if (!to.hasAttribute(name) && !specialCharRE.test(name)) {\n      to.setAttribute(name, value);\n    } else if (name === 'class' && !parseText(value) && (value = value.trim())) {\n      value.split(/\\s+/).forEach(function (cls) {\n        addClass(to, cls);\n      });\n    }\n  }\n}\n\n/**\n * Scan and determine slot content distribution.\n * We do this during transclusion instead at compile time so that\n * the distribution is decoupled from the compilation order of\n * the slots.\n *\n * @param {Element|DocumentFragment} template\n * @param {Element} content\n * @param {Vue} vm\n */\n\nfunction resolveSlots(vm, content) {\n  if (!content) {\n    return;\n  }\n  var contents = vm._slotContents = Object.create(null);\n  var el, name;\n  for (var i = 0, l = content.children.length; i < l; i++) {\n    el = content.children[i];\n    /* eslint-disable no-cond-assign */\n    if (name = el.getAttribute('slot')) {\n      (contents[name] || (contents[name] = [])).push(el);\n    }\n    /* eslint-enable no-cond-assign */\n    if (process.env.NODE_ENV !== 'production' && getBindAttr(el, 'slot')) {\n      warn('The \"slot\" attribute must be static.', vm.$parent);\n    }\n  }\n  for (name in contents) {\n    contents[name] = extractFragment(contents[name], content);\n  }\n  if (content.hasChildNodes()) {\n    var nodes = content.childNodes;\n    if (nodes.length === 1 && nodes[0].nodeType === 3 && !nodes[0].data.trim()) {\n      return;\n    }\n    contents['default'] = extractFragment(content.childNodes, content);\n  }\n}\n\n/**\n * Extract qualified content nodes from a node list.\n *\n * @param {NodeList} nodes\n * @return {DocumentFragment}\n */\n\nfunction extractFragment(nodes, parent) {\n  var frag = document.createDocumentFragment();\n  nodes = toArray(nodes);\n  for (var i = 0, l = nodes.length; i < l; i++) {\n    var node = nodes[i];\n    if (isTemplate(node) && !node.hasAttribute('v-if') && !node.hasAttribute('v-for')) {\n      parent.removeChild(node);\n      node = parseTemplate(node, true);\n    }\n    frag.appendChild(node);\n  }\n  return frag;\n}\n\n\n\nvar compiler = Object.freeze({\n\tcompile: compile,\n\tcompileAndLinkProps: compileAndLinkProps,\n\tcompileRoot: compileRoot,\n\ttransclude: transclude,\n\tresolveSlots: resolveSlots\n});\n\nfunction stateMixin (Vue) {\n  /**\n   * Accessor for `$data` property, since setting $data\n   * requires observing the new object and updating\n   * proxied properties.\n   */\n\n  Object.defineProperty(Vue.prototype, '$data', {\n    get: function get() {\n      return this._data;\n    },\n    set: function set(newData) {\n      if (newData !== this._data) {\n        this._setData(newData);\n      }\n    }\n  });\n\n  /**\n   * Setup the scope of an instance, which contains:\n   * - observed data\n   * - computed properties\n   * - user methods\n   * - meta properties\n   */\n\n  Vue.prototype._initState = function () {\n    this._initProps();\n    this._initMeta();\n    this._initMethods();\n    this._initData();\n    this._initComputed();\n  };\n\n  /**\n   * Initialize props.\n   */\n\n  Vue.prototype._initProps = function () {\n    var options = this.$options;\n    var el = options.el;\n    var props = options.props;\n    if (props && !el) {\n      process.env.NODE_ENV !== 'production' && warn('Props will not be compiled if no `el` option is ' + 'provided at instantiation.', this);\n    }\n    // make sure to convert string selectors into element now\n    el = options.el = query(el);\n    this._propsUnlinkFn = el && el.nodeType === 1 && props\n    // props must be linked in proper scope if inside v-for\n    ? compileAndLinkProps(this, el, props, this._scope) : null;\n  };\n\n  /**\n   * Initialize the data.\n   */\n\n  Vue.prototype._initData = function () {\n    var dataFn = this.$options.data;\n    var data = this._data = dataFn ? dataFn() : {};\n    if (!isPlainObject(data)) {\n      data = {};\n      process.env.NODE_ENV !== 'production' && warn('data functions should return an object.', this);\n    }\n    var props = this._props;\n    // proxy data on instance\n    var keys = Object.keys(data);\n    var i, key;\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      // there are two scenarios where we can proxy a data key:\n      // 1. it's not already defined as a prop\n      // 2. it's provided via a instantiation option AND there are no\n      //    template prop present\n      if (!props || !hasOwn(props, key)) {\n        this._proxy(key);\n      } else if (process.env.NODE_ENV !== 'production') {\n        warn('Data field \"' + key + '\" is already defined ' + 'as a prop. To provide default value for a prop, use the \"default\" ' + 'prop option; if you want to pass prop values to an instantiation ' + 'call, use the \"propsData\" option.', this);\n      }\n    }\n    // observe data\n    observe(data, this);\n  };\n\n  /**\n   * Swap the instance's $data. Called in $data's setter.\n   *\n   * @param {Object} newData\n   */\n\n  Vue.prototype._setData = function (newData) {\n    newData = newData || {};\n    var oldData = this._data;\n    this._data = newData;\n    var keys, key, i;\n    // unproxy keys not present in new data\n    keys = Object.keys(oldData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!(key in newData)) {\n        this._unproxy(key);\n      }\n    }\n    // proxy keys not already proxied,\n    // and trigger change for changed values\n    keys = Object.keys(newData);\n    i = keys.length;\n    while (i--) {\n      key = keys[i];\n      if (!hasOwn(this, key)) {\n        // new property\n        this._proxy(key);\n      }\n    }\n    oldData.__ob__.removeVm(this);\n    observe(newData, this);\n    this._digest();\n  };\n\n  /**\n   * Proxy a property, so that\n   * vm.prop === vm._data.prop\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._proxy = function (key) {\n    if (!isReserved(key)) {\n      // need to store ref to self here\n      // because these getter/setters might\n      // be called by child scopes via\n      // prototype inheritance.\n      var self = this;\n      Object.defineProperty(self, key, {\n        configurable: true,\n        enumerable: true,\n        get: function proxyGetter() {\n          return self._data[key];\n        },\n        set: function proxySetter(val) {\n          self._data[key] = val;\n        }\n      });\n    }\n  };\n\n  /**\n   * Unproxy a property.\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype._unproxy = function (key) {\n    if (!isReserved(key)) {\n      delete this[key];\n    }\n  };\n\n  /**\n   * Force update on every watcher in scope.\n   */\n\n  Vue.prototype._digest = function () {\n    for (var i = 0, l = this._watchers.length; i < l; i++) {\n      this._watchers[i].update(true); // shallow updates\n    }\n  };\n\n  /**\n   * Setup computed properties. They are essentially\n   * special getter/setters\n   */\n\n  function noop() {}\n  Vue.prototype._initComputed = function () {\n    var computed = this.$options.computed;\n    if (computed) {\n      for (var key in computed) {\n        var userDef = computed[key];\n        var def = {\n          enumerable: true,\n          configurable: true\n        };\n        if (typeof userDef === 'function') {\n          def.get = makeComputedGetter(userDef, this);\n          def.set = noop;\n        } else {\n          def.get = userDef.get ? userDef.cache !== false ? makeComputedGetter(userDef.get, this) : bind(userDef.get, this) : noop;\n          def.set = userDef.set ? bind(userDef.set, this) : noop;\n        }\n        Object.defineProperty(this, key, def);\n      }\n    }\n  };\n\n  function makeComputedGetter(getter, owner) {\n    var watcher = new Watcher(owner, getter, null, {\n      lazy: true\n    });\n    return function computedGetter() {\n      if (watcher.dirty) {\n        watcher.evaluate();\n      }\n      if (Dep.target) {\n        watcher.depend();\n      }\n      return watcher.value;\n    };\n  }\n\n  /**\n   * Setup instance methods. Methods must be bound to the\n   * instance since they might be passed down as a prop to\n   * child components.\n   */\n\n  Vue.prototype._initMethods = function () {\n    var methods = this.$options.methods;\n    if (methods) {\n      for (var key in methods) {\n        this[key] = bind(methods[key], this);\n      }\n    }\n  };\n\n  /**\n   * Initialize meta information like $index, $key & $value.\n   */\n\n  Vue.prototype._initMeta = function () {\n    var metas = this.$options._meta;\n    if (metas) {\n      for (var key in metas) {\n        defineReactive(this, key, metas[key]);\n      }\n    }\n  };\n}\n\nvar eventRE = /^v-on:|^@/;\n\nfunction eventsMixin (Vue) {\n  /**\n   * Setup the instance's option events & watchers.\n   * If the value is a string, we pull it from the\n   * instance's methods by name.\n   */\n\n  Vue.prototype._initEvents = function () {\n    var options = this.$options;\n    if (options._asComponent) {\n      registerComponentEvents(this, options.el);\n    }\n    registerCallbacks(this, '$on', options.events);\n    registerCallbacks(this, '$watch', options.watch);\n  };\n\n  /**\n   * Register v-on events on a child component\n   *\n   * @param {Vue} vm\n   * @param {Element} el\n   */\n\n  function registerComponentEvents(vm, el) {\n    var attrs = el.attributes;\n    var name, value, handler;\n    for (var i = 0, l = attrs.length; i < l; i++) {\n      name = attrs[i].name;\n      if (eventRE.test(name)) {\n        name = name.replace(eventRE, '');\n        // force the expression into a statement so that\n        // it always dynamically resolves the method to call (#2670)\n        // kinda ugly hack, but does the job.\n        value = attrs[i].value;\n        if (isSimplePath(value)) {\n          value += '.apply(this, $arguments)';\n        }\n        handler = (vm._scope || vm._context).$eval(value, true);\n        handler._fromParent = true;\n        vm.$on(name.replace(eventRE), handler);\n      }\n    }\n  }\n\n  /**\n   * Register callbacks for option events and watchers.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {Object} hash\n   */\n\n  function registerCallbacks(vm, action, hash) {\n    if (!hash) return;\n    var handlers, key, i, j;\n    for (key in hash) {\n      handlers = hash[key];\n      if (isArray(handlers)) {\n        for (i = 0, j = handlers.length; i < j; i++) {\n          register(vm, action, key, handlers[i]);\n        }\n      } else {\n        register(vm, action, key, handlers);\n      }\n    }\n  }\n\n  /**\n   * Helper to register an event/watch callback.\n   *\n   * @param {Vue} vm\n   * @param {String} action\n   * @param {String} key\n   * @param {Function|String|Object} handler\n   * @param {Object} [options]\n   */\n\n  function register(vm, action, key, handler, options) {\n    var type = typeof handler;\n    if (type === 'function') {\n      vm[action](key, handler, options);\n    } else if (type === 'string') {\n      var methods = vm.$options.methods;\n      var method = methods && methods[handler];\n      if (method) {\n        vm[action](key, method, options);\n      } else {\n        process.env.NODE_ENV !== 'production' && warn('Unknown method: \"' + handler + '\" when ' + 'registering callback for ' + action + ': \"' + key + '\".', vm);\n      }\n    } else if (handler && type === 'object') {\n      register(vm, action, key, handler.handler, handler);\n    }\n  }\n\n  /**\n   * Setup recursive attached/detached calls\n   */\n\n  Vue.prototype._initDOMHooks = function () {\n    this.$on('hook:attached', onAttached);\n    this.$on('hook:detached', onDetached);\n  };\n\n  /**\n   * Callback to recursively call attached hook on children\n   */\n\n  function onAttached() {\n    if (!this._isAttached) {\n      this._isAttached = true;\n      this.$children.forEach(callAttach);\n    }\n  }\n\n  /**\n   * Iterator to call attached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callAttach(child) {\n    if (!child._isAttached && inDoc(child.$el)) {\n      child._callHook('attached');\n    }\n  }\n\n  /**\n   * Callback to recursively call detached hook on children\n   */\n\n  function onDetached() {\n    if (this._isAttached) {\n      this._isAttached = false;\n      this.$children.forEach(callDetach);\n    }\n  }\n\n  /**\n   * Iterator to call detached hook\n   *\n   * @param {Vue} child\n   */\n\n  function callDetach(child) {\n    if (child._isAttached && !inDoc(child.$el)) {\n      child._callHook('detached');\n    }\n  }\n\n  /**\n   * Trigger all handlers for a hook\n   *\n   * @param {String} hook\n   */\n\n  Vue.prototype._callHook = function (hook) {\n    this.$emit('pre-hook:' + hook);\n    var handlers = this.$options[hook];\n    if (handlers) {\n      for (var i = 0, j = handlers.length; i < j; i++) {\n        handlers[i].call(this);\n      }\n    }\n    this.$emit('hook:' + hook);\n  };\n}\n\nfunction noop$1() {}\n\n/**\n * A directive links a DOM element with a piece of data,\n * which is the result of evaluating an expression.\n * It registers a watcher with the expression and calls\n * the DOM update function when a change is triggered.\n *\n * @param {Object} descriptor\n *                 - {String} name\n *                 - {Object} def\n *                 - {String} expression\n *                 - {Array<Object>} [filters]\n *                 - {Object} [modifiers]\n *                 - {Boolean} literal\n *                 - {String} attr\n *                 - {String} arg\n *                 - {String} raw\n *                 - {String} [ref]\n *                 - {Array<Object>} [interp]\n *                 - {Boolean} [hasOneTime]\n * @param {Vue} vm\n * @param {Node} el\n * @param {Vue} [host] - transclusion host component\n * @param {Object} [scope] - v-for scope\n * @param {Fragment} [frag] - owner fragment\n * @constructor\n */\nfunction Directive(descriptor, vm, el, host, scope, frag) {\n  this.vm = vm;\n  this.el = el;\n  // copy descriptor properties\n  this.descriptor = descriptor;\n  this.name = descriptor.name;\n  this.expression = descriptor.expression;\n  this.arg = descriptor.arg;\n  this.modifiers = descriptor.modifiers;\n  this.filters = descriptor.filters;\n  this.literal = this.modifiers && this.modifiers.literal;\n  // private\n  this._locked = false;\n  this._bound = false;\n  this._listeners = null;\n  // link context\n  this._host = host;\n  this._scope = scope;\n  this._frag = frag;\n  // store directives on node in dev mode\n  if (process.env.NODE_ENV !== 'production' && this.el) {\n    this.el._vue_directives = this.el._vue_directives || [];\n    this.el._vue_directives.push(this);\n  }\n}\n\n/**\n * Initialize the directive, mixin definition properties,\n * setup the watcher, call definition bind() and update()\n * if present.\n */\n\nDirective.prototype._bind = function () {\n  var name = this.name;\n  var descriptor = this.descriptor;\n\n  // remove attribute\n  if ((name !== 'cloak' || this.vm._isCompiled) && this.el && this.el.removeAttribute) {\n    var attr = descriptor.attr || 'v-' + name;\n    this.el.removeAttribute(attr);\n  }\n\n  // copy def properties\n  var def = descriptor.def;\n  if (typeof def === 'function') {\n    this.update = def;\n  } else {\n    extend(this, def);\n  }\n\n  // setup directive params\n  this._setupParams();\n\n  // initial bind\n  if (this.bind) {\n    this.bind();\n  }\n  this._bound = true;\n\n  if (this.literal) {\n    this.update && this.update(descriptor.raw);\n  } else if ((this.expression || this.modifiers) && (this.update || this.twoWay) && !this._checkStatement()) {\n    // wrapped updater for context\n    var dir = this;\n    if (this.update) {\n      this._update = function (val, oldVal) {\n        if (!dir._locked) {\n          dir.update(val, oldVal);\n        }\n      };\n    } else {\n      this._update = noop$1;\n    }\n    var preProcess = this._preProcess ? bind(this._preProcess, this) : null;\n    var postProcess = this._postProcess ? bind(this._postProcess, this) : null;\n    var watcher = this._watcher = new Watcher(this.vm, this.expression, this._update, // callback\n    {\n      filters: this.filters,\n      twoWay: this.twoWay,\n      deep: this.deep,\n      preProcess: preProcess,\n      postProcess: postProcess,\n      scope: this._scope\n    });\n    // v-model with inital inline value need to sync back to\n    // model instead of update to DOM on init. They would\n    // set the afterBind hook to indicate that.\n    if (this.afterBind) {\n      this.afterBind();\n    } else if (this.update) {\n      this.update(watcher.value);\n    }\n  }\n};\n\n/**\n * Setup all param attributes, e.g. track-by,\n * transition-mode, etc...\n */\n\nDirective.prototype._setupParams = function () {\n  if (!this.params) {\n    return;\n  }\n  var params = this.params;\n  // swap the params array with a fresh object.\n  this.params = Object.create(null);\n  var i = params.length;\n  var key, val, mappedKey;\n  while (i--) {\n    key = hyphenate(params[i]);\n    mappedKey = camelize(key);\n    val = getBindAttr(this.el, key);\n    if (val != null) {\n      // dynamic\n      this._setupParamWatcher(mappedKey, val);\n    } else {\n      // static\n      val = getAttr(this.el, key);\n      if (val != null) {\n        this.params[mappedKey] = val === '' ? true : val;\n      }\n    }\n  }\n};\n\n/**\n * Setup a watcher for a dynamic param.\n *\n * @param {String} key\n * @param {String} expression\n */\n\nDirective.prototype._setupParamWatcher = function (key, expression) {\n  var self = this;\n  var called = false;\n  var unwatch = (this._scope || this.vm).$watch(expression, function (val, oldVal) {\n    self.params[key] = val;\n    // since we are in immediate mode,\n    // only call the param change callbacks if this is not the first update.\n    if (called) {\n      var cb = self.paramWatchers && self.paramWatchers[key];\n      if (cb) {\n        cb.call(self, val, oldVal);\n      }\n    } else {\n      called = true;\n    }\n  }, {\n    immediate: true,\n    user: false\n  });(this._paramUnwatchFns || (this._paramUnwatchFns = [])).push(unwatch);\n};\n\n/**\n * Check if the directive is a function caller\n * and if the expression is a callable one. If both true,\n * we wrap up the expression and use it as the event\n * handler.\n *\n * e.g. on-click=\"a++\"\n *\n * @return {Boolean}\n */\n\nDirective.prototype._checkStatement = function () {\n  var expression = this.expression;\n  if (expression && this.acceptStatement && !isSimplePath(expression)) {\n    var fn = parseExpression$1(expression).get;\n    var scope = this._scope || this.vm;\n    var handler = function handler(e) {\n      scope.$event = e;\n      fn.call(scope, scope);\n      scope.$event = null;\n    };\n    if (this.filters) {\n      handler = scope._applyFilters(handler, null, this.filters);\n    }\n    this.update(handler);\n    return true;\n  }\n};\n\n/**\n * Set the corresponding value with the setter.\n * This should only be used in two-way directives\n * e.g. v-model.\n *\n * @param {*} value\n * @public\n */\n\nDirective.prototype.set = function (value) {\n  /* istanbul ignore else */\n  if (this.twoWay) {\n    this._withLock(function () {\n      this._watcher.set(value);\n    });\n  } else if (process.env.NODE_ENV !== 'production') {\n    warn('Directive.set() can only be used inside twoWay' + 'directives.');\n  }\n};\n\n/**\n * Execute a function while preventing that function from\n * triggering updates on this directive instance.\n *\n * @param {Function} fn\n */\n\nDirective.prototype._withLock = function (fn) {\n  var self = this;\n  self._locked = true;\n  fn.call(self);\n  nextTick(function () {\n    self._locked = false;\n  });\n};\n\n/**\n * Convenience method that attaches a DOM event listener\n * to the directive element and autometically tears it down\n * during unbind.\n *\n * @param {String} event\n * @param {Function} handler\n * @param {Boolean} [useCapture]\n */\n\nDirective.prototype.on = function (event, handler, useCapture) {\n  on(this.el, event, handler, useCapture);(this._listeners || (this._listeners = [])).push([event, handler]);\n};\n\n/**\n * Teardown the watcher and call unbind.\n */\n\nDirective.prototype._teardown = function () {\n  if (this._bound) {\n    this._bound = false;\n    if (this.unbind) {\n      this.unbind();\n    }\n    if (this._watcher) {\n      this._watcher.teardown();\n    }\n    var listeners = this._listeners;\n    var i;\n    if (listeners) {\n      i = listeners.length;\n      while (i--) {\n        off(this.el, listeners[i][0], listeners[i][1]);\n      }\n    }\n    var unwatchFns = this._paramUnwatchFns;\n    if (unwatchFns) {\n      i = unwatchFns.length;\n      while (i--) {\n        unwatchFns[i]();\n      }\n    }\n    if (process.env.NODE_ENV !== 'production' && this.el) {\n      this.el._vue_directives.$remove(this);\n    }\n    this.vm = this.el = this._watcher = this._listeners = null;\n  }\n};\n\nfunction lifecycleMixin (Vue) {\n  /**\n   * Update v-ref for component.\n   *\n   * @param {Boolean} remove\n   */\n\n  Vue.prototype._updateRef = function (remove) {\n    var ref = this.$options._ref;\n    if (ref) {\n      var refs = (this._scope || this._context).$refs;\n      if (remove) {\n        if (refs[ref] === this) {\n          refs[ref] = null;\n        }\n      } else {\n        refs[ref] = this;\n      }\n    }\n  };\n\n  /**\n   * Transclude, compile and link element.\n   *\n   * If a pre-compiled linker is available, that means the\n   * passed in element will be pre-transcluded and compiled\n   * as well - all we need to do is to call the linker.\n   *\n   * Otherwise we need to call transclude/compile/link here.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._compile = function (el) {\n    var options = this.$options;\n\n    // transclude and init element\n    // transclude can potentially replace original\n    // so we need to keep reference; this step also injects\n    // the template and caches the original attributes\n    // on the container node and replacer node.\n    var original = el;\n    el = transclude(el, options);\n    this._initElement(el);\n\n    // handle v-pre on root node (#2026)\n    if (el.nodeType === 1 && getAttr(el, 'v-pre') !== null) {\n      return;\n    }\n\n    // root is always compiled per-instance, because\n    // container attrs and props can be different every time.\n    var contextOptions = this._context && this._context.$options;\n    var rootLinker = compileRoot(el, options, contextOptions);\n\n    // resolve slot distribution\n    resolveSlots(this, options._content);\n\n    // compile and link the rest\n    var contentLinkFn;\n    var ctor = this.constructor;\n    // component compilation can be cached\n    // as long as it's not using inline-template\n    if (options._linkerCachable) {\n      contentLinkFn = ctor.linker;\n      if (!contentLinkFn) {\n        contentLinkFn = ctor.linker = compile(el, options);\n      }\n    }\n\n    // link phase\n    // make sure to link root with prop scope!\n    var rootUnlinkFn = rootLinker(this, el, this._scope);\n    var contentUnlinkFn = contentLinkFn ? contentLinkFn(this, el) : compile(el, options)(this, el);\n\n    // register composite unlink function\n    // to be called during instance destruction\n    this._unlinkFn = function () {\n      rootUnlinkFn();\n      // passing destroying: true to avoid searching and\n      // splicing the directives\n      contentUnlinkFn(true);\n    };\n\n    // finally replace original\n    if (options.replace) {\n      replace(original, el);\n    }\n\n    this._isCompiled = true;\n    this._callHook('compiled');\n  };\n\n  /**\n   * Initialize instance element. Called in the public\n   * $mount() method.\n   *\n   * @param {Element} el\n   */\n\n  Vue.prototype._initElement = function (el) {\n    if (isFragment(el)) {\n      this._isFragment = true;\n      this.$el = this._fragmentStart = el.firstChild;\n      this._fragmentEnd = el.lastChild;\n      // set persisted text anchors to empty\n      if (this._fragmentStart.nodeType === 3) {\n        this._fragmentStart.data = this._fragmentEnd.data = '';\n      }\n      this._fragment = el;\n    } else {\n      this.$el = el;\n    }\n    this.$el.__vue__ = this;\n    this._callHook('beforeCompile');\n  };\n\n  /**\n   * Create and bind a directive to an element.\n   *\n   * @param {Object} descriptor - parsed directive descriptor\n   * @param {Node} node   - target node\n   * @param {Vue} [host] - transclusion host component\n   * @param {Object} [scope] - v-for scope\n   * @param {Fragment} [frag] - owner fragment\n   */\n\n  Vue.prototype._bindDir = function (descriptor, node, host, scope, frag) {\n    this._directives.push(new Directive(descriptor, this, node, host, scope, frag));\n  };\n\n  /**\n   * Teardown an instance, unobserves the data, unbind all the\n   * directives, turn off all the event listeners, etc.\n   *\n   * @param {Boolean} remove - whether to remove the DOM node.\n   * @param {Boolean} deferCleanup - if true, defer cleanup to\n   *                                 be called later\n   */\n\n  Vue.prototype._destroy = function (remove, deferCleanup) {\n    if (this._isBeingDestroyed) {\n      if (!deferCleanup) {\n        this._cleanup();\n      }\n      return;\n    }\n\n    var destroyReady;\n    var pendingRemoval;\n\n    var self = this;\n    // Cleanup should be called either synchronously or asynchronoysly as\n    // callback of this.$remove(), or if remove and deferCleanup are false.\n    // In any case it should be called after all other removing, unbinding and\n    // turning of is done\n    var cleanupIfPossible = function cleanupIfPossible() {\n      if (destroyReady && !pendingRemoval && !deferCleanup) {\n        self._cleanup();\n      }\n    };\n\n    // remove DOM element\n    if (remove && this.$el) {\n      pendingRemoval = true;\n      this.$remove(function () {\n        pendingRemoval = false;\n        cleanupIfPossible();\n      });\n    }\n\n    this._callHook('beforeDestroy');\n    this._isBeingDestroyed = true;\n    var i;\n    // remove self from parent. only necessary\n    // if parent is not being destroyed as well.\n    var parent = this.$parent;\n    if (parent && !parent._isBeingDestroyed) {\n      parent.$children.$remove(this);\n      // unregister ref (remove: true)\n      this._updateRef(true);\n    }\n    // destroy all children.\n    i = this.$children.length;\n    while (i--) {\n      this.$children[i].$destroy();\n    }\n    // teardown props\n    if (this._propsUnlinkFn) {\n      this._propsUnlinkFn();\n    }\n    // teardown all directives. this also tearsdown all\n    // directive-owned watchers.\n    if (this._unlinkFn) {\n      this._unlinkFn();\n    }\n    i = this._watchers.length;\n    while (i--) {\n      this._watchers[i].teardown();\n    }\n    // remove reference to self on $el\n    if (this.$el) {\n      this.$el.__vue__ = null;\n    }\n\n    destroyReady = true;\n    cleanupIfPossible();\n  };\n\n  /**\n   * Clean up to ensure garbage collection.\n   * This is called after the leave transition if there\n   * is any.\n   */\n\n  Vue.prototype._cleanup = function () {\n    if (this._isDestroyed) {\n      return;\n    }\n    // remove self from owner fragment\n    // do it in cleanup so that we can call $destroy with\n    // defer right when a fragment is about to be removed.\n    if (this._frag) {\n      this._frag.children.$remove(this);\n    }\n    // remove reference from data ob\n    // frozen object may not have observer.\n    if (this._data && this._data.__ob__) {\n      this._data.__ob__.removeVm(this);\n    }\n    // Clean up references to private properties and other\n    // instances. preserve reference to _data so that proxy\n    // accessors still work. The only potential side effect\n    // here is that mutating the instance after it's destroyed\n    // may affect the state of other components that are still\n    // observing the same object, but that seems to be a\n    // reasonable responsibility for the user rather than\n    // always throwing an error on them.\n    this.$el = this.$parent = this.$root = this.$children = this._watchers = this._context = this._scope = this._directives = null;\n    // call the last hook...\n    this._isDestroyed = true;\n    this._callHook('destroyed');\n    // turn off all instance listeners.\n    this.$off();\n  };\n}\n\nfunction miscMixin (Vue) {\n  /**\n   * Apply a list of filter (descriptors) to a value.\n   * Using plain for loops here because this will be called in\n   * the getter of any watcher with filters so it is very\n   * performance sensitive.\n   *\n   * @param {*} value\n   * @param {*} [oldValue]\n   * @param {Array} filters\n   * @param {Boolean} write\n   * @return {*}\n   */\n\n  Vue.prototype._applyFilters = function (value, oldValue, filters, write) {\n    var filter, fn, args, arg, offset, i, l, j, k;\n    for (i = 0, l = filters.length; i < l; i++) {\n      filter = filters[write ? l - i - 1 : i];\n      fn = resolveAsset(this.$options, 'filters', filter.name, true);\n      if (!fn) continue;\n      fn = write ? fn.write : fn.read || fn;\n      if (typeof fn !== 'function') continue;\n      args = write ? [value, oldValue] : [value];\n      offset = write ? 2 : 1;\n      if (filter.args) {\n        for (j = 0, k = filter.args.length; j < k; j++) {\n          arg = filter.args[j];\n          args[j + offset] = arg.dynamic ? this.$get(arg.value) : arg.value;\n        }\n      }\n      value = fn.apply(this, args);\n    }\n    return value;\n  };\n\n  /**\n   * Resolve a component, depending on whether the component\n   * is defined normally or using an async factory function.\n   * Resolves synchronously if already resolved, otherwise\n   * resolves asynchronously and caches the resolved\n   * constructor on the factory.\n   *\n   * @param {String|Function} value\n   * @param {Function} cb\n   */\n\n  Vue.prototype._resolveComponent = function (value, cb) {\n    var factory;\n    if (typeof value === 'function') {\n      factory = value;\n    } else {\n      factory = resolveAsset(this.$options, 'components', value, true);\n    }\n    /* istanbul ignore if */\n    if (!factory) {\n      return;\n    }\n    // async component factory\n    if (!factory.options) {\n      if (factory.resolved) {\n        // cached\n        cb(factory.resolved);\n      } else if (factory.requested) {\n        // pool callbacks\n        factory.pendingCallbacks.push(cb);\n      } else {\n        factory.requested = true;\n        var cbs = factory.pendingCallbacks = [cb];\n        factory.call(this, function resolve(res) {\n          if (isPlainObject(res)) {\n            res = Vue.extend(res);\n          }\n          // cache resolved\n          factory.resolved = res;\n          // invoke callbacks\n          for (var i = 0, l = cbs.length; i < l; i++) {\n            cbs[i](res);\n          }\n        }, function reject(reason) {\n          process.env.NODE_ENV !== 'production' && warn('Failed to resolve async component' + (typeof value === 'string' ? ': ' + value : '') + '. ' + (reason ? '\\nReason: ' + reason : ''));\n        });\n      }\n    } else {\n      // normal component\n      cb(factory);\n    }\n  };\n}\n\nvar filterRE$1 = /[^|]\\|[^|]/;\n\nfunction dataAPI (Vue) {\n  /**\n   * Get the value from an expression on this vm.\n   *\n   * @param {String} exp\n   * @param {Boolean} [asStatement]\n   * @return {*}\n   */\n\n  Vue.prototype.$get = function (exp, asStatement) {\n    var res = parseExpression$1(exp);\n    if (res) {\n      if (asStatement) {\n        var self = this;\n        return function statementHandler() {\n          self.$arguments = toArray(arguments);\n          var result = res.get.call(self, self);\n          self.$arguments = null;\n          return result;\n        };\n      } else {\n        try {\n          return res.get.call(this, this);\n        } catch (e) {}\n      }\n    }\n  };\n\n  /**\n   * Set the value from an expression on this vm.\n   * The expression must be a valid left-hand\n   * expression in an assignment.\n   *\n   * @param {String} exp\n   * @param {*} val\n   */\n\n  Vue.prototype.$set = function (exp, val) {\n    var res = parseExpression$1(exp, true);\n    if (res && res.set) {\n      res.set.call(this, this, val);\n    }\n  };\n\n  /**\n   * Delete a property on the VM\n   *\n   * @param {String} key\n   */\n\n  Vue.prototype.$delete = function (key) {\n    del(this._data, key);\n  };\n\n  /**\n   * Watch an expression, trigger callback when its\n   * value changes.\n   *\n   * @param {String|Function} expOrFn\n   * @param {Function} cb\n   * @param {Object} [options]\n   *                 - {Boolean} deep\n   *                 - {Boolean} immediate\n   * @return {Function} - unwatchFn\n   */\n\n  Vue.prototype.$watch = function (expOrFn, cb, options) {\n    var vm = this;\n    var parsed;\n    if (typeof expOrFn === 'string') {\n      parsed = parseDirective(expOrFn);\n      expOrFn = parsed.expression;\n    }\n    var watcher = new Watcher(vm, expOrFn, cb, {\n      deep: options && options.deep,\n      sync: options && options.sync,\n      filters: parsed && parsed.filters,\n      user: !options || options.user !== false\n    });\n    if (options && options.immediate) {\n      cb.call(vm, watcher.value);\n    }\n    return function unwatchFn() {\n      watcher.teardown();\n    };\n  };\n\n  /**\n   * Evaluate a text directive, including filters.\n   *\n   * @param {String} text\n   * @param {Boolean} [asStatement]\n   * @return {String}\n   */\n\n  Vue.prototype.$eval = function (text, asStatement) {\n    // check for filters.\n    if (filterRE$1.test(text)) {\n      var dir = parseDirective(text);\n      // the filter regex check might give false positive\n      // for pipes inside strings, so it's possible that\n      // we don't get any filters here\n      var val = this.$get(dir.expression, asStatement);\n      return dir.filters ? this._applyFilters(val, null, dir.filters) : val;\n    } else {\n      // no filter\n      return this.$get(text, asStatement);\n    }\n  };\n\n  /**\n   * Interpolate a piece of template text.\n   *\n   * @param {String} text\n   * @return {String}\n   */\n\n  Vue.prototype.$interpolate = function (text) {\n    var tokens = parseText(text);\n    var vm = this;\n    if (tokens) {\n      if (tokens.length === 1) {\n        return vm.$eval(tokens[0].value) + '';\n      } else {\n        return tokens.map(function (token) {\n          return token.tag ? vm.$eval(token.value) : token.value;\n        }).join('');\n      }\n    } else {\n      return text;\n    }\n  };\n\n  /**\n   * Log instance data as a plain JS object\n   * so that it is easier to inspect in console.\n   * This method assumes console is available.\n   *\n   * @param {String} [path]\n   */\n\n  Vue.prototype.$log = function (path) {\n    var data = path ? getPath(this._data, path) : this._data;\n    if (data) {\n      data = clean(data);\n    }\n    // include computed fields\n    if (!path) {\n      var key;\n      for (key in this.$options.computed) {\n        data[key] = clean(this[key]);\n      }\n      if (this._props) {\n        for (key in this._props) {\n          data[key] = clean(this[key]);\n        }\n      }\n    }\n    console.log(data);\n  };\n\n  /**\n   * \"clean\" a getter/setter converted object into a plain\n   * object copy.\n   *\n   * @param {Object} - obj\n   * @return {Object}\n   */\n\n  function clean(obj) {\n    return JSON.parse(JSON.stringify(obj));\n  }\n}\n\nfunction domAPI (Vue) {\n  /**\n   * Convenience on-instance nextTick. The callback is\n   * auto-bound to the instance, and this avoids component\n   * modules having to rely on the global Vue.\n   *\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$nextTick = function (fn) {\n    nextTick(fn, this);\n  };\n\n  /**\n   * Append instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$appendTo = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, append, appendWithTransition);\n  };\n\n  /**\n   * Prepend instance to target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$prependTo = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.hasChildNodes()) {\n      this.$before(target.firstChild, cb, withTransition);\n    } else {\n      this.$appendTo(target, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Insert instance before target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$before = function (target, cb, withTransition) {\n    return insert(this, target, cb, withTransition, beforeWithCb, beforeWithTransition);\n  };\n\n  /**\n   * Insert instance after target\n   *\n   * @param {Node} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$after = function (target, cb, withTransition) {\n    target = query(target);\n    if (target.nextSibling) {\n      this.$before(target.nextSibling, cb, withTransition);\n    } else {\n      this.$appendTo(target.parentNode, cb, withTransition);\n    }\n    return this;\n  };\n\n  /**\n   * Remove instance from DOM\n   *\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition] - defaults to true\n   */\n\n  Vue.prototype.$remove = function (cb, withTransition) {\n    if (!this.$el.parentNode) {\n      return cb && cb();\n    }\n    var inDocument = this._isAttached && inDoc(this.$el);\n    // if we are not in document, no need to check\n    // for transitions\n    if (!inDocument) withTransition = false;\n    var self = this;\n    var realCb = function realCb() {\n      if (inDocument) self._callHook('detached');\n      if (cb) cb();\n    };\n    if (this._isFragment) {\n      removeNodeRange(this._fragmentStart, this._fragmentEnd, this, this._fragment, realCb);\n    } else {\n      var op = withTransition === false ? removeWithCb : removeWithTransition;\n      op(this.$el, this, realCb);\n    }\n    return this;\n  };\n\n  /**\n   * Shared DOM insertion function.\n   *\n   * @param {Vue} vm\n   * @param {Element} target\n   * @param {Function} [cb]\n   * @param {Boolean} [withTransition]\n   * @param {Function} op1 - op for non-transition insert\n   * @param {Function} op2 - op for transition insert\n   * @return vm\n   */\n\n  function insert(vm, target, cb, withTransition, op1, op2) {\n    target = query(target);\n    var targetIsDetached = !inDoc(target);\n    var op = withTransition === false || targetIsDetached ? op1 : op2;\n    var shouldCallHook = !targetIsDetached && !vm._isAttached && !inDoc(vm.$el);\n    if (vm._isFragment) {\n      mapNodeRange(vm._fragmentStart, vm._fragmentEnd, function (node) {\n        op(node, target, vm);\n      });\n      cb && cb();\n    } else {\n      op(vm.$el, target, vm, cb);\n    }\n    if (shouldCallHook) {\n      vm._callHook('attached');\n    }\n    return vm;\n  }\n\n  /**\n   * Check for selectors\n   *\n   * @param {String|Element} el\n   */\n\n  function query(el) {\n    return typeof el === 'string' ? document.querySelector(el) : el;\n  }\n\n  /**\n   * Append operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function append(el, target, vm, cb) {\n    target.appendChild(el);\n    if (cb) cb();\n  }\n\n  /**\n   * InsertBefore operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Node} target\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function beforeWithCb(el, target, vm, cb) {\n    before(el, target);\n    if (cb) cb();\n  }\n\n  /**\n   * Remove operation that takes a callback.\n   *\n   * @param {Node} el\n   * @param {Vue} vm - unused\n   * @param {Function} [cb]\n   */\n\n  function removeWithCb(el, vm, cb) {\n    remove(el);\n    if (cb) cb();\n  }\n}\n\nfunction eventsAPI (Vue) {\n  /**\n   * Listen on the given `event` with `fn`.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$on = function (event, fn) {\n    (this._events[event] || (this._events[event] = [])).push(fn);\n    modifyListenerCount(this, event, 1);\n    return this;\n  };\n\n  /**\n   * Adds an `event` listener that will be invoked a single\n   * time then automatically removed.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$once = function (event, fn) {\n    var self = this;\n    function on() {\n      self.$off(event, on);\n      fn.apply(this, arguments);\n    }\n    on.fn = fn;\n    this.$on(event, on);\n    return this;\n  };\n\n  /**\n   * Remove the given callback for `event` or all\n   * registered callbacks.\n   *\n   * @param {String} event\n   * @param {Function} fn\n   */\n\n  Vue.prototype.$off = function (event, fn) {\n    var cbs;\n    // all\n    if (!arguments.length) {\n      if (this.$parent) {\n        for (event in this._events) {\n          cbs = this._events[event];\n          if (cbs) {\n            modifyListenerCount(this, event, -cbs.length);\n          }\n        }\n      }\n      this._events = {};\n      return this;\n    }\n    // specific event\n    cbs = this._events[event];\n    if (!cbs) {\n      return this;\n    }\n    if (arguments.length === 1) {\n      modifyListenerCount(this, event, -cbs.length);\n      this._events[event] = null;\n      return this;\n    }\n    // specific handler\n    var cb;\n    var i = cbs.length;\n    while (i--) {\n      cb = cbs[i];\n      if (cb === fn || cb.fn === fn) {\n        modifyListenerCount(this, event, -1);\n        cbs.splice(i, 1);\n        break;\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Trigger an event on self.\n   *\n   * @param {String|Object} event\n   * @return {Boolean} shouldPropagate\n   */\n\n  Vue.prototype.$emit = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    var cbs = this._events[event];\n    var shouldPropagate = isSource || !cbs;\n    if (cbs) {\n      cbs = cbs.length > 1 ? toArray(cbs) : cbs;\n      // this is a somewhat hacky solution to the question raised\n      // in #2102: for an inline component listener like <comp @test=\"doThis\">,\n      // the propagation handling is somewhat broken. Therefore we\n      // need to treat these inline callbacks differently.\n      var hasParentCbs = isSource && cbs.some(function (cb) {\n        return cb._fromParent;\n      });\n      if (hasParentCbs) {\n        shouldPropagate = false;\n      }\n      var args = toArray(arguments, 1);\n      for (var i = 0, l = cbs.length; i < l; i++) {\n        var cb = cbs[i];\n        var res = cb.apply(this, args);\n        if (res === true && (!hasParentCbs || cb._fromParent)) {\n          shouldPropagate = true;\n        }\n      }\n    }\n    return shouldPropagate;\n  };\n\n  /**\n   * Recursively broadcast an event to all children instances.\n   *\n   * @param {String|Object} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$broadcast = function (event) {\n    var isSource = typeof event === 'string';\n    event = isSource ? event : event.name;\n    // if no child has registered for this event,\n    // then there's no need to broadcast.\n    if (!this._eventsCount[event]) return;\n    var children = this.$children;\n    var args = toArray(arguments);\n    if (isSource) {\n      // use object event to indicate non-source emit\n      // on children\n      args[0] = { name: event, source: this };\n    }\n    for (var i = 0, l = children.length; i < l; i++) {\n      var child = children[i];\n      var shouldPropagate = child.$emit.apply(child, args);\n      if (shouldPropagate) {\n        child.$broadcast.apply(child, args);\n      }\n    }\n    return this;\n  };\n\n  /**\n   * Recursively propagate an event up the parent chain.\n   *\n   * @param {String} event\n   * @param {...*} additional arguments\n   */\n\n  Vue.prototype.$dispatch = function (event) {\n    var shouldPropagate = this.$emit.apply(this, arguments);\n    if (!shouldPropagate) return;\n    var parent = this.$parent;\n    var args = toArray(arguments);\n    // use object event to indicate non-source emit\n    // on parents\n    args[0] = { name: event, source: this };\n    while (parent) {\n      shouldPropagate = parent.$emit.apply(parent, args);\n      parent = shouldPropagate ? parent.$parent : null;\n    }\n    return this;\n  };\n\n  /**\n   * Modify the listener counts on all parents.\n   * This bookkeeping allows $broadcast to return early when\n   * no child has listened to a certain event.\n   *\n   * @param {Vue} vm\n   * @param {String} event\n   * @param {Number} count\n   */\n\n  var hookRE = /^hook:/;\n  function modifyListenerCount(vm, event, count) {\n    var parent = vm.$parent;\n    // hooks do not get broadcasted so no need\n    // to do bookkeeping for them\n    if (!parent || !count || hookRE.test(event)) return;\n    while (parent) {\n      parent._eventsCount[event] = (parent._eventsCount[event] || 0) + count;\n      parent = parent.$parent;\n    }\n  }\n}\n\nfunction lifecycleAPI (Vue) {\n  /**\n   * Set instance target element and kick off the compilation\n   * process. The passed in `el` can be a selector string, an\n   * existing Element, or a DocumentFragment (for block\n   * instances).\n   *\n   * @param {Element|DocumentFragment|string} el\n   * @public\n   */\n\n  Vue.prototype.$mount = function (el) {\n    if (this._isCompiled) {\n      process.env.NODE_ENV !== 'production' && warn('$mount() should be called only once.', this);\n      return;\n    }\n    el = query(el);\n    if (!el) {\n      el = document.createElement('div');\n    }\n    this._compile(el);\n    this._initDOMHooks();\n    if (inDoc(this.$el)) {\n      this._callHook('attached');\n      ready.call(this);\n    } else {\n      this.$once('hook:attached', ready);\n    }\n    return this;\n  };\n\n  /**\n   * Mark an instance as ready.\n   */\n\n  function ready() {\n    this._isAttached = true;\n    this._isReady = true;\n    this._callHook('ready');\n  }\n\n  /**\n   * Teardown the instance, simply delegate to the internal\n   * _destroy.\n   *\n   * @param {Boolean} remove\n   * @param {Boolean} deferCleanup\n   */\n\n  Vue.prototype.$destroy = function (remove, deferCleanup) {\n    this._destroy(remove, deferCleanup);\n  };\n\n  /**\n   * Partially compile a piece of DOM and return a\n   * decompile function.\n   *\n   * @param {Element|DocumentFragment} el\n   * @param {Vue} [host]\n   * @param {Object} [scope]\n   * @param {Fragment} [frag]\n   * @return {Function}\n   */\n\n  Vue.prototype.$compile = function (el, host, scope, frag) {\n    return compile(el, this.$options, true)(this, el, host, scope, frag);\n  };\n}\n\n/**\n * The exposed Vue constructor.\n *\n * API conventions:\n * - public API methods/properties are prefixed with `$`\n * - internal methods/properties are prefixed with `_`\n * - non-prefixed properties are assumed to be proxied user\n *   data.\n *\n * @constructor\n * @param {Object} [options]\n * @public\n */\n\nfunction Vue(options) {\n  this._init(options);\n}\n\n// install internals\ninitMixin(Vue);\nstateMixin(Vue);\neventsMixin(Vue);\nlifecycleMixin(Vue);\nmiscMixin(Vue);\n\n// install instance APIs\ndataAPI(Vue);\ndomAPI(Vue);\neventsAPI(Vue);\nlifecycleAPI(Vue);\n\nvar slot = {\n\n  priority: SLOT,\n  params: ['name'],\n\n  bind: function bind() {\n    // this was resolved during component transclusion\n    var name = this.params.name || 'default';\n    var content = this.vm._slotContents && this.vm._slotContents[name];\n    if (!content || !content.hasChildNodes()) {\n      this.fallback();\n    } else {\n      this.compile(content.cloneNode(true), this.vm._context, this.vm);\n    }\n  },\n\n  compile: function compile(content, context, host) {\n    if (content && context) {\n      if (this.el.hasChildNodes() && content.childNodes.length === 1 && content.childNodes[0].nodeType === 1 && content.childNodes[0].hasAttribute('v-if')) {\n        // if the inserted slot has v-if\n        // inject fallback content as the v-else\n        var elseBlock = document.createElement('template');\n        elseBlock.setAttribute('v-else', '');\n        elseBlock.innerHTML = this.el.innerHTML;\n        // the else block should be compiled in child scope\n        elseBlock._context = this.vm;\n        content.appendChild(elseBlock);\n      }\n      var scope = host ? host._scope : this._scope;\n      this.unlink = context.$compile(content, host, scope, this._frag);\n    }\n    if (content) {\n      replace(this.el, content);\n    } else {\n      remove(this.el);\n    }\n  },\n\n  fallback: function fallback() {\n    this.compile(extractContent(this.el, true), this.vm);\n  },\n\n  unbind: function unbind() {\n    if (this.unlink) {\n      this.unlink();\n    }\n  }\n};\n\nvar partial = {\n\n  priority: PARTIAL,\n\n  params: ['name'],\n\n  // watch changes to name for dynamic partials\n  paramWatchers: {\n    name: function name(value) {\n      vIf.remove.call(this);\n      if (value) {\n        this.insert(value);\n      }\n    }\n  },\n\n  bind: function bind() {\n    this.anchor = createAnchor('v-partial');\n    replace(this.el, this.anchor);\n    this.insert(this.params.name);\n  },\n\n  insert: function insert(id) {\n    var partial = resolveAsset(this.vm.$options, 'partials', id, true);\n    if (partial) {\n      this.factory = new FragmentFactory(this.vm, partial);\n      vIf.insert.call(this);\n    }\n  },\n\n  unbind: function unbind() {\n    if (this.frag) {\n      this.frag.destroy();\n    }\n  }\n};\n\nvar elementDirectives = {\n  slot: slot,\n  partial: partial\n};\n\nvar convertArray = vFor._postProcess;\n\n/**\n * Limit filter for arrays\n *\n * @param {Number} n\n * @param {Number} offset (Decimal expected)\n */\n\nfunction limitBy(arr, n, offset) {\n  offset = offset ? parseInt(offset, 10) : 0;\n  n = toNumber(n);\n  return typeof n === 'number' ? arr.slice(offset, offset + n) : arr;\n}\n\n/**\n * Filter filter for arrays\n *\n * @param {String} search\n * @param {String} [delimiter]\n * @param {String} ...dataKeys\n */\n\nfunction filterBy(arr, search, delimiter) {\n  arr = convertArray(arr);\n  if (search == null) {\n    return arr;\n  }\n  if (typeof search === 'function') {\n    return arr.filter(search);\n  }\n  // cast to lowercase string\n  search = ('' + search).toLowerCase();\n  // allow optional `in` delimiter\n  // because why not\n  var n = delimiter === 'in' ? 3 : 2;\n  // extract and flatten keys\n  var keys = Array.prototype.concat.apply([], toArray(arguments, n));\n  var res = [];\n  var item, key, val, j;\n  for (var i = 0, l = arr.length; i < l; i++) {\n    item = arr[i];\n    val = item && item.$value || item;\n    j = keys.length;\n    if (j) {\n      while (j--) {\n        key = keys[j];\n        if (key === '$key' && contains(item.$key, search) || contains(getPath(val, key), search)) {\n          res.push(item);\n          break;\n        }\n      }\n    } else if (contains(item, search)) {\n      res.push(item);\n    }\n  }\n  return res;\n}\n\n/**\n * Order filter for arrays\n *\n * @param {String|Array<String>|Function} ...sortKeys\n * @param {Number} [order]\n */\n\nfunction orderBy(arr) {\n  var comparator = null;\n  var sortKeys = undefined;\n  arr = convertArray(arr);\n\n  // determine order (last argument)\n  var args = toArray(arguments, 1);\n  var order = args[args.length - 1];\n  if (typeof order === 'number') {\n    order = order < 0 ? -1 : 1;\n    args = args.length > 1 ? args.slice(0, -1) : args;\n  } else {\n    order = 1;\n  }\n\n  // determine sortKeys & comparator\n  var firstArg = args[0];\n  if (!firstArg) {\n    return arr;\n  } else if (typeof firstArg === 'function') {\n    // custom comparator\n    comparator = function (a, b) {\n      return firstArg(a, b) * order;\n    };\n  } else {\n    // string keys. flatten first\n    sortKeys = Array.prototype.concat.apply([], args);\n    comparator = function (a, b, i) {\n      i = i || 0;\n      return i >= sortKeys.length - 1 ? baseCompare(a, b, i) : baseCompare(a, b, i) || comparator(a, b, i + 1);\n    };\n  }\n\n  function baseCompare(a, b, sortKeyIndex) {\n    var sortKey = sortKeys[sortKeyIndex];\n    if (sortKey) {\n      if (sortKey !== '$key') {\n        if (isObject(a) && '$value' in a) a = a.$value;\n        if (isObject(b) && '$value' in b) b = b.$value;\n      }\n      a = isObject(a) ? getPath(a, sortKey) : a;\n      b = isObject(b) ? getPath(b, sortKey) : b;\n    }\n    return a === b ? 0 : a > b ? order : -order;\n  }\n\n  // sort on a copy to avoid mutating original array\n  return arr.slice().sort(comparator);\n}\n\n/**\n * String contain helper\n *\n * @param {*} val\n * @param {String} search\n */\n\nfunction contains(val, search) {\n  var i;\n  if (isPlainObject(val)) {\n    var keys = Object.keys(val);\n    i = keys.length;\n    while (i--) {\n      if (contains(val[keys[i]], search)) {\n        return true;\n      }\n    }\n  } else if (isArray(val)) {\n    i = val.length;\n    while (i--) {\n      if (contains(val[i], search)) {\n        return true;\n      }\n    }\n  } else if (val != null) {\n    return val.toString().toLowerCase().indexOf(search) > -1;\n  }\n}\n\nvar digitsRE = /(\\d{3})(?=\\d)/g;\n\n// asset collections must be a plain object.\nvar filters = {\n\n  orderBy: orderBy,\n  filterBy: filterBy,\n  limitBy: limitBy,\n\n  /**\n   * Stringify value.\n   *\n   * @param {Number} indent\n   */\n\n  json: {\n    read: function read(value, indent) {\n      return typeof value === 'string' ? value : JSON.stringify(value, null, arguments.length > 1 ? indent : 2);\n    },\n    write: function write(value) {\n      try {\n        return JSON.parse(value);\n      } catch (e) {\n        return value;\n      }\n    }\n  },\n\n  /**\n   * 'abc' => 'Abc'\n   */\n\n  capitalize: function capitalize(value) {\n    if (!value && value !== 0) return '';\n    value = value.toString();\n    return value.charAt(0).toUpperCase() + value.slice(1);\n  },\n\n  /**\n   * 'abc' => 'ABC'\n   */\n\n  uppercase: function uppercase(value) {\n    return value || value === 0 ? value.toString().toUpperCase() : '';\n  },\n\n  /**\n   * 'AbC' => 'abc'\n   */\n\n  lowercase: function lowercase(value) {\n    return value || value === 0 ? value.toString().toLowerCase() : '';\n  },\n\n  /**\n   * 12345 => $12,345.00\n   *\n   * @param {String} sign\n   * @param {Number} decimals Decimal places\n   */\n\n  currency: function currency(value, _currency, decimals) {\n    value = parseFloat(value);\n    if (!isFinite(value) || !value && value !== 0) return '';\n    _currency = _currency != null ? _currency : '$';\n    decimals = decimals != null ? decimals : 2;\n    var stringified = Math.abs(value).toFixed(decimals);\n    var _int = decimals ? stringified.slice(0, -1 - decimals) : stringified;\n    var i = _int.length % 3;\n    var head = i > 0 ? _int.slice(0, i) + (_int.length > 3 ? ',' : '') : '';\n    var _float = decimals ? stringified.slice(-1 - decimals) : '';\n    var sign = value < 0 ? '-' : '';\n    return sign + _currency + head + _int.slice(i).replace(digitsRE, '$1,') + _float;\n  },\n\n  /**\n   * 'item' => 'items'\n   *\n   * @params\n   *  an array of strings corresponding to\n   *  the single, double, triple ... forms of the word to\n   *  be pluralized. When the number to be pluralized\n   *  exceeds the length of the args, it will use the last\n   *  entry in the array.\n   *\n   *  e.g. ['single', 'double', 'triple', 'multiple']\n   */\n\n  pluralize: function pluralize(value) {\n    var args = toArray(arguments, 1);\n    var length = args.length;\n    if (length > 1) {\n      var index = value % 10 - 1;\n      return index in args ? args[index] : args[length - 1];\n    } else {\n      return args[0] + (value === 1 ? '' : 's');\n    }\n  },\n\n  /**\n   * Debounce a handler function.\n   *\n   * @param {Function} handler\n   * @param {Number} delay = 300\n   * @return {Function}\n   */\n\n  debounce: function debounce(handler, delay) {\n    if (!handler) return;\n    if (!delay) {\n      delay = 300;\n    }\n    return _debounce(handler, delay);\n  }\n};\n\nfunction installGlobalAPI (Vue) {\n  /**\n   * Vue and every constructor that extends Vue has an\n   * associated options object, which can be accessed during\n   * compilation steps as `this.constructor.options`.\n   *\n   * These can be seen as the default options of every\n   * Vue instance.\n   */\n\n  Vue.options = {\n    directives: directives,\n    elementDirectives: elementDirectives,\n    filters: filters,\n    transitions: {},\n    components: {},\n    partials: {},\n    replace: true\n  };\n\n  /**\n   * Expose useful internals\n   */\n\n  Vue.util = util;\n  Vue.config = config;\n  Vue.set = set;\n  Vue['delete'] = del;\n  Vue.nextTick = nextTick;\n\n  /**\n   * The following are exposed for advanced usage / plugins\n   */\n\n  Vue.compiler = compiler;\n  Vue.FragmentFactory = FragmentFactory;\n  Vue.internalDirectives = internalDirectives;\n  Vue.parsers = {\n    path: path,\n    text: text,\n    template: template,\n    directive: directive,\n    expression: expression\n  };\n\n  /**\n   * Each instance constructor, including Vue, has a unique\n   * cid. This enables us to create wrapped \"child\n   * constructors\" for prototypal inheritance and cache them.\n   */\n\n  Vue.cid = 0;\n  var cid = 1;\n\n  /**\n   * Class inheritance\n   *\n   * @param {Object} extendOptions\n   */\n\n  Vue.extend = function (extendOptions) {\n    extendOptions = extendOptions || {};\n    var Super = this;\n    var isFirstExtend = Super.cid === 0;\n    if (isFirstExtend && extendOptions._Ctor) {\n      return extendOptions._Ctor;\n    }\n    var name = extendOptions.name || Super.options.name;\n    if (process.env.NODE_ENV !== 'production') {\n      if (!/^[a-zA-Z][\\w-]*$/.test(name)) {\n        warn('Invalid component name: \"' + name + '\". Component names ' + 'can only contain alphanumeric characaters and the hyphen.');\n        name = null;\n      }\n    }\n    var Sub = createClass(name || 'VueComponent');\n    Sub.prototype = Object.create(Super.prototype);\n    Sub.prototype.constructor = Sub;\n    Sub.cid = cid++;\n    Sub.options = mergeOptions(Super.options, extendOptions);\n    Sub['super'] = Super;\n    // allow further extension\n    Sub.extend = Super.extend;\n    // create asset registers, so extended classes\n    // can have their private assets too.\n    config._assetTypes.forEach(function (type) {\n      Sub[type] = Super[type];\n    });\n    // enable recursive self-lookup\n    if (name) {\n      Sub.options.components[name] = Sub;\n    }\n    // cache constructor\n    if (isFirstExtend) {\n      extendOptions._Ctor = Sub;\n    }\n    return Sub;\n  };\n\n  /**\n   * A function that returns a sub-class constructor with the\n   * given name. This gives us much nicer output when\n   * logging instances in the console.\n   *\n   * @param {String} name\n   * @return {Function}\n   */\n\n  function createClass(name) {\n    /* eslint-disable no-new-func */\n    return new Function('return function ' + classify(name) + ' (options) { this._init(options) }')();\n    /* eslint-enable no-new-func */\n  }\n\n  /**\n   * Plugin system\n   *\n   * @param {Object} plugin\n   */\n\n  Vue.use = function (plugin) {\n    /* istanbul ignore if */\n    if (plugin.installed) {\n      return;\n    }\n    // additional parameters\n    var args = toArray(arguments, 1);\n    args.unshift(this);\n    if (typeof plugin.install === 'function') {\n      plugin.install.apply(plugin, args);\n    } else {\n      plugin.apply(null, args);\n    }\n    plugin.installed = true;\n    return this;\n  };\n\n  /**\n   * Apply a global mixin by merging it into the default\n   * options.\n   */\n\n  Vue.mixin = function (mixin) {\n    Vue.options = mergeOptions(Vue.options, mixin);\n  };\n\n  /**\n   * Create asset registration methods with the following\n   * signature:\n   *\n   * @param {String} id\n   * @param {*} definition\n   */\n\n  config._assetTypes.forEach(function (type) {\n    Vue[type] = function (id, definition) {\n      if (!definition) {\n        return this.options[type + 's'][id];\n      } else {\n        /* istanbul ignore if */\n        if (process.env.NODE_ENV !== 'production') {\n          if (type === 'component' && (commonTagRE.test(id) || reservedTagRE.test(id))) {\n            warn('Do not use built-in or reserved HTML elements as component ' + 'id: ' + id);\n          }\n        }\n        if (type === 'component' && isPlainObject(definition)) {\n          if (!definition.name) {\n            definition.name = id;\n          }\n          definition = Vue.extend(definition);\n        }\n        this.options[type + 's'][id] = definition;\n        return definition;\n      }\n    };\n  });\n\n  // expose internal transition API\n  extend(Vue.transition, transition);\n}\n\ninstallGlobalAPI(Vue);\n\nVue.version = '1.0.28';\n\n// devtools global hook\n/* istanbul ignore next */\nsetTimeout(function () {\n  if (config.devtools) {\n    if (devtools) {\n      devtools.emit('init', Vue);\n    } else if (process.env.NODE_ENV !== 'production' && inBrowser && /Chrome\\/\\d+/.test(window.navigator.userAgent)) {\n      console.log('Download the Vue Devtools for a better development experience:\\n' + 'https://github.com/vuejs/vue-devtools');\n    }\n  }\n}, 0);\n\nmodule.exports = Vue;","var auth2, numInstances;\n\nmodule.exports = {\n    translations: {\n        description: {\n            en: 'Google Drive ({{config.email || \"Not connected\"}})',\n            de: 'Google Drive ({{config.email || \"Nicht verbunden\"}})',\n            fr: 'Google Drive ({{config.email || \"Non connecté\"}})',\n        },\n        'document': {\n            en: 'Doc',\n            de: 'Doc',\n            fr: 'Doc'\n        },\n        'spreadsheet': {\n            en: 'Spreadsheet',\n            de: 'Tabelle',\n            fr: 'Feuille de calcul'\n        },\n        'presentation': {\n            en: 'Presentation',\n            de: 'Präsentation',\n            fr: 'Presentation'\n        },\n        'map': {\n            en: 'My Maps',\n            de: 'My Maps',\n            fr: 'Mes Cartes'\n        },\n        'form': {\n            en: 'Form',\n            de: 'Formular',\n            fr: 'Formulaire'\n        },\n        'drawing': {\n            en: 'Drawing',\n            de: 'Zeichnung',\n            fr: 'Dessin'\n        },\n        'folder': {\n            en: 'Folder',\n            de: 'Ordner',\n            fr: 'Dossier'\n        },\n        'script': {\n            en: 'App Script',\n            de: 'App Script',\n            fr: 'App Script'\n        }\n    },\n    http: {\n        base: 'https://content.googleapis.com/drive/v3',\n        http: {\n            // Google web services by default have a limit of 1000 Requests / 100 seconds\n            // So keep 100ms meantime between all requests\n            throttle: 100\n        }\n    },\n    created: function () {\n        if (this.config.hosted_domain && numInstances) {\n            require('vue').console.warn('hosted_domain is a global option for Google Auth - can not have multiple storages based on that');\n        }\n        if (this.auth) {\n            this.config.email = this.auth.email;\n        }\n        numInstances++;\n    },\n    stored: {\n        auth: true\n    },\n    methods: {\n        loadAuth2: function() {\n            return this.$promise(function(resolve) {\n                if (auth2) {\n                    resolve();\n                } else {\n                    this.util.loadScript('https://apis.google.com/js/platform.js', function() {\n                        gapi.load('auth2', function() {\n                            var options = {\n                                client_id: this.config.client_id,\n                                scope: 'https://www.googleapis.com/auth/drive.readonly'\n                            };\n                            if (this.config.hosted_domain) {\n                                options.hosted_domain = this.config.hosted_domain;\n                            }\n                            gapi.auth2.init(options).then(function(a) {\n                                auth2 = a;\n                                resolve();\n                            });\n                        }.bind(this));\n                    }.bind(this));\n                }\n            });\n        },\n        signIn: function () {\n            return this.$promise(function(resolve) {\n                this.loadAuth2().then(function() {\n                    if (auth2.isSignedIn.get()) {\n                        resolve(auth2.currentUser.get());\n                    } else {\n                        var open = this.$parent.open;\n                        this.$parent.open = true;\n                        var div = this.$el.appendChild(document.createElement('div'));\n                        div.className = 'panel panel-default';\n                        var button = div.appendChild(document.createElement('div'));\n                        button.className = 'btn btn-default btn-block';\n                        button.innerHTML = this.t('login.login');\n\n                        auth2.attachClickHandler(button, {}, function(currentUser) {\n                            this.$parent.open = open;\n                            this.$el.removeChild(div);\n                            resolve(currentUser);\n                        }.bind(this));\n                    }\n                }.bind(this));\n            });\n        },\n        setupToken: function() {\n            return this.$promise(function(resolve) {\n                var setup = function() {\n                    this.$options.http.params = {key: this.config.api_key };\n                    this.$options.http.headers = {Authorization: 'Bearer ' + this.auth.token};\n                    resolve();\n                }.bind(this);\n                if (this.auth && this.auth.expires_at < Date.now()) {\n                    this.auth = null;\n                }\n                if (this.auth) {\n                    setup();\n                } else {\n                    this.signIn().then(function(user) {\n                        this.auth = {\n                            token: user.getAuthResponse().access_token,\n                            expires_at: user.getAuthResponse().expires_at,\n                            email: user.getBasicProfile().getEmail()\n                        };\n                        setup();\n                    }.bind(this));\n                }\n            });\n        },\n        loadItems: function() {\n            return this.$promise(function(resolve) {\n                this.setupToken().then(function (token) {\n                    this.http.get('files', {params: {key: this.config.api_key, q: '\\'root\\' in parents'}});\n                }.bind(this));\n            });\n        }\n    },\n    events: {\n        'load-items': function (tree) {\n            this.setupToken().then(function (token) {\n                this.http.get(\n                    'files',\n                    {\n                        params: {\n                            key: this.config.api_key,\n                            q: '\\'' + (tree.item ? tree.item.id : 'root') + '\\' in parents and trashed = false',\n                            fields: 'files,kind'\n                        }\n                    }\n                ).then(function(response) {\n                    tree.items = this.sortItems(\n                        JSON.parse(response.data).files.map(function(item) {\n                            var type = item.mimeType === 'application/vnd.google-apps.folder' ? 'dir' : 'file';\n                            var typeLabel, googleType;\n                            if (item.mimeType.indexOf('/vnd.google-apps.') > 0) {\n                                googleType = item.mimeType.split('.').pop();\n                                typeLabel = 'Google ' + (this.t(googleType) || googleType[0].toUpperCase() + googleType.substr(1));\n                            }\n                            return this.createItem({\n                                id: item.id,\n                                name: item.name,\n                                type: type,\n                                size: item,\n                                mediaType: {\n                                    icon: item.iconLink,\n                                    iconBig: (type === 'file' && item.iconLink) ? item.iconLink.replace(/\\/icon_[0-9]+_([^_]+)_[^\\/]+/, '/mediatype/icon_1_$1_x128.png') : undefined,\n                                    label: typeLabel\n                                },\n                                links: {\n                                    download: item.webContentLink,\n                                    open: item.webViewLink\n                                },\n                                extension: item.fileExtension,\n                                thumbnail: item.thumbnailLink,\n                                data: item\n                            });\n                        }.bind(this))\n                    );\n                });\n            }.bind(this));\n        }\n    }\n};\n"]}